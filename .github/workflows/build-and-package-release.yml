name: Build-and-package-release-workflow

on:
  push:
    tags:
      - 'v*'

jobs:
  Build-and-package-release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master

      - name: Infer the version from the github ref
        id: inferVersion
        run: |
          $prefix = "refs/tags/v"
          if (!${env:GITHUB_REF}.StartsWith($prefix))
          {
              throw "Unexpected GITHUB_REF: ${env:GITHUB_REF}"
          }

          $version = ${env:GITHUB_REF}.Substring($prefix.Length)
          Write-Host "The version is: $version"

          if ($version.Contains("'"))
          {
              throw "Unexpected version containing a single quote: $version"
          }
          if ($version.Contains('"'))
          {
              throw "Unexpected version containing a double quote: $version"
          }
          if ($version.Contains(':'))
          {
              throw "Unexpected version containing a full colon: $version"
          }

          Write-Output "::set-output name=version::$version"

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.0
        with:
          vs-version: 15

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.2

      - name: Install .NET core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.100'

      - name: Install build dependencies
        working-directory: src
        run: powershell .\InstallBuildDependencies.ps1

      - name: Build for release
        working-directory: src
        run: powershell .\BuildForRelease.ps1

      - name: Package
        working-directory: src
        run: |
          $version = '${{ steps.inferVersion.outputs.version }}'
          Write-Host "Packaging for the release version: $version"
          powershell .\PackageRelease.ps1 -version $version

          # Rename so that the users always know which version they downloaded

          $releaseDir = "artefacts\release\$version"
          $archives = Get-ChildItem $releaseDir -Filter *.zip
          foreach($name in $archives)
          {
              $path = Join-Path $releaseDir $name
              $nameWoExt = [io.path]::GetFileNameWithoutExtension($path)

              $target = Join-Path $releaseDir ($nameWoExt + "." + $version + ".zip")

              Write-Host "Moving: $path -> $target"
              Move-Item -Path $path -Destination $target
          }

      - name: Upload release assets
        uses: AButler/upload-release-assets@v2.0
        with:
          files: "artefacts/release/${{ steps.inferVersion.outputs.version }}/*.zip"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: "v${{ steps.inferVersion.outputs.version }}"
