@page "/test2"
@using AdminShellNS
@using static AdminShellNS.AdminShellV20;
@using AnyUi
@using BlazorUI.Shared
@inject BlazorUI.Data.AASService SubmodelService
@inject BlazorUI.Data.blazorSessionService bi

@{
// resharper disable all
}


@{

    // access
    if (_grid == null)
        return;

    // because of not working with table, need an outer <div>
    var divOuterStyle = new StylePile();
    divOuterStyle.SetSpecifics(
        margin: _grid.Margin);

    //
    // Eval different table attributes
    //

    var tablestyle = new StylePile();
    var deleteWidth = false;

    // the approach of providing style from outside proved tobe difficult
    //if (InitStyle != null) tablestyle.Add(InitStyle); 

    tablestyle.Add("background-color", _grid.Background?.HtmlRgb(), doNotSetIfNull: true);

    if (AnyUiDisplayDataHtml.DebugFrames)
        tablestyle.Set("border", "1px solid black", add: true);

    if (_grid.HorizontalAlignment.HasValue && _grid.HorizontalAlignment.Value == AnyUiHorizontalAlignment.Left)
    {
        if (TableAttributes == null)
            TableAttributes = new Dictionary<string, object>();
        TableAttributes["align"] = "left";
        deleteWidth = true;
    }
    else
    if (_grid.HorizontalAlignment.HasValue && _grid.HorizontalAlignment.Value == AnyUiHorizontalAlignment.Right)
    {
        // tablestyle.Set("align", "right", add: true);
        if (TableAttributes == null)
            TableAttributes = new Dictionary<string, object>();
        TableAttributes["align"] = "right";
        deleteWidth = true;
    }
    else
    {
        tablestyle.Set("width", "100%", add: true);
    }

    if ((Parent is AnyUiWrapPanel pwp && pwp.Orientation == AnyUiOrientation.Horizontal)
    || (Parent is AnyUiStackPanel psp && psp.Orientation == AnyUiOrientation.Horizontal))
    {
        tablestyle -= "width";
        deleteWidth = true;
        tablestyle += "display: inline-table";
    }

    // 
    // Render
    //

    <div style="@divOuterStyle">
        <table @attributes="@TableAttributes" style="@tablestyle">
            @if (true)
            {
                <thead>
                    <tr>
                        @for (int ci = 0; ci < _numCol; ci++)
                        {
                            var thStyle = GetColHeadStyle(ci);
                            if (deleteWidth)
                                thStyle -= "width";

                            <th style="@thStyle">
                            </th>
                        }
                    </tr>
                </thead>
            }
            <tbody>
                @{
                    @for (int ri = 0; ri < _numRow; ri++)
                    {
                        <tr>
                            @for (int ci = 0; ci < _numCol; ci++)
                            {
                                // this checks exactly for the root coordinates (no span coordinates)
                                var ch = GetChildAt(ri, ci);
                                if (ch != null)
                                {
                                    var colspan = 1;
                                    if (ch.GridColumnSpan.HasValue && ch.GridColumnSpan.Value > 1)
                                        colspan = ch.GridColumnSpan.Value;

                                    var rowspan = 1;
                                    if (ch.GridRowSpan.HasValue && ch.GridRowSpan.Value > 1)
                                        rowspan = ch.GridRowSpan.Value;

                                    StylePile divWithStyle = null;
                                    if (_grid.ColumnDefinitions != null && ci < _grid.ColumnDefinitions.Count)
                                    {
                                        var scale = (_grid.DisplayData as AnyUiDisplayDataHtml)?.GetScale() ?? 1.0;
                                        var cd = _grid.ColumnDefinitions[ci];
                                        if (cd.MinWidth.HasValue)
                                            divWithStyle = new StylePile(FormattableString.Invariant(
                                                $"min-width: {cd.MinWidth.Value}px"));
                                    }

                                    // modify td style
                                    var tdStyle = GetCellStyle(ri, ci);
                                    if (ch is AnyUiFrameworkElement chfe)
                                    {
                                        if (chfe.VerticalAlignment == null
                                            || (chfe.VerticalAlignment.HasValue && chfe.VerticalAlignment.Value == AnyUiVerticalAlignment.Top))
                                            tdStyle.Set("vertical-align", "top", add: true);
                                        else
                                        if (chfe.VerticalAlignment.HasValue && chfe.VerticalAlignment.Value == AnyUiVerticalAlignment.Center)
                                            tdStyle.Set("vertical-align", "middle", add: true);
                                        else
                                        if (chfe.VerticalAlignment.HasValue && chfe.VerticalAlignment.Value == AnyUiVerticalAlignment.Bottom)
                                            tdStyle.Set("vertical-align", "bottom", add: true);
                                        else
                                        if (chfe.VerticalAlignment.HasValue && chfe.VerticalAlignment.Value == AnyUiVerticalAlignment.Stretch)
                                        {
                                            tdStyle.Set("vertical-align", "middle", add: true);
                                            tdStyle.Set("height", "100%", add: true);
                                        }
                                    }

                                    // now render
                                    <td style="@tdStyle" colspan="@colspan" rowspan="@rowspan">

                                        @if (divWithStyle != null)
                                        {
                                            <div style="@divWithStyle">
                                                <AnyUiRenderElem DisplayData="@DisplayData"
                                                                 Session="@Session"
                                                                 Parent="@Element"
                                                                 Element="@ch" />
                                            </div>
                                        }
                                        else
                                        {
                                            <AnyUiRenderElem DisplayData="@DisplayData"
                                                             Session="@Session"
                                                             Parent="@Element"
                                                             Element="@ch" />
                                        }
                                    </td>

                                    // ci += (colspan - 1);
                                }
                                else
                                {
                                    // if not root, check if a spanned coordinate
                                    var span = _grid.IsCoveredBySpanCell(ri, ci, returnOnSpanCell: true);

                                    // make a td, if NOT spanned
                                    if (span == null)
                                    {
                                        <td></td>
                                    }
                                }
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
        [Parameter(CaptureUnmatchedValues = true)]
        public Dictionary<string, object> TableAttributes { get; set; }

        [Parameter]
        public AnyUiDisplayDataHtml DisplayData { get; set; }

        [Parameter]
        public Data.blazorSessionService Session { get; set; }

        [Parameter]
        public StylePile InitStyle { get; set; }

    protected AnyUiGrid _grid = null;

    protected List<string> _colHeadStyles = new List<string>();
    protected List<string> _colCellStyles = new List<string>();

    [Parameter]
    public AnyUiUIElement Parent { get; set; }

    [Parameter]
    public AnyUiUIElement Element
    {
        get { return _grid; }
        set
        {
            _grid = value as AnyUiGrid;
            if (_grid?.Children == null || _grid.RowDefinitions == null || _grid.ColumnDefinitions == null)
                return;

            if (_grid.RowDefinitions.Count == 3 && _grid.ColumnDefinitions.Count == 6
                && _grid.Children.Count == 4
                && _grid.Children[0] is AnyUiWrapPanel wp
                && wp.Children != null && wp.Children.Count == 1
                && wp.Children[0] is AnyUiSelectableTextBlock stb
                && stb.Text.StartsWith("ChargeId")
                && _grid.Children[3] is AnyUiStackPanel sp1
                && sp1.Children != null && sp1.Children.Count == 1
                && sp1.Children[0] is AnyUiStackPanel sp2)
            {
                sp1.DebugTag = "CIDSP1";
                sp2.DebugTag = "CIDSP2";
            }

            // try fix?
            _grid.FixRowColDefs();

            // prepare simple grid dimensions
            _numRow = _grid.RowDefinitions.Count();
            _numCol = _grid.ColumnDefinitions.Count();

            // try to assess all column width with star
            var sumOfStars = 0.0;
            foreach (var cd in _grid.ColumnDefinitions)
                if (cd?.Width?.Type == AnyUiGridUnitType.Star)
                    sumOfStars += cd.Width.Value;

            // make sure to have a weight > 0.0 for balancing single columns
            var starWeight = Math.Max(sumOfStars, 1.0);
            var scale = (_grid.DisplayData as AnyUiDisplayDataHtml)?.GetScale() ?? 1.0;

            _colHeadStyles = new List<string>();
            _colCellStyles = new List<string>();
            foreach (var cd in _grid.ColumnDefinitions)
            {
                var chs = "";
                var ccs = "white-space: nowrap;";
                if (AnyUiDisplayDataHtml.DebugFrames)
                    ccs += " border: 1px solid black;";

                if (cd.Width?.Type == AnyUiGridUnitType.Pixel)
                    chs = $"min-width:{cd.Width.Value * scale}px;";
                if (cd.Width?.Type == AnyUiGridUnitType.Star)
                    chs = FormattableString.Invariant($"width:{Math.Floor(100.0 * cd.Width.Value / starWeight)}%;");
                if (cd.Width?.Type == AnyUiGridUnitType.Auto)
                    chs = $"";

                _colHeadStyles.Add(chs);
                _colCellStyles.Add(ccs);
            }

            // if there is absolutely no star in the table, we have to introduce one!
            // this will allow the "auto" columns to stick together left or right
            if (sumOfStars < 0.001)
            {
                _numCol++;
                _colHeadStyles.Add("width:100%;");
                _colCellStyles.Add(";border: 1px dashed green");
            }

            ;
        }
    }

    protected StylePile GetColHeadStyle(int col)
    {
        if (_colHeadStyles == null || col < 0 || col >= _colHeadStyles.Count)
            return new StylePile();
        return new StylePile(_colHeadStyles[col]);
    }

    protected StylePile GetCellStyle(int row, int col)
    {
        if (_colCellStyles == null
            || row < 0 || row >= _numRow
            || col < 0 || col >= _colCellStyles.Count)
            return new StylePile();

        // column style yes .. now as style pile
        var sp = new StylePile(_colCellStyles[col]);

        // attach attributes "lend" from the child?
        var ch = GetChildAt(row, col);
        if (ch != null)
        {
            if (ch is AnyUi.IGetBackground igb)
                sp.Add("background-color", igb.GetBackground()?.HtmlRgb(), doNotSetIfNull: true);

            if (ch is AnyUiBorder border)
                sp.SetSpecifics(
                    margin: border.Margin,
                    borderBrush: border.BorderBrush,
                    borderThickness: border.BorderThickness);
        }

        // ok, back
        return sp;
    }

    protected int _numRow { get; set; }
    protected int _numCol { get; set; }

    protected AnyUiUIElement GetChildAt(int row, int col)
    {
        return _grid?.GetChildAt(row, col);
    }

    protected bool Debug = false;

}
