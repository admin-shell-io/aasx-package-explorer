@page "/test2"
@using AdminShellNS
@using static AdminShellNS.AdminShellV20;
@using AnyUi
@using BlazorUI.Shared
@inject BlazorUI.Data.AASService SubmodelService
@inject BlazorUI.Data.blazorSessionService bi

@{
// resharper disable all
}


@{

@* Render the table *@


var tablestyle = new StylePile("width: 100%; border: 1px solid black;");
if ((Parent is AnyUiWrapPanel pwp && pwp.Orientation == AnyUiOrientation.Horizontal)
     || (Parent is AnyUiStackPanel psp && psp.Orientation == AnyUiOrientation.Horizontal))
{
    tablestyle -= "width";
    tablestyle += "display: inline-table";
}

<table @attributes="@TableAttributes" style="@tablestyle">
    @if (Debug)
    {
        <thead>
            <tr>
                @for (int ci = 0; ci < _numCol; ci++)
                {
                    <th style="@GetColHeadStyle(ci)">
                        @ci
                    </th>
                }
            </tr>
        </thead>
    }
    <tbody>
        @{
            @for (int ri = 0; ri < _numRow; ri++)
            {
                <tr>
                    @for (int ci = 0; ci < _numCol; ci++)
                    {

                        var ch = GetChildAt(ri, ci); 
                        if (ch != null)
                        {
                            var colspan = 1;
                            if (ch.GridColumnSpan.HasValue && ch.GridColumnSpan.Value > 1)
                                colspan = ch.GridColumnSpan.Value;

                            <td style="@GetCellStyle(ri, ci)" colspan="@colspan">
                                <AnyUiRenderElem DisplayData="@DisplayData"
                                                 Session="@Session"
                                                 Parent="@Element"
                                                 Element="@ch" />
                            </td>

                            ci += (colspan - 1);
                        }
                        else
                        {
                            <td/>
                        }
                    }
                </tr>
            }
        }
    </tbody>
</table>

}

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> TableAttributes { get; set; }

    [Parameter]
    public AnyUiDisplayDataHtml DisplayData { get; set; }

    [Parameter]
    public Data.blazorSessionService Session { get; set; }

    protected AnyUiGrid _grid = null;

    protected List<string> _colHeadStyles = new List<string>();
    protected List<string> _colCellStyles = new List<string>();

    [Parameter]
    public AnyUiUIElement Parent { get; set; }

    [Parameter]
    public AnyUiUIElement Element
    {
        get { return _grid; }
        set
        {
            _grid = value as AnyUiGrid;
            if (_grid?.Children == null || _grid.RowDefinitions == null || _grid.ColumnDefinitions == null)
                return;

            if (_grid.Children.Count > 0 && _grid.Children[0] is AnyUiSelectableTextBlock stb
                && stb.Text == "semanticId:")
                ;

            // try fix?
            _grid.FixRowColDefs();

            // prepare simple grid dimensions
            _numRow = _grid.RowDefinitions.Count();
            _numCol = _grid.ColumnDefinitions.Count();

            // try to assess all column width with star
            var sumOfStars = 0.0;
            foreach (var cd in _grid.ColumnDefinitions)
                if (cd?.Width?.Type == AnyUiGridUnitType.Star)
                    sumOfStars += cd.Width.Value;

            // make sure to have a weight > 0.0 for balancing single columns
            var starWeight = Math.Max(sumOfStars, 1.0);

            _colHeadStyles = new List<string>();
            _colCellStyles = new List<string>();
            foreach (var cd in _grid.ColumnDefinitions)
            {
                var chs = "";
                var ccs = "white-space: nowrap;border: 1px solid black;";

                if (cd.Width?.Type == AnyUiGridUnitType.Pixel)
                    chs = $"width:{cd.Width.Value}px;";
                if (cd.Width?.Type == AnyUiGridUnitType.Star)
                    chs = $"width:{Math.Floor(100.0 * cd.Width.Value / starWeight)}%;";
                if (cd.Width?.Type == AnyUiGridUnitType.Auto)
                    chs = $"";

                _colHeadStyles.Add(chs);
                _colCellStyles.Add(ccs);
            }

            // if there is absolutely no star in the table, we have to introduce one!
            // this will allow the "auto" columns to stick together left or right
            if (sumOfStars < 0.001)
            {
                _numCol++;
                _colHeadStyles.Add("width:100%;");
                _colCellStyles.Add(";border: 1px dashed green");
            }

            ;
        }
    }

    protected string GetColHeadStyle(int col)
    {
        if (_colHeadStyles == null || col < 0 || col >= _colHeadStyles.Count)
            return "";
        return _colHeadStyles[col];
    }

    protected StylePile GetCellStyle(int row, int col)
    {
        if (_colCellStyles == null
            || row < 0 || row >= _numRow
            || col < 0 || col >= _colCellStyles.Count)
            return new StylePile();

        // column style yes .. now as style pile
        var sp = new StylePile(_colCellStyles[col]);

        // attach attributes "lend" from the child?
        var ch = GetChildAt(row, col);
        if (ch != null)
        {
            if (ch is AnyUi.IGetBackground igb)
                sp.Add("background-color", igb.GetBackground()?.HtmlRgb(), doNotSetIfNull: true);
        }

        // ok, back
        return sp;
    }

    protected int _numRow { get; set; }
    protected int _numCol { get; set; }

    protected AnyUiUIElement GetChildAt(int row, int col)
    {
        return _grid?.GetChildAt(row, col);
    }

    protected bool Debug = false;

}
