@page "/"
@using AdminShellNS
@using AasxIntegrationBase
@using static AdminShellNS.AdminShellV20;
@*using BlazorUI*@
@using AnyUi
@using AasxPackageLogic 
@using BlazorUI.Shared
@using BlazorUI.Pages 
@using BlazorUI.Utils
@using BlazorUI.Data
@using System.Threading
@using Microsoft.AspNetCore.WebUtilities
@using AasxPackageLogic.PackageCentral;
@*using System*@
@*using System.Net;*@
@inject IJSRuntime JSRuntime
@inject BlazorUI.Data.AASService SubmodelService
@inject BlazorUI.Data.blazorSessionService bi
@inject NavigationManager NavManager

@implements IDisposable

@{
// resharper disable all
}

<div class="col-12 row">
    <br />
    <div class="col-4">
        <div class="row-12">
            <div class="row">
                @{
                    session = AnyUiDisplayContextHtml.findSession(bi.sessionNumber);
                    sessionHtmlEventIn = session.htmlEventIn;
                }
                @if (session != null && sessionHtmlEventIn)
                {
                    <Modal @bind-Open="sessionHtmlEventIn" Close="OnClose">
                        
                        @if (session.htmlEventType == "MessageBoxFlyoutShow" && session.htmlEventInputs.Count >= 2)
                        {
                            string message = (string)session.htmlEventInputs[0];
                            string caption = (string)session.htmlEventInputs[1];
                            AnyUiMessageBoxButton buttons = (AnyUiMessageBoxButton)session.htmlEventInputs[2];
                            session.htmlEventInputs.Clear();

                            <form method="dialog">
                                <p><span style="font-weight:bold">@caption</span></p>
                                <br />
                                <p>@message</p>
                                <br />
                                @if (buttons == AnyUiMessageBoxButton.OK || buttons == AnyUiMessageBoxButton.OKCancel)
                                {
                                    <button value="OK">OK</button>
                                }
                                @if (buttons == AnyUiMessageBoxButton.YesNo || buttons == AnyUiMessageBoxButton.YesNoCancel)
                                {
                                    <button value="Yes">Yes</button>
                                    <button value="No">No</button>
                                }
                                @if (buttons == AnyUiMessageBoxButton.YesNoCancel || buttons == AnyUiMessageBoxButton.OKCancel)
                                {
                                    <button value="Cancel">Cancel</button>
                                }
                            </form>
                        }
                        else
                        if (session.htmlEventType == "ModalSelectFile")
                        {
                            session.htmlEventInputs.Clear();

                            <form method="dialog">
                                <p><span style="font-weight:bold">Select file</span></p>
                                <br />                                        
                                <InputFile OnChange="HandleFileSelected2" />
                                <span>&nbsp&nbsp&nbsp&nbsp</span>
                            </form>
                            @code {
                                async Task HandleFileSelected2(IFileListEntry[] files)
                                {                                               
                                    // try get the file contents
                                    string targetFn = null;
                                    try
                                    {
                                        var file = files.FirstOrDefault();
                                        if (file != null)
                                        {
                                            var fn = System.IO.Path.Combine(
                                                        System.IO.Path.GetTempPath(), 
                                                        System.IO.Path.GetFileName(file.Name));
                                            var fileStream = System.IO.File.Create(fn);
                                            await file.Data.CopyToAsync(fileStream);
                                            fileStream.Close();
                                            targetFn = fn;
                                        }
                                    }
                                    catch
                                    {
                                    }

                                    // finally: the modal dialog will be closed!
                                    session.htmlEventIn = false;
                                    session.htmlEventType = null;
                                    session.htmlEventInputs.Clear();
                                    session.htmlEventOut = true;                                            
                                    session.htmlEventOutputs.Clear();
                                    session.htmlEventOutputs.Add(targetFn);
                                }
                            }
                        }
                        else
                        if (session.htmlEventType == "ModalSelectEntity")
                        {
                            session.htmlEventInputs.Clear();

                            <p><span style="font-weight:bold">Select AAS entity</span></p>
                            <br />                                                       
                            <div style="max-width: 70%; max-height: 70%">
                            <Tree Nodes="Items" ChildSelector="@(item => item.Childs)"                          
                                    @bind-ExpandedNodes="ExpandedNodes"
                                    SelectedNodeChanged="new EventCallback<Item>(null, (Action<Item>) SelectedNodeChangedModal)"
                                    HasChildNodes="@(item => item.Childs?.Any() == true)">
                                <TitleTemplate>                                                
                                    <span style="color:white;background-color:blue;">@ViewNodeType(context)</span> @ViewNodeID(context)@ViewNodeInfo(context)
                                    <strong><span style="color:blue">@getSymbols(context)</span></strong>
                                </TitleTemplate>
                            </Tree>
                            <br />                                                                                
                            </div>

                            <form method="dialog">
                                <button value="OK">OK</button>
                                <button value="Cancel">Cancel</button>
                            </form>

                            @code {
                                public void SelectedNodeChangedModal(Item im)
                                {
                                    ;
                                    if (session != null)
                                    {
                                        session.htmlEventOutputs.Clear();
                                        session.htmlEventOutputs.Add(im?.Referable);
                                    }
                                }
                            }
                        }
                        else
                        if (session.htmlEventType == "StartFlyoverModal" && session.htmlEventInputs.Count >= 1)
                        {
                            AnyUiDialogueDataBase dialogueData = (AnyUiDialogueDataBase)session.htmlEventInputs[0];
                            if (dialogueData is AnyUiDialogueDataTextEditor ddte)
                            {
                                string flyCaption = ddte.Caption + " - read only";
                                flyText = ddte.Text;
                                session.htmlEventInputs.Clear();
                                            
                                <form method="dialog">
                                    <p><span style="font-weight:bold">@flyCaption</span></p>
                                    // <textarea cols="80" rows="20" @onchange="@((ChangeEventArgs __e) => MyTextInput(__e.Value.ToString()))">@flyText</textarea>
                                    <textarea cols="100" rows="20"
                                                style="resize:both;">@flyText</textarea>
                                    <br />
                                    <button value="OK">OK</button>
                                    <button value="Cancel">Cancel</button>
                                </form>
                            }
                            if (dialogueData is AnyUiDialogueDataSelectFromList ddsfl)
                            {
                                int sizeDdsfl = ddsfl.ListOfItems.Count;
                                int iDdsfl = 0;

                                <form method="dialog">
                                    <select class="form-control selectpicker" size="@sizeDdsfl"
                                            @onchange="@((ChangeEventArgs __e) => MyDialogDataSelectFromList(__e.Value.ToString()))">
                                        @for (iDdsfl = 0; iDdsfl < sizeDdsfl; iDdsfl++)
                                        {
                                            // menu item itself
                                            string textDdsfl = ddsfl.ListOfItems[iDdsfl].Text;
                                            <option value="@(iDdsfl + ": " + textDdsfl)">@(iDdsfl + ": " + textDdsfl)</option>
                                        }
                                    </select>
                                </form>
                            }
                        }
                        else
                        if (session.htmlEventType == "contextMenu" && session.htmlEventInputs.Count >= 1)
                        {
                            // AnyUiUIElement el = (AnyUiUIElement)AnyUiDisplayContextHtml.htmlEventInputs[0];
                            AnyUiSpecialActionContextMenu cntlcm =
                                (AnyUiSpecialActionContextMenu)session.htmlEventInputs[1];
                            var nmi = cntlcm.MenuItemHeaders.Length / 2;
                            int i = 0;
                            string icon = "" + cntlcm.MenuItemHeaders[0];
                            string header = "" + cntlcm.MenuItemHeaders[1];
                            session.htmlEventInputs.Clear();
                            // string v = i + ": " + icon + " " + header;
                            <form method="dialog">
                                <select class="form-control selectpicker" size="@nmi"
                                        @onchange="@((ChangeEventArgs __e) => MyContextMenuSelect(__e.Value.ToString()))">
                                    @for (i = 0; i < nmi; i++)
                                    {
                                        // menu item itself
                                        icon = "" + cntlcm.MenuItemHeaders[2 * i + 0];
                                        header = "" + cntlcm.MenuItemHeaders[2 * i + 1];
                                        <option value="@(i + ": " + icon + " " + header)">@(i + ": " + icon + " " + header)</option>
                                    }
                                </select>
                            </form>
                        }
                        else
                        {
                            session.htmlEventInputs.Clear();
                            <form method="dialog">
                                <p><span style="font-weight:bold">Something went wrong!</span></p>
                                <br /> 
                                <button value="Cancel">Cancel</button>
                            </form>
                        }
                    </Modal>
                }

                @code {
                    private AnyUiHtmlEventSession session { get; set; }
                    private bool sessionHtmlEventIn { get; set; }

                    void MyContextMenuSelect(string value)
                    {
                        string[] s = value.Split(':');
                        int i = Convert.ToInt32(s[0]);
                        session.htmlEventOutputs.Add(i);
                        session.htmlEventIn = false;
                        session.htmlEventInputs.Clear();
                        session.htmlEventOut = true;
                    }

                    void MyDialogDataSelectFromList(string value)
                    {
                        string[] s = value.Split(':');
                        int i = Convert.ToInt32(s[0]);
                        session.htmlEventOutputs.Add(i);
                        session.htmlEventIn = false;
                        session.htmlEventInputs.Clear();
                        session.htmlEventOut = true;
                    }

                    private void MyTextInput(string value)
                    {
                        flyText = value;
                    }

                    public string flyText { get; set; }

                    void OnClose(string value)
                    {
                        session.htmlEventIn = false;
                        session.htmlEventInputs.Clear();
                        switch (session.htmlEventType)
                        {
                            case "MessageBoxFlyoutShow":

                                session.htmlEventOutputs.Clear();
                                AnyUiMessageBoxResult r = AnyUiMessageBoxResult.None;
                                switch (value)
                                {
                                    case "OK":
                                        r = AnyUiMessageBoxResult.OK;
                                        break;
                                    case "Cancel":
                                        r = AnyUiMessageBoxResult.Cancel;
                                        break;
                                    case "Yes":
                                        r = AnyUiMessageBoxResult.Yes;
                                        break;
                                    case "No":
                                        r = AnyUiMessageBoxResult.No;
                                        break;
                                }
                                session.htmlEventOutputs.Add(r);
                                break;

                            case "ModalSelectEntity":
                                // result is already in the session.htmlEventOutputs
                                break;

                            case "StartFlyoverModal":
                                session.htmlEventOutputs.Clear();
                                session.htmlEventOutputs.Add(flyText);
                                switch (value)
                                {
                                    case "OK":
                                        session.htmlEventOutputs.Add(true);
                                        break;
                                    case "Cancel":
                                        session.htmlEventOutputs.Add(false);
                                        break;
                                }
                                break;
                            
                            case "contextMenu":
                                session.htmlEventOutputs.Clear();                               
                                break;

                            default:
                                session.htmlEventOutputs.Clear();                               
                                break;
                        }
                        session.htmlEventOut = true;
                    }
                }
            </div>
            <div class="row" style="border-style:solid;border-color:blue;border-radius:8px;word-wrap:break-word;position:sticky;padding:10px">
                <div class="col" style="word-wrap:break-word">
                    @updateVisibleTree(Items, selectedNode)
                    @* @if (Program.isLoading)
                        {<span style="color:white;background-color:blue;">Loading...</span>} *@
                    @if (bi.env == null)
                    {
                        <span style="color:white;background-color:blue;">
                            Enter * to read AASX from file system<br />
                            Enter URL of AASX Server REST API (without /server/listaas)<br />
                        </span>
                    }
                    @* @bind-SelectedNode="SelectedNode" *@
                    <Tree Nodes="Items" ChildSelector="@(item => item.Childs)"                          
                          @bind-ExpandedNodes="ExpandedNodes"
                          @bind-SelectedNode="SelectedNode"
                          HasChildNodes="@(item => item.Childs?.Any() == true)">
                        <TitleTemplate>
                            @{ //// SubmodelService.syncSubTree(context);
                            }
                            <span style="color:white;background-color:blue;">@ViewNodeType(context)</span> @ViewNodeID(context)@ViewNodeInfo(context)
                            <strong><span style="color:blue">@getSymbols(context)</span></strong>
                        </TitleTemplate>
                    </Tree>
                    @*<br /><br />*@
                    <br />
                </div>
            </div>
            <div class="row" style="border-style:solid;border-color:blue;border-radius:8px;word-wrap:break-word;position:sticky;padding:10px">
                @{
                    if (bi.env != null && (selectedNode == null || selectedNode.Tag != null))
                    {
                        {
                            if (bi.thumbNail == null && bi.env != null)
                            {
                                System.IO.Stream s = null;
                                try
                                {
                                    s = bi.env.GetLocalThumbnailStream();
                                }
                                catch
                                {
                                    s = null;
                                }
                                if (s != null)
                                {
                                    using (var m = new System.IO.MemoryStream())
                                    {
                                        s.CopyTo(m);
                                        bi.thumbNail = System.Convert.ToBase64String(m.ToArray());
                                    }

                                    // it is indespensible to properly close the thumbnail stream!
                                    s.Close();
                                }
                            }
                            if (bi.thumbNail != null)
                            {
                                <br />
                                <img src=data:image;base64,@bi.thumbNail
                                     style="max-width:60%;display:block;margin-left:auto;margin-right:auto" alt="Details Image" />
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>
    <!-- right panel -->
    <div class="col-8" style="border-style:solid;border-color:blue;border-radius:8px;position:sticky;padding:10px;width:100%;">
        <div class="sticky-top" style="word-wrap: break-word; width: 100%;">
            @{
                if (selectedNode != null && selectedNode.Tag != null)
                {
                    bool view = false;
                    bi.helper.editMode = bi.editMode;
                    if (bi.editMode)
                    {
                        bi.helper.repo = bi.repo;
                    }
                    else
                    {
                        bi.helper.repo = null;
                    }
                    var displayContext = new AnyUiDisplayContextHtml(bi);
                    var displayData = new AnyUiDisplayDataHtml(displayContext);
                    bi.helper.context = displayContext;

                    if (selectedNode.Tag is AdministrationShell)
                    {
                        bi.stack17 = new AnyUiStackPanel();
                        bi.stack17.Orientation = AnyUiOrientation.Vertical;
                        bi.helper.DisplayOrEditAasEntityAas(
                                    bi.packages, bi.env.AasEnv, selectedNode.Tag as AdministrationShell, bi.editMode, bi.stack17, hintMode: bi.hintMode);
                        if (bi.stack17.Children.Count != 0)
                            view = true;
                    }
                    else
                    if (selectedNode.Tag is Tuple<AdminShellPackageEnv, AdminShell.Submodel, Plugins.PluginInstance,
                            AasxIntegrationBase.AasxPluginResultVisualExtension> callInfo
                        && selectedNode.Type == "Plugin")
                    {
                        var env = callInfo.Item1;
                        var sm = callInfo.Item2;
                        var plugin = callInfo.Item3;

                        if (env != null && sm != null && plugin != null)
                        {
                            try
                            {
                                bi.stack17 = new AnyUiStackPanel();
                                bi.stack17.Orientation = AnyUiOrientation.Vertical;

                                if (_onlyUpdatePluginUi)
                                {
                                    plugin.InvokeAction("update-anyui-visual-extension", bi.stack17);
                                    // _onlyUpdatePluginUi = false;
                                }
                                else
                                {
                                    plugin.InvokeAction("fill-anyui-visual-extension", env, sm, bi.stack17);
                                }

                                if (bi.stack17.Children.Count != 0)
                                    view = true;
                            }
                            catch (Exception ex)
                            {
                                Log.Singleton.Error(ex,
                                    $"render AnyUI based visual extension for plugin {plugin.name}");
                            }
                        }
                    }
                    else
                    if (selectedNode.Tag is Submodel)
                    {
                        bi.stack17 = new AnyUiStackPanel();
                        bi.stack17.Orientation = AnyUiOrientation.Vertical;
                        bi.helper.DisplayOrEditAasEntitySubmodelOrRef(
                                    bi.packages, bi.env.AasEnv, bi.env.AasEnv.AdministrationShells[0],
                                    null, selectedNode.Tag as Submodel, bi.editMode, bi.stack17, hintMode: bi.hintMode);
                        if (bi.stack17.Children.Count != 0)
                            view = true;
                    }
                    else
                    if (selectedNode.Tag is SubmodelElement sme)
                    {
                        bi.stack17 = new AnyUiStackPanel();
                        bi.stack17.Orientation = AnyUiOrientation.Vertical;
                        bi.helper.DisplayOrEditAasEntitySubmodelElement(
                                    bi.packages, bi.env.AasEnv, selectedNode.ParentContainer,
                                    selectedNode.Wrapper,
                                    sme, bi.editMode, bi.helper.repo, bi.stack17, hintMode: bi.hintMode);
                        if (bi.stack17.Children.Count != 0)
                            view = true;
                    }

                    if (view)
                    {
                        // special handling

                        //if (ch is AnyUiComboBox comb)
                        //{
                        //    if (prevCh is AnyUiButton)
                        //    {
                        //        newTab = true;
                        //        prevCh = null;
                        //        continue;
                        //    }
                        //}

                        <AnyUiRenderElem DisplayData="@displayData" 
                                            Session="@bi" 
                                            Element="@bi.stack17"
                                            FillMode="@AnyUiHtmlFillMode.FillWidth"/>

                    }
                }
                else
                {
                    <br />
                }
            }
        </div>
    </div>
</div>

@code {

    // resharper disable all

    // Gets a reference to the MainLayout component
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    ListOfItems Items = null;

    protected int _inhibitSelectNodeForPanel = 0;

    IList<Item> ExpandedNodes = new List<Item>();
    Item selectedNode;
    Item SelectedNode
    {
        get { return selectedNode; }
        set
        {
            // always remember
            selectedNode = value;

            // inhibited
            if (_inhibitSelectNodeForPanel > 0)
            {
                _inhibitSelectNodeForPanel--;
                return;
            }

            // no? execute!
            _onlyUpdatePluginUi = false;
            // OnSelectNode(selectedNode);
        }
    }

    //protectezd void SelectedNodeChanged(Item i)
    //{

    //}

    protected override void OnAfterRender(bool firstRender)
    {
        // OnInitialized() allways called twice
        //// if (hack++ == 0)
        ////    return;

        if (firstRender)
        {
            //
            // normal rendering
            //

            SubmodelService.buildTree(bi);
            Items = SubmodelService.GetTree(bi, selectedNode, ExpandedNodes);
            // StateHasChanged();

            //ExpandedNodes.Add(Items.Skip(1).First());
            //ExpandedNodes.Add(Items.Skip(1).Take(1).First().Childs.Skip(1).First());

            SubmodelService.NewDataAvailable += NewData;

            //
            // check query params
            //

            // investigate query parameters if to load special AAS or SMs ..
            var header = -1;
            var aasIndex = -1;
            string smId = null;
            string pluginTag = null;

            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            var qdict = QueryHelpers.ParseQuery(uri.Query);

            if (qdict != null)
            {
                if (qdict.TryGetValue("header", out var qhead))
                    if (int.TryParse(Convert.ToString(qhead), out var head)
                        && head >= 0 && head <= 1)
                        header = head;

                if (qdict.TryGetValue("aasndx", out var qndx))
                    if (int.TryParse(Convert.ToString(qndx), out var ndx))
                        aasIndex = ndx;

                if (qdict.TryGetValue("smid", out var qsmid))
                    smId = BlazorUtils.Base64Decode(Convert.ToString(qsmid));

                if (qdict.TryGetValue("plugin", out var qplugin))
                    pluginTag = Convert.ToString(qplugin);
            }

            //
            // load?
            //

            if (aasIndex >= 0)
            {
                // try to load files?
                Program.loadAasxFiles(bi, load: false);

                if (bi.repository?.FileMap?.Count > 0
                    && aasIndex >= 0 && aasIndex < bi.repository.FileMap?.Count)
                {
                    var repoFile = bi.repository.FileMap[aasIndex];
                    bi.container = PackageContainerFactory.GuessAndCreateFor(bi._packageCentral, repoFile.InfoLocation, repoFile.InfoLocation, overrideLoadResident: true);
                    bi.env = bi.container.Env;
                    bi.aasxFileSelected = "";
                    bi.editMode = false;
                    bi.thumbNail = null;
                    Program.signalNewData(3, bi.sessionNumber);
                }
                else
                if (bi.aasxFiles?.Length > 0
                    && aasIndex >= 0 && aasIndex < bi.aasxFiles.Length)
                {
                    InvokeAsync(() =>
                    {
                        Program.loadAasx(bi, bi.aasxFiles[aasIndex]);
                        Program.signalNewData(3, bi.sessionNumber);
                        // StateHasChanged();

                        // dísable features in MainLayout?
                        if (Layout != null && header >= 0 && header <= 1)
                            Layout.ShowHeader = header;

                        // only here, we can changed to SM / plugin
                        Item itsm = null;
                        if (smId != null && pluginTag != null)
                            itsm = Items?.FindSubmodelPlugin(smId, pluginTag);
                        else
                            itsm = Items?.FindSubmodel(smId);
                        if (itsm != null)
                        {
                            ListOfItems.AddToExpandNodesFor(ExpandedNodes, itsm);
                            SelectedNode = itsm;
                            StateHasChanged();
                        }
                    });
                }
            }
        }
    }

    int newDataMode = 0;

    protected bool _onlyUpdatePluginUi = false;

    void NewData(object source, EventArgs args)
    {
        // update = true;
        if (args is Program.NewDataAvailableArgs ndm)
        {
            if (ndm.signalSessionNumber == bi.sessionNumber)
            {
                // state change for inner logic
                if (newDataMode == 0)
                    // newDataMode = Program.getSignalNewDataMode();
                    newDataMode = ndm.signalNewDataMode;

                // some events may affect
                if (ndm.signalNewLambdaAction is AnyUiLambdaActionPluginUpdateAnyUi)
                    // force the sticky update mode to true
                    _onlyUpdatePluginUi = true;

                if (ndm.onlyUpdateAasxPanel)
                    _onlyUpdatePluginUi = true;

                if (ndm.signalNewLambdaAction is AnyUiLambdaActionRedrawAllElementsBase)
                    // force the sticky update mode to false, because of total redraw
                    _onlyUpdatePluginUi = false;

                if (ndm.signalNewLambdaAction is AnyUiLambdaActionRedrawEntity)
                    // force the sticky update mode to false, because of redraw of entity
                    _onlyUpdatePluginUi = false;

                // re-create items
                Items = SubmodelService.GetTree(bi, selectedNode, ExpandedNodes);

                // trigger redraw (but inhibit for plugin-redraw)
                _inhibitSelectNodeForPanel += 1;
                InvokeAsync(() => this.StateHasChanged());
                // this.StateHasChanged();
            }
        }
    }

    bool update = true;

    string updateVisibleTree(List<Item> viewItems, Item selectedNode)
    {
        if (update && session != null && !session.htmlEventIn && !session.htmlEventOut)
        {
            switch (newDataMode)
            {
                // 0 == same tree, only values changed
                case 0:
                    break;
                // 1 == same tree, structure may change
                // 2 == build new tree, keep open nodes
                case 1:
                case 2:
                    bool isSelected = selectedNode != null;
                    bool isExpanded = ExpandedNodes.Count != 0;
                    List<string>[] expandedNodesPath = new List<string>[ExpandedNodes.Count+1];
                    List<string> selectedNodePath = getPath(selectedNode);
                    if (isExpanded)
                    {
                        for (int j = 0; j < ExpandedNodes.Count; j++)
                        {
                            expandedNodesPath[j] = getPath(ExpandedNodes[j]);
                        }
                    }
                    SubmodelService.buildTree(bi);
                    Items = SubmodelService.GetTree(bi, selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    if (isSelected)
                    {
                        selectedNode = findPath(selectedNodePath);
                    }
                    if (isExpanded)
                    {
                        foreach (var path in expandedNodesPath)
                        {
                            Item p = findPath(path);
                            if (p != null)
                                ExpandedNodes.Add(p);                 }
                    }
                    newDataMode = 0;
                    break;
                // 3 == build new tree, all nodes closed
                case 3:
                    SubmodelService.buildTree(bi);
                    Items = SubmodelService.GetTree(bi, selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    newDataMode = 0;
                    break;
            }

            // remember new (same?) selected node, but do not redraw pluging
            _inhibitSelectNodeForPanel += 1;
            SelectedNode = selectedNode;
            // update = false;
            // updateNode(viewItems[0]);
        }
        return "";
    }

    List<string> getPath(Item i)
    {
        if (i == null)
            return null;

        List<string> upPath = new List<string>();
        upPath.Add(i.Text);
        while (i.parent != null)
        {
            i = (Item)i.parent;
            upPath.Add(i.Text);
        }
        List<string> downPath = new List<string>();
        int j = upPath.Count - 1;
        while (j >= 0)
        {
            downPath.Add(upPath[j--]);
        }
        return downPath;
    }

    Item findPath(List<string> path)
    {
        if (path != null && path.Count > 0)
        {
            Item i = Items[0];
            if (i.Text != path[0])
                return null;
            int j = 0;
            Item found = i;
            while (++j < path.Count)
            {
                if (i.Childs != null)
                {
                    found = null;
                    foreach (var c in i.Childs)
                    {
                        if (c.Text == path[j])
                        {
                            found = c;
                            break;
                        }
                    }
                }
                if (found == null)
                {
                    return null;
                }
                i = found;
            }
            return found;
        }
        return null;
    }

    void updateNode(Item i)
    {
        var clist = i.Childs as List<Item>;
        List<string> listIdshort = new List<string>();
        bool done = false;
        if (!done && i.Tag is Submodel sm)
        {
            foreach (var smew1 in sm.submodelElements)
            {
                listIdshort.Add(smew1.submodelElement.idShort);
            }
            done = true;
        }
        if (!done && i.Tag is SubmodelElementCollection smec)
        {
            foreach (var smew2 in smec.value)
            {
                listIdshort.Add(smew2.submodelElement.idShort);
            }
            done = true;
        }
        if (!done && i.Tag is SubmodelElement sme)
        {
            listIdshort.Add(sme.idShort);
            done = true;
        }
        // check if child name exists in data children idshorts, if not delete
        if (done)
        {
            List<Item> toDelete = new List<Item>();
            if (clist != null)
            {
                foreach (var c in clist)
                {
                    if (!listIdshort.Contains(c.Text))
                    {
                        toDelete.Add(c);
                    }
                }
            }
            else
            {
                if (!listIdshort.Contains(i.Text))
                {
                    toDelete.Add(i);
                }
            }
            foreach (var c in toDelete)
            {
                var parent = c.parent as Item;
                if (parent != null)
                {
                    (parent.Childs as List<Item>).Remove(c);
                }
            }
        }
        // check if data children idshorts exist in child names, if not insert
        if (clist != null)
        {
            foreach (var c in clist)
            {
                updateNode(c);
            }
        }
    }

    string getSymbols(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";
        object o = item.Tag;

        if (o is AdministrationShell)
        {
        }

        return ret;
    }

    string ViewNodeType(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";

        if (item.Type != null)
        {
            ret = item.Type + " ";
        }

        object o = item.Tag;

        /*
        if (o is Referable)
        {
        ret = (o as Referable).GetElementName();
        return (ret);
        }
        */

        if (o is AdministrationShell)
        {
            ret += "AAS";
        }
        if (o is Submodel)
        {
            ret += "Sub";
        }
        if (o is SubmodelElement)
        {
            if (o is SubmodelElementCollection)
            {
                ret += "Coll";
            }
            if (o is Property)
            {
                ret += "Prop";
            }
        }
        if (o is Operation)
        {
            ret += "Opr";
        }
        if (o is AdminShellV20.File)
        {
            ret += "File";
        }
        if (o is Blob)
        {
            ret += "Blob";
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            ret += "Range";
        }
        if (o is MultiLanguageProperty)
        {
            ret += "MLP";
        }
        if (o is RelationshipElement)
        {
            ret += "Rel";
        }
        if (o is AnnotatedRelationshipElement)
        {
            ret += "ARel";
        }
        if (o is ReferenceElement)
        {
            ret += "Ref";
        }
        if (o is Entity)
        {
            ret += "Ent";
        }
        if (o is AdminShellNS.AdminShellV20.BasicEvent)
        {
            ret += "Evt";
        }

        return (ret);
    }

    string ViewNodeID(Item item)
    {
        if (item == null)
        {
            return "";
        }

        if (item.Type == "Plugin"
            && item.Tag is Tuple<AdminShellPackageEnv, AdminShell.Submodel, Plugins.PluginInstance,
                AasxIntegrationBase.AasxPluginResultVisualExtension> tag)
        {
            return $" [{tag.Item4?.Tag}] {tag.Item4?.Caption}";
        }

        string ret = "NULL";

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            ret = aas.idShort;
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            ret = "";
            if (sm.kind != null && sm.kind.IsTemplate)
                ret += "<T> ";
            ret += sm.idShort;
        }
        if (o is SubmodelElement)
        {
            var sme = o as SubmodelElement;
            ret = "";
            if (sme.kind != null && sme.kind.IsTemplate)
                ret += "<T> ";
            ret += sme.idShort;
        }
        if (o is AdminShellV20.File)
        {
            var f = o as AdminShellV20.File;
            ret = "";
            if (f.kind != null && f.kind.IsTemplate)
                ret += "<T> ";
            ret += f.idShort;
        }
        if (o is Blob)
        {
            var b = o as Blob;
            ret = "";
            if (b.kind != null && b.kind.IsTemplate)
                ret += "<T> ";
            ret += b.idShort;
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = "";
            if (r.kind != null && r.kind.IsTemplate)
                ret += "<T> ";
            ret += r.idShort;
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            ret = "";
            if (mlp.kind != null && mlp.kind.IsTemplate)
                ret += "<T> ";
            ret += mlp.idShort;
        }
        return (ret);
    }

    string ViewNodeInfo(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            // ret = aas.identification.ToString();
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            // ret = sm.identification.ToString();
            if (sm.qualifiers != null && sm.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is SubmodelElementCollection)
        {
            var sme = o as SubmodelElementCollection;
            // ret = sm.identification.ToString();
            if (sme.value.Count > 0)
            {
                ret += " #" + sme.value.Count;
            }
        }
        if (o is SubmodelElement)
        {
            if (o is Property)
            {
                var prop = o as Property;
                if (prop.value != "")
                {
                    ret = " = " + prop.value;
                }
                if (prop.qualifiers != null && prop.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
            if (o is AdminShellV20.File)
            {
                var f = o as AdminShellV20.File;
                ret = " = " + f.value;
                if (f.qualifiers != null && f.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = " = " + r.min + " .. " + r.max;
            if (r.qualifiers != null && r.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            var ls = mlp.value;
            ret = " = ";
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls.langString[i].lang + " ";
            }
            if (mlp.qualifiers != null && mlp.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        return (ret);
    }

    private Timer _timer;

    protected override void OnInitialized()
    {
        _timer = new System.Threading.Timer((e) =>
        {
            MainTimer_HandleApplicationEvents();
        }, null, TimeSpan.FromMilliseconds(2000), TimeSpan.FromMilliseconds(1000));
    }

    public void Dispose()
    {
        _timer?.Dispose();
        SubmodelService.NewDataAvailable -= NewData;
    }

    private bool _inTimer = false;

    private void MainTimer_HandleApplicationEvents()
    {
        if (_inTimer)
            return;
        _inTimer = true;
        // check if a plug-in has some work to do ..
        foreach (var lpi in Plugins.LoadedPlugins.Values)
        {
            var evt = lpi.InvokeAction("get-events") as AasxIntegrationBase.AasxPluginResultEventBase;
            if (evt !=null)
                HandleApplicationEvent(evt, lpi);
        }
        _inTimer = false;
    }

    private void HandleApplicationEvent(
            AasxIntegrationBase.AasxPluginResultEventBase evt,
            Plugins.PluginInstance pluginInstance)
    {
        try
        {
            var context = bi.helper.context as AnyUiDisplayContextHtml;

            // Navigate To
            //============

            if (evt is AasxIntegrationBase.AasxPluginResultEventNavigateToReference evtNavTo
                && evtNavTo.targetReference != null && evtNavTo.targetReference.Count > 0)
            {
            }

            // Display Content Url
            //====================

            if (evt is AasxIntegrationBase.AasxPluginResultEventDisplayContentFile evtDispCont
                && evtDispCont.fn != null)
            {
                InvokeAsync(async () => {
                    await BlazorUtils.DisplayOrDownloadFile(JSRuntime, evtDispCont.fn, evtDispCont.mimeType);
                    this.StateHasChanged();
                });
            }

            // Redraw All
            //===========

            if (evt is AasxIntegrationBase.AasxPluginResultEventRedrawAllElements)
            {
                ;
                Program.signalNewData(2, bi.sessionNumber,
                    new AnyUiLambdaActionRedrawAllElements(nextFocus: null, isExpanded: true));
            }

            // Select AAS entity
            //=======================

            var evSelectEntity = evt as AasxIntegrationBase.AasxPluginResultEventSelectAasEntity;
            if (evSelectEntity != null)
            {
                ;
                var found = AnyUiDisplayContextHtml.findSession(bi.sessionNumber);
                if (found != null)
                {
                    // select function
                    found.htmlEventInputs.Clear();
                    found.htmlEventType = "ModalSelectEntity";
                    found.htmlEventIn = true;
                    found.htmlEventInputs.Add(null); // required to pass check on receiver

                    // perform
                    Program.signalNewData(0, found.sessionNumber,
                        onlyUpdateAasxPanel: true); // build new tree

                    while (!found.htmlEventOut) Task.Delay(1) ;

                    // result
                    if (found.htmlEventOutputs.Count == 1
                        && found.htmlEventOutputs[0] is AdminShell.Referable rf)
                    {
                        var kl = new AdminShell.KeyList();
                        rf?.CollectReferencesByParent(kl);
                        pluginInstance?.InvokeAction("event-return",
                           new AasxIntegrationBase.AasxPluginEventReturnSelectAasEntity()
                           {
                               resultKeys = kl
                           });
                    }

                    // clean
                    found.htmlEventType = "";
                    found.htmlEventOutputs.Clear();
                    found.htmlEventOut = false;
                    found.htmlEventInputs.Clear();
                    found.htmlDotnetEventIn = false;
                }
            }

            // Select File
            //============

            if (evt is AasxIntegrationBase.AasxPluginResultEventSelectFile fileSel)
            {
                var found = AnyUiDisplayContextHtml.findSession(bi.sessionNumber);
                if (found != null)
                {
                    // select function
                    found.htmlEventInputs.Clear();
                    found.htmlEventType = "ModalSelectFile";
                    found.htmlEventIn = true;
                    found.htmlEventInputs.Add(null); // required to pass check on receiver

                    // perform
                    Program.signalNewData(0, found.sessionNumber,
                        onlyUpdateAasxPanel: true); // build new tree

                    while (!found.htmlEventOut) Task.Delay(1) ;

                    // result
                    if (found.htmlEventOutputs.Count == 1
                        && found.htmlEventOutputs[0] is string fn)
                    {
                        pluginInstance?.InvokeAction("event-return",
                            new AasxIntegrationBase.AasxPluginEventReturnSelectFile()
                            {
                                FileNames = new [] { fn }
                            });
                    }

                    // clean
                    found.htmlEventType = "";
                    found.htmlEventOutputs.Clear();
                    found.htmlEventOut = false;
                    found.htmlEventInputs.Clear();
                    found.htmlDotnetEventIn = false;
                }
            }

            // Message Box
            //============

            if (evt is AasxIntegrationBase.AasxPluginResultEventMessageBox evMsgBox
                && context != null)
            {
                var res = context.MessageBoxFlyoutShow(
                    evMsgBox.Message, evMsgBox.Caption, evMsgBox.Buttons, evMsgBox.Image);

                // fire back
                pluginInstance?.InvokeAction("event-return",
                    new AasxIntegrationBase.AasxPluginEventReturnMessageBox() { Result = res });
            }

            // Re-render Any UI Panels
            //========================

            if (evt is AasxIntegrationBase.AasxPluginEventReturnUpdateAnyUi update)
            {
                if (context != null)
                {
                    if (update.Mode == AnyUiPluginUpdateMode.StatusToUi)
                    {
                        // only update some parameters
                        context.UpdateRenderElements(bi.stack17, update.Mode);
                    }
                    else
                    if (update.Mode == AnyUiPluginUpdateMode.All)
                    {
                        // next redraw will only update from plugin
                        _onlyUpdatePluginUi = true;

                        //// re-create items
                        //Items = SubmodelService.GetTree(bi, selectedNode, ExpandedNodes);

                        // trigger redraw
                        InvokeAsync(() => this.StateHasChanged());
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Log.Singleton.Error(
                ex, $"While responding to a event; may be from plug-in {"" + pluginInstance?.name}");
        }
    }
}
