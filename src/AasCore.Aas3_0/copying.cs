/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed
using System.Collections.Generic;  // can't alias

namespace AasCore.Aas3_0
{
    /// <summary>
    /// Allow for making shallow and deep copies of AAS model instances.
    /// </summary>
    public static class Copying
    {
        private static readonly ShallowCopier ShallowCopierInstance = (
            new ShallowCopier());

        private static readonly DeepCopier DeepCopierInstance = (
            new DeepCopier());

        /// <summary>
        /// Make a shallow copy of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// All the properties are copied by reference. This includes also the lists.
        /// Hence, a list property is copied by reference, and not, as sometimes might be
        /// expected, as a new list of underlying references.
        /// </remarks>.
        /// <param name="that">to be copied in a shallow manner</param>
        /// <typeparam name="T">type to cast the result to</typeparam>
        public static T Shallow<T>(T that) where T : Aas.IClass
        {
            return (T)ShallowCopierInstance.Transform(that);
        }

        /// <summary>
        /// Make a recursively a deep copy of <paramref name="that" />.
        /// </summary>
        /// <param name="that">to be deeply copied in a recursive manner</param>
        /// <typeparam name="T">type to cast the result to</typeparam>
        public static T Deep<T>(T that) where T : Aas.IClass
        {
            return (T)DeepCopierInstance.Transform(that);
        }

        /// <summary>Dispatch the making of shallow copies.</summary>
        internal class ShallowCopier : Visitation.AbstractTransformer<Aas.IClass>
        {
            public override Aas.IClass TransformExtension(
                Aas.IExtension that
            )
            {
                return new Aas.Extension(
                    that.Name,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.ValueType,
                    that.Value,
                    that.RefersTo);
            }

            public override Aas.IClass TransformAdministrativeInformation(
                Aas.IAdministrativeInformation that
            )
            {
                return new Aas.AdministrativeInformation(
                    that.EmbeddedDataSpecifications,
                    that.Version,
                    that.Revision,
                    that.Creator,
                    that.TemplateId);
            }

            public override Aas.IClass TransformQualifier(
                Aas.IQualifier that
            )
            {
                return new Aas.Qualifier(
                    that.Type,
                    that.ValueType,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Kind,
                    that.Value,
                    that.ValueId);
            }

            public override Aas.IClass TransformAssetAdministrationShell(
                Aas.IAssetAdministrationShell that
            )
            {
                return new Aas.AssetAdministrationShell(
                    that.Id,
                    that.AssetInformation,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.Administration,
                    that.EmbeddedDataSpecifications,
                    that.DerivedFrom,
                    that.Submodels);
            }

            public override Aas.IClass TransformAssetInformation(
                Aas.IAssetInformation that
            )
            {
                return new Aas.AssetInformation(
                    that.AssetKind,
                    that.GlobalAssetId,
                    that.SpecificAssetIds,
                    that.AssetType,
                    that.DefaultThumbnail);
            }

            public override Aas.IClass TransformResource(
                Aas.IResource that
            )
            {
                return new Aas.Resource(that.Path, that.ContentType);
            }

            public override Aas.IClass TransformSpecificAssetId(
                Aas.ISpecificAssetId that
            )
            {
                return new Aas.SpecificAssetId(
                    that.Name,
                    that.Value,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.ExternalSubjectId);
            }

            public override Aas.IClass TransformSubmodel(
                Aas.ISubmodel that
            )
            {
                return new Aas.Submodel(
                    that.Id,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.Administration,
                    that.Kind,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.SubmodelElements);
            }

            public override Aas.IClass TransformRelationshipElement(
                Aas.IRelationshipElement that
            )
            {
                return new Aas.RelationshipElement(
                    that.First,
                    that.Second,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications);
            }

            public override Aas.IClass TransformSubmodelElementList(
                Aas.ISubmodelElementList that
            )
            {
                return new Aas.SubmodelElementList(
                    that.TypeValueListElement,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.OrderRelevant,
                    that.SemanticIdListElement,
                    that.ValueTypeListElement,
                    that.Value);
            }

            public override Aas.IClass TransformSubmodelElementCollection(
                Aas.ISubmodelElementCollection that
            )
            {
                return new Aas.SubmodelElementCollection(
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Value);
            }

            public override Aas.IClass TransformProperty(
                Aas.IProperty that
            )
            {
                return new Aas.Property(
                    that.ValueType,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Value,
                    that.ValueId);
            }

            public override Aas.IClass TransformMultiLanguageProperty(
                Aas.IMultiLanguageProperty that
            )
            {
                return new Aas.MultiLanguageProperty(
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Value,
                    that.ValueId);
            }

            public override Aas.IClass TransformRange(
                Aas.IRange that
            )
            {
                return new Aas.Range(
                    that.ValueType,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Min,
                    that.Max);
            }

            public override Aas.IClass TransformReferenceElement(
                Aas.IReferenceElement that
            )
            {
                return new Aas.ReferenceElement(
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Value);
            }

            public override Aas.IClass TransformBlob(
                Aas.IBlob that
            )
            {
                return new Aas.Blob(
                    that.ContentType,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Value);
            }

            public override Aas.IClass TransformFile(
                Aas.IFile that
            )
            {
                return new Aas.File(
                    that.ContentType,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Value);
            }

            public override Aas.IClass TransformAnnotatedRelationshipElement(
                Aas.IAnnotatedRelationshipElement that
            )
            {
                return new Aas.AnnotatedRelationshipElement(
                    that.First,
                    that.Second,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Annotations);
            }

            public override Aas.IClass TransformEntity(
                Aas.IEntity that
            )
            {
                return new Aas.Entity(
                    that.EntityType,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.Statements,
                    that.GlobalAssetId,
                    that.SpecificAssetIds);
            }

            public override Aas.IClass TransformEventPayload(
                Aas.IEventPayload that
            )
            {
                return new Aas.EventPayload(
                    that.Source,
                    that.ObservableReference,
                    that.TimeStamp,
                    that.SourceSemanticId,
                    that.ObservableSemanticId,
                    that.Topic,
                    that.SubjectId,
                    that.Payload);
            }

            public override Aas.IClass TransformBasicEventElement(
                Aas.IBasicEventElement that
            )
            {
                return new Aas.BasicEventElement(
                    that.Observed,
                    that.Direction,
                    that.State,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.MessageTopic,
                    that.MessageBroker,
                    that.LastUpdate,
                    that.MinInterval,
                    that.MaxInterval);
            }

            public override Aas.IClass TransformOperation(
                Aas.IOperation that
            )
            {
                return new Aas.Operation(
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications,
                    that.InputVariables,
                    that.OutputVariables,
                    that.InoutputVariables);
            }

            public override Aas.IClass TransformOperationVariable(
                Aas.IOperationVariable that
            )
            {
                return new Aas.OperationVariable(that.Value);
            }

            public override Aas.IClass TransformCapability(
                Aas.ICapability that
            )
            {
                return new Aas.Capability(
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.SemanticId,
                    that.SupplementalSemanticIds,
                    that.Qualifiers,
                    that.EmbeddedDataSpecifications);
            }

            public override Aas.IClass TransformConceptDescription(
                Aas.IConceptDescription that
            )
            {
                return new Aas.ConceptDescription(
                    that.Id,
                    that.Extensions,
                    that.Category,
                    that.IdShort,
                    that.DisplayName,
                    that.Description,
                    that.Administration,
                    that.EmbeddedDataSpecifications,
                    that.IsCaseOf);
            }

            public override Aas.IClass TransformReference(
                Aas.IReference that
            )
            {
                return new Aas.Reference(
                    that.Type,
                    that.Keys,
                    that.ReferredSemanticId);
            }

            public override Aas.IClass TransformKey(
                Aas.IKey that
            )
            {
                return new Aas.Key(that.Type, that.Value);
            }

            public override Aas.IClass TransformLangStringNameType(
                Aas.ILangStringNameType that
            )
            {
                return new Aas.LangStringNameType(that.Language, that.Text);
            }

            public override Aas.IClass TransformLangStringTextType(
                Aas.ILangStringTextType that
            )
            {
                return new Aas.LangStringTextType(that.Language, that.Text);
            }

            public override Aas.IClass TransformEnvironment(
                Aas.IEnvironment that
            )
            {
                return new Aas.Environment(
                    that.AssetAdministrationShells,
                    that.Submodels,
                    that.ConceptDescriptions);
            }

            public override Aas.IClass TransformEmbeddedDataSpecification(
                Aas.IEmbeddedDataSpecification that
            )
            {
                return new Aas.EmbeddedDataSpecification(
                    that.DataSpecification,
                    that.DataSpecificationContent);
            }

            public override Aas.IClass TransformLevelType(
                Aas.ILevelType that
            )
            {
                return new Aas.LevelType(that.Min, that.Nom, that.Typ, that.Max);
            }

            public override Aas.IClass TransformValueReferencePair(
                Aas.IValueReferencePair that
            )
            {
                return new Aas.ValueReferencePair(that.Value, that.ValueId);
            }

            public override Aas.IClass TransformValueList(
                Aas.IValueList that
            )
            {
                return new Aas.ValueList(that.ValueReferencePairs);
            }

            public override Aas.IClass TransformLangStringPreferredNameTypeIec61360(
                Aas.ILangStringPreferredNameTypeIec61360 that
            )
            {
                return new Aas.LangStringPreferredNameTypeIec61360(
                    that.Language,
                    that.Text);
            }

            public override Aas.IClass TransformLangStringShortNameTypeIec61360(
                Aas.ILangStringShortNameTypeIec61360 that
            )
            {
                return new Aas.LangStringShortNameTypeIec61360(
                    that.Language,
                    that.Text);
            }

            public override Aas.IClass TransformLangStringDefinitionTypeIec61360(
                Aas.ILangStringDefinitionTypeIec61360 that
            )
            {
                return new Aas.LangStringDefinitionTypeIec61360(
                    that.Language,
                    that.Text);
            }

            public override Aas.IClass TransformDataSpecificationIec61360(
                Aas.IDataSpecificationIec61360 that
            )
            {
                return new Aas.DataSpecificationIec61360(
                    that.PreferredName,
                    that.ShortName,
                    that.Unit,
                    that.UnitId,
                    that.SourceOfDefinition,
                    that.Symbol,
                    that.DataType,
                    that.Definition,
                    that.ValueFormat,
                    that.ValueList,
                    that.Value,
                    that.LevelType);
            }
        }  // internal class ShallowCopier

        /// <summary>Dispatch the making of deep copies.</summary>
        internal class DeepCopier : Visitation.AbstractTransformer<Aas.IClass>
        {
            public override Aas.IClass TransformExtension(
               Aas.IExtension that
           )
            {
                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IReference>? theRefersTo = null;
                if (that.RefersTo != null)
                {
                    theRefersTo = new List<IReference>(
                        that.RefersTo.Count);
                    foreach (var item in that.RefersTo)
                    {
                        theRefersTo.Add(Deep(item));
                    }
                }

                return new Aas.Extension(
                    that.Name,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    that.ValueType,
                    that.Value,
                    theRefersTo
                );
            }

            public override Aas.IClass TransformAdministrativeInformation(
                Aas.IAdministrativeInformation that
            )
            {
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.AdministrativeInformation(
                    theEmbeddedDataSpecifications,
                    that.Version,
                    that.Revision,
                    (that.Creator != null)
                        ? Deep(that.Creator)
                        : null,
                    that.TemplateId
                );
            }

            public override Aas.IClass TransformQualifier(
                Aas.IQualifier that
            )
            {
                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                return new Aas.Qualifier(
                    that.Type,
                    that.ValueType,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    that.Kind,
                    that.Value,
                    (that.ValueId != null)
                        ? Deep(that.ValueId)
                        : null
                );
            }

            public override Aas.IClass TransformAssetAdministrationShell(
                Aas.IAssetAdministrationShell that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<IReference>? theSubmodels = null;
                if (that.Submodels != null)
                {
                    theSubmodels = new List<IReference>(
                        that.Submodels.Count);
                    foreach (var item in that.Submodels)
                    {
                        theSubmodels.Add(Deep(item));
                    }
                }

                return new Aas.AssetAdministrationShell(
                    that.Id,
                    Deep(that.AssetInformation),
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.Administration != null)
                        ? Deep(that.Administration)
                        : null,
                    theEmbeddedDataSpecifications,
                    (that.DerivedFrom != null)
                        ? Deep(that.DerivedFrom)
                        : null,
                    theSubmodels
                );
            }

            public override Aas.IClass TransformAssetInformation(
                Aas.IAssetInformation that
            )
            {
                List<ISpecificAssetId>? theSpecificAssetIds = null;
                if (that.SpecificAssetIds != null)
                {
                    theSpecificAssetIds = new List<ISpecificAssetId>(
                        that.SpecificAssetIds.Count);
                    foreach (var item in that.SpecificAssetIds)
                    {
                        theSpecificAssetIds.Add(Deep(item));
                    }
                }

                return new Aas.AssetInformation(
                    that.AssetKind,
                    that.GlobalAssetId,
                    theSpecificAssetIds,
                    that.AssetType,
                    (that.DefaultThumbnail != null)
                        ? Deep(that.DefaultThumbnail)
                        : null
                );
            }

            public override Aas.IClass TransformResource(
                Aas.IResource that
            )
            {
                return new Aas.Resource(
                    that.Path,
                    that.ContentType
                );
            }

            public override Aas.IClass TransformSpecificAssetId(
                Aas.ISpecificAssetId that
            )
            {
                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                return new Aas.SpecificAssetId(
                    that.Name,
                    that.Value,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    (that.ExternalSubjectId != null)
                        ? Deep(that.ExternalSubjectId)
                        : null
                );
            }

            public override Aas.IClass TransformSubmodel(
                Aas.ISubmodel that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<ISubmodelElement>? theSubmodelElements = null;
                if (that.SubmodelElements != null)
                {
                    theSubmodelElements = new List<ISubmodelElement>(
                        that.SubmodelElements.Count);
                    foreach (var item in that.SubmodelElements)
                    {
                        theSubmodelElements.Add(Deep(item));
                    }
                }

                return new Aas.Submodel(
                    that.Id,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.Administration != null)
                        ? Deep(that.Administration)
                        : null,
                    that.Kind,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theSubmodelElements
                );
            }

            public override Aas.IClass TransformRelationshipElement(
                Aas.IRelationshipElement that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.RelationshipElement(
                    Deep(that.First),
                    Deep(that.Second),
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications
                );
            }

            public override Aas.IClass TransformSubmodelElementList(
                Aas.ISubmodelElementList that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<ISubmodelElement>? theValue = null;
                if (that.Value != null)
                {
                    theValue = new List<ISubmodelElement>(
                        that.Value.Count);
                    foreach (var item in that.Value)
                    {
                        theValue.Add(Deep(item));
                    }
                }

                return new Aas.SubmodelElementList(
                    that.TypeValueListElement,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    that.OrderRelevant,
                    (that.SemanticIdListElement != null)
                        ? Deep(that.SemanticIdListElement)
                        : null,
                    that.ValueTypeListElement,
                    theValue
                );
            }

            public override Aas.IClass TransformSubmodelElementCollection(
                Aas.ISubmodelElementCollection that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<ISubmodelElement>? theValue = null;
                if (that.Value != null)
                {
                    theValue = new List<ISubmodelElement>(
                        that.Value.Count);
                    foreach (var item in that.Value)
                    {
                        theValue.Add(Deep(item));
                    }
                }

                return new Aas.SubmodelElementCollection(
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue
                );
            }

            public override Aas.IClass TransformProperty(
                Aas.IProperty that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.Property(
                    that.ValueType,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    that.Value,
                    (that.ValueId != null)
                        ? Deep(that.ValueId)
                        : null
                );
            }

            public override Aas.IClass TransformMultiLanguageProperty(
                Aas.IMultiLanguageProperty that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theValue = null;
                if (that.Value != null)
                {
                    theValue = new List<ILangStringTextType>(
                        that.Value.Count);
                    foreach (var item in that.Value)
                    {
                        theValue.Add(Deep(item));
                    }
                }

                return new Aas.MultiLanguageProperty(
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue,
                    (that.ValueId != null)
                        ? Deep(that.ValueId)
                        : null
                );
            }

            public override Aas.IClass TransformRange(
                Aas.IRange that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.Range(
                    that.ValueType,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    that.Min,
                    that.Max
                );
            }

            public override Aas.IClass TransformReferenceElement(
                Aas.IReferenceElement that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.ReferenceElement(
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    (that.Value != null)
                        ? Deep(that.Value)
                        : null
                );
            }

            public override Aas.IClass TransformBlob(
                Aas.IBlob that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.Blob(
                    that.ContentType,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    that.Value
                );
            }

            public override Aas.IClass TransformFile(
                Aas.IFile that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.File(
                    that.ContentType,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    that.Value
                );
            }

            public override Aas.IClass TransformAnnotatedRelationshipElement(
                Aas.IAnnotatedRelationshipElement that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<IDataElement>? theAnnotations = null;
                if (that.Annotations != null)
                {
                    theAnnotations = new List<IDataElement>(
                        that.Annotations.Count);
                    foreach (var item in that.Annotations)
                    {
                        theAnnotations.Add(Deep(item));
                    }
                }

                return new Aas.AnnotatedRelationshipElement(
                    Deep(that.First),
                    Deep(that.Second),
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theAnnotations
                );
            }

            public override Aas.IClass TransformEntity(
                Aas.IEntity that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<ISubmodelElement>? theStatements = null;
                if (that.Statements != null)
                {
                    theStatements = new List<ISubmodelElement>(
                        that.Statements.Count);
                    foreach (var item in that.Statements)
                    {
                        theStatements.Add(Deep(item));
                    }
                }

                List<ISpecificAssetId>? theSpecificAssetIds = null;
                if (that.SpecificAssetIds != null)
                {
                    theSpecificAssetIds = new List<ISpecificAssetId>(
                        that.SpecificAssetIds.Count);
                    foreach (var item in that.SpecificAssetIds)
                    {
                        theSpecificAssetIds.Add(Deep(item));
                    }
                }

                return new Aas.Entity(
                    that.EntityType,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theStatements,
                    that.GlobalAssetId,
                    theSpecificAssetIds
                );
            }

            public override Aas.IClass TransformEventPayload(
                Aas.IEventPayload that
            )
            {
                return new Aas.EventPayload(
                    Deep(that.Source),
                    Deep(that.ObservableReference),
                    that.TimeStamp,
                    (that.SourceSemanticId != null)
                        ? Deep(that.SourceSemanticId)
                        : null,
                    (that.ObservableSemanticId != null)
                        ? Deep(that.ObservableSemanticId)
                        : null,
                    that.Topic,
                    (that.SubjectId != null)
                        ? Deep(that.SubjectId)
                        : null,
                    that.Payload
                );
            }

            public override Aas.IClass TransformBasicEventElement(
                Aas.IBasicEventElement that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.BasicEventElement(
                    Deep(that.Observed),
                    that.Direction,
                    that.State,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    that.MessageTopic,
                    (that.MessageBroker != null)
                        ? Deep(that.MessageBroker)
                        : null,
                    that.LastUpdate,
                    that.MinInterval,
                    that.MaxInterval
                );
            }

            public override Aas.IClass TransformOperation(
                Aas.IOperation that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<IOperationVariable>? theInputVariables = null;
                if (that.InputVariables != null)
                {
                    theInputVariables = new List<IOperationVariable>(
                        that.InputVariables.Count);
                    foreach (var item in that.InputVariables)
                    {
                        theInputVariables.Add(Deep(item));
                    }
                }

                List<IOperationVariable>? theOutputVariables = null;
                if (that.OutputVariables != null)
                {
                    theOutputVariables = new List<IOperationVariable>(
                        that.OutputVariables.Count);
                    foreach (var item in that.OutputVariables)
                    {
                        theOutputVariables.Add(Deep(item));
                    }
                }

                List<IOperationVariable>? theInoutputVariables = null;
                if (that.InoutputVariables != null)
                {
                    theInoutputVariables = new List<IOperationVariable>(
                        that.InoutputVariables.Count);
                    foreach (var item in that.InoutputVariables)
                    {
                        theInoutputVariables.Add(Deep(item));
                    }
                }

                return new Aas.Operation(
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theInputVariables,
                    theOutputVariables,
                    theInoutputVariables
                );
            }

            public override Aas.IClass TransformOperationVariable(
                Aas.IOperationVariable that
            )
            {
                return new Aas.OperationVariable(
                    Deep(that.Value)
                );
            }

            public override Aas.IClass TransformCapability(
                Aas.ICapability that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IReference>? theSupplementalSemanticIds = null;
                if (that.SupplementalSemanticIds != null)
                {
                    theSupplementalSemanticIds = new List<IReference>(
                        that.SupplementalSemanticIds.Count);
                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        theSupplementalSemanticIds.Add(Deep(item));
                    }
                }

                List<IQualifier>? theQualifiers = null;
                if (that.Qualifiers != null)
                {
                    theQualifiers = new List<IQualifier>(
                        that.Qualifiers.Count);
                    foreach (var item in that.Qualifiers)
                    {
                        theQualifiers.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                return new Aas.Capability(
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.SemanticId != null)
                        ? Deep(that.SemanticId)
                        : null,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications
                );
            }

            public override Aas.IClass TransformConceptDescription(
                Aas.IConceptDescription that
            )
            {
                List<IExtension>? theExtensions = null;
                if (that.Extensions != null)
                {
                    theExtensions = new List<IExtension>(
                        that.Extensions.Count);
                    foreach (var item in that.Extensions)
                    {
                        theExtensions.Add(Deep(item));
                    }
                }

                List<ILangStringNameType>? theDisplayName = null;
                if (that.DisplayName != null)
                {
                    theDisplayName = new List<ILangStringNameType>(
                        that.DisplayName.Count);
                    foreach (var item in that.DisplayName)
                    {
                        theDisplayName.Add(Deep(item));
                    }
                }

                List<ILangStringTextType>? theDescription = null;
                if (that.Description != null)
                {
                    theDescription = new List<ILangStringTextType>(
                        that.Description.Count);
                    foreach (var item in that.Description)
                    {
                        theDescription.Add(Deep(item));
                    }
                }

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                if (that.EmbeddedDataSpecifications != null)
                {
                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>(
                        that.EmbeddedDataSpecifications.Count);
                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        theEmbeddedDataSpecifications.Add(Deep(item));
                    }
                }

                List<IReference>? theIsCaseOf = null;
                if (that.IsCaseOf != null)
                {
                    theIsCaseOf = new List<IReference>(
                        that.IsCaseOf.Count);
                    foreach (var item in that.IsCaseOf)
                    {
                        theIsCaseOf.Add(Deep(item));
                    }
                }

                return new Aas.ConceptDescription(
                    that.Id,
                    theExtensions,
                    that.Category,
                    that.IdShort,
                    theDisplayName,
                    theDescription,
                    (that.Administration != null)
                        ? Deep(that.Administration)
                        : null,
                    theEmbeddedDataSpecifications,
                    theIsCaseOf
                );
            }

            public override Aas.IClass TransformReference(
                Aas.IReference that
            )
            {
                var theKeys = new List<IKey>(
                    that.Keys.Count);
                foreach (var item in that.Keys)
                {
                    theKeys.Add(Deep(item));
                }

                return new Aas.Reference(
                    that.Type,
                    theKeys,
                    (that.ReferredSemanticId != null)
                        ? Deep(that.ReferredSemanticId)
                        : null
                );
            }

            public override Aas.IClass TransformKey(
                Aas.IKey that
            )
            {
                return new Aas.Key(
                    that.Type,
                    that.Value
                );
            }

            public override Aas.IClass TransformLangStringNameType(
                Aas.ILangStringNameType that
            )
            {
                return new Aas.LangStringNameType(
                    that.Language,
                    that.Text
                );
            }

            public override Aas.IClass TransformLangStringTextType(
                Aas.ILangStringTextType that
            )
            {
                return new Aas.LangStringTextType(
                    that.Language,
                    that.Text
                );
            }

            public override Aas.IClass TransformEnvironment(
                Aas.IEnvironment that
            )
            {
                List<IAssetAdministrationShell>? theAssetAdministrationShells = null;
                if (that.AssetAdministrationShells != null)
                {
                    theAssetAdministrationShells = new List<IAssetAdministrationShell>(
                        that.AssetAdministrationShells.Count);
                    foreach (var item in that.AssetAdministrationShells)
                    {
                        theAssetAdministrationShells.Add(Deep(item));
                    }
                }

                List<ISubmodel>? theSubmodels = null;
                if (that.Submodels != null)
                {
                    theSubmodels = new List<ISubmodel>(
                        that.Submodels.Count);
                    foreach (var item in that.Submodels)
                    {
                        theSubmodels.Add(Deep(item));
                    }
                }

                List<IConceptDescription>? theConceptDescriptions = null;
                if (that.ConceptDescriptions != null)
                {
                    theConceptDescriptions = new List<IConceptDescription>(
                        that.ConceptDescriptions.Count);
                    foreach (var item in that.ConceptDescriptions)
                    {
                        theConceptDescriptions.Add(Deep(item));
                    }
                }

                return new Aas.Environment(
                    theAssetAdministrationShells,
                    theSubmodels,
                    theConceptDescriptions
                );
            }

            public override Aas.IClass TransformEmbeddedDataSpecification(
                Aas.IEmbeddedDataSpecification that
            )
            {
                return new Aas.EmbeddedDataSpecification(
                    Deep(that.DataSpecification),
                    Deep(that.DataSpecificationContent)
                );
            }

            public override Aas.IClass TransformLevelType(
                Aas.ILevelType that
            )
            {
                return new Aas.LevelType(
                    that.Min,
                    that.Nom,
                    that.Typ,
                    that.Max
                );
            }

            public override Aas.IClass TransformValueReferencePair(
                Aas.IValueReferencePair that
            )
            {
                return new Aas.ValueReferencePair(
                    that.Value,
                    Deep(that.ValueId)
                );
            }

            public override Aas.IClass TransformValueList(
                Aas.IValueList that
            )
            {
                var theValueReferencePairs = new List<IValueReferencePair>(
                    that.ValueReferencePairs.Count);
                foreach (var item in that.ValueReferencePairs)
                {
                    theValueReferencePairs.Add(Deep(item));
                }

                return new Aas.ValueList(
                    theValueReferencePairs
                );
            }

            public override Aas.IClass TransformLangStringPreferredNameTypeIec61360(
                Aas.ILangStringPreferredNameTypeIec61360 that
            )
            {
                return new Aas.LangStringPreferredNameTypeIec61360(
                    that.Language,
                    that.Text
                );
            }

            public override Aas.IClass TransformLangStringShortNameTypeIec61360(
                Aas.ILangStringShortNameTypeIec61360 that
            )
            {
                return new Aas.LangStringShortNameTypeIec61360(
                    that.Language,
                    that.Text
                );
            }

            public override Aas.IClass TransformLangStringDefinitionTypeIec61360(
                Aas.ILangStringDefinitionTypeIec61360 that
            )
            {
                return new Aas.LangStringDefinitionTypeIec61360(
                    that.Language,
                    that.Text
                );
            }

            public override Aas.IClass TransformDataSpecificationIec61360(
                Aas.IDataSpecificationIec61360 that
            )
            {
                var thePreferredName = new List<ILangStringPreferredNameTypeIec61360>(
                    that.PreferredName.Count);
                foreach (var item in that.PreferredName)
                {
                    thePreferredName.Add(Deep(item));
                }

                List<ILangStringShortNameTypeIec61360>? theShortName = null;
                if (that.ShortName != null)
                {
                    theShortName = new List<ILangStringShortNameTypeIec61360>(
                        that.ShortName.Count);
                    foreach (var item in that.ShortName)
                    {
                        theShortName.Add(Deep(item));
                    }
                }

                List<ILangStringDefinitionTypeIec61360>? theDefinition = null;
                if (that.Definition != null)
                {
                    theDefinition = new List<ILangStringDefinitionTypeIec61360>(
                        that.Definition.Count);
                    foreach (var item in that.Definition)
                    {
                        theDefinition.Add(Deep(item));
                    }
                }

                return new Aas.DataSpecificationIec61360(
                    thePreferredName,
                    theShortName,
                    that.Unit,
                    (that.UnitId != null)
                        ? Deep(that.UnitId)
                        : null,
                    that.SourceOfDefinition,
                    that.Symbol,
                    that.DataType,
                    theDefinition,
                    that.ValueFormat,
                    (that.ValueList != null)
                        ? Deep(that.ValueList)
                        : null,
                    that.Value,
                    (that.LevelType != null)
                        ? Deep(that.LevelType)
                        : null
                );
            }
        }  // internal class DeepCopier
    }  // public static class Copying
}  // namespace AasCore.Aas3_0

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
