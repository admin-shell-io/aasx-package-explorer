/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed
using CodeAnalysis = System.Diagnostics.CodeAnalysis;
using Xml = System.Xml;

using System.Collections.Generic;  // can't alias

namespace AasCore.Aas3_0
{
    /// <summary>
    /// Provide de/serialization of meta-model classes to/from XML.
    /// </summary>
    public static class Xmlization
    {
        /// The XML namespace of the meta-model
        [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
        public static readonly string NS = (
            "https://admin-shell.io/aas/3/0");

        /// <summary>
        /// Implement the deserialization of meta-model classes from XML.
        /// </summary>
        /// <remarks>
        /// The implementation propagates an <see cref="Reporting.Error" /> instead of
        /// relying on exceptions. Under the assumption that incorrect data is much less
        /// frequent than correct data, this makes the deserialization more
        /// efficient.
        ///
        /// However, we do not want to force the client to deal with
        /// the <see cref="Reporting.Error" /> class as this is not intuitive.
        /// Therefore we distinguish the implementation, realized in
        /// <see cref="DeserializeImplementation" />, and the facade given in
        /// <see cref="Deserialize" /> class.
        /// </remarks>
        internal static class DeserializeImplementation
        {
            internal static void SkipNoneWhitespaceAndComments(
                Xml.XmlReader reader)
            {
                while (
                    !reader.EOF
                    && (
                        reader.NodeType == Xml.XmlNodeType.None
                        || reader.NodeType == Xml.XmlNodeType.Whitespace
                        || reader.NodeType == Xml.XmlNodeType.Comment))
                {
                    reader.Read();
                }
            }

            /// <summary>
            /// Read the whole content of an element into memory.
            /// </summary>
            private static byte[] ReadWholeContentAsBase64(
                Xml.XmlReader reader)
            {
                // The capacity of 1024 bytes is an arbitrary,
                // but plausible default capacity.
                byte[] buffer = new byte[1024];
                using System.IO.MemoryStream stream = (
                    new System.IO.MemoryStream(1024));
                int readBytes;
                while ((readBytes = reader.ReadContentAsBase64(buffer, 0, 1024)) > 0)
                {
                    stream.Write(buffer, 0, readBytes);
                }
                return stream.ToArray();
            }

            /// <summary>
            /// Check the namespace and extract the element's name.
            /// </summary>
            private static string TryElementName(
                Xml.XmlReader reader,
                out Reporting.Error? error
                )
            {
                // Pre-condition
                if (reader.NodeType != Xml.XmlNodeType.Element
                    && reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    throw new System.InvalidOperationException(
                        "Expected to be at a start or an end element " +
                        $"in {nameof(TryElementName)}, " +
                        $"but got: {reader.NodeType}");
                }

                error = null;
                if (reader.NamespaceURI != NS)
                {
                    error = new Reporting.Error(
                        $"Expected an element within a namespace {NS}, " +
                        $"but got: {reader.NamespaceURI}");
                    return "";
                }

                return reader.LocalName;
            }

            /// <summary>
            /// Deserialize an instance of IHasSemantics from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IHasSemantics? IHasSemanticsFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "relationshipElement":
                        return RelationshipElementFromElement(
                            reader, out error);
                    case "annotatedRelationshipElement":
                        return AnnotatedRelationshipElementFromElement(
                            reader, out error);
                    case "basicEventElement":
                        return BasicEventElementFromElement(
                            reader, out error);
                    case "blob":
                        return BlobFromElement(
                            reader, out error);
                    case "capability":
                        return CapabilityFromElement(
                            reader, out error);
                    case "entity":
                        return EntityFromElement(
                            reader, out error);
                    case "extension":
                        return ExtensionFromElement(
                            reader, out error);
                    case "file":
                        return FileFromElement(
                            reader, out error);
                    case "multiLanguageProperty":
                        return MultiLanguagePropertyFromElement(
                            reader, out error);
                    case "operation":
                        return OperationFromElement(
                            reader, out error);
                    case "property":
                        return PropertyFromElement(
                            reader, out error);
                    case "qualifier":
                        return QualifierFromElement(
                            reader, out error);
                    case "range":
                        return RangeFromElement(
                            reader, out error);
                    case "referenceElement":
                        return ReferenceElementFromElement(
                            reader, out error);
                    case "specificAssetId":
                        return SpecificAssetIdFromElement(
                            reader, out error);
                    case "submodel":
                        return SubmodelFromElement(
                            reader, out error);
                    case "submodelElementCollection":
                        return SubmodelElementCollectionFromElement(
                            reader, out error);
                    case "submodelElementList":
                        return SubmodelElementListFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IHasSemantics? IHasSemanticsFromElement

            /// <summary>
            /// Deserialize an instance of class Extension from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Extension? ExtensionFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                string? theName = null;
                DataTypeDefXsd? theValueType = null;
                string? theValue = null;
                List<IReference>? theRefersTo = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Extension, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "name":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theName = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Name of an instance of class Extension, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theName = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Name of an instance of class Extension " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "name"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "valueType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Extension " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property ValueType of an instance of class Extension, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textValueType;
                                    try
                                    {
                                        textValueType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Extension " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    theValueType = Stringification.DataTypeDefXsdFromString(
                                        textValueType);

                                    if (theValueType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Extension " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textValueType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class Extension, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class Extension " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "refersTo":
                                {
                                    theRefersTo = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexRefersTo = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexRefersTo));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "refersTo"));
                                                return null;
                                            }

                                            theRefersTo.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexRefersTo++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Extension, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Extension " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Extension " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Extension " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theName == null)
                {
                    error = new Reporting.Error(
                        "The required property Name has not been given " +
                        "in the XML representation of an instance of class Extension");
                    return null;
                }

                return new Aas.Extension(
                    theName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theValueType,
                    theValue,
                    theRefersTo);
            }  // internal static Aas.Extension? ExtensionFromSequence

            /// <summary>
            /// Deserialize an instance of class Extension from an XML element.
            /// </summary>
            internal static Aas.Extension? ExtensionFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Extension, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Extension, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "extension")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Extension " +
                        $"with element name extension, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Extension? result = (
                    ExtensionFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Extension, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Extension, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Extension? ExtensionFromElement

            /// <summary>
            /// Deserialize an instance of IHasExtensions from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IHasExtensions? IHasExtensionsFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "relationshipElement":
                        return RelationshipElementFromElement(
                            reader, out error);
                    case "annotatedRelationshipElement":
                        return AnnotatedRelationshipElementFromElement(
                            reader, out error);
                    case "assetAdministrationShell":
                        return AssetAdministrationShellFromElement(
                            reader, out error);
                    case "basicEventElement":
                        return BasicEventElementFromElement(
                            reader, out error);
                    case "blob":
                        return BlobFromElement(
                            reader, out error);
                    case "capability":
                        return CapabilityFromElement(
                            reader, out error);
                    case "conceptDescription":
                        return ConceptDescriptionFromElement(
                            reader, out error);
                    case "entity":
                        return EntityFromElement(
                            reader, out error);
                    case "file":
                        return FileFromElement(
                            reader, out error);
                    case "multiLanguageProperty":
                        return MultiLanguagePropertyFromElement(
                            reader, out error);
                    case "operation":
                        return OperationFromElement(
                            reader, out error);
                    case "property":
                        return PropertyFromElement(
                            reader, out error);
                    case "range":
                        return RangeFromElement(
                            reader, out error);
                    case "referenceElement":
                        return ReferenceElementFromElement(
                            reader, out error);
                    case "submodel":
                        return SubmodelFromElement(
                            reader, out error);
                    case "submodelElementCollection":
                        return SubmodelElementCollectionFromElement(
                            reader, out error);
                    case "submodelElementList":
                        return SubmodelElementListFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IHasExtensions? IHasExtensionsFromElement

            /// <summary>
            /// Deserialize an instance of IReferable from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IReferable? IReferableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "relationshipElement":
                        return RelationshipElementFromElement(
                            reader, out error);
                    case "annotatedRelationshipElement":
                        return AnnotatedRelationshipElementFromElement(
                            reader, out error);
                    case "assetAdministrationShell":
                        return AssetAdministrationShellFromElement(
                            reader, out error);
                    case "basicEventElement":
                        return BasicEventElementFromElement(
                            reader, out error);
                    case "blob":
                        return BlobFromElement(
                            reader, out error);
                    case "capability":
                        return CapabilityFromElement(
                            reader, out error);
                    case "conceptDescription":
                        return ConceptDescriptionFromElement(
                            reader, out error);
                    case "entity":
                        return EntityFromElement(
                            reader, out error);
                    case "file":
                        return FileFromElement(
                            reader, out error);
                    case "multiLanguageProperty":
                        return MultiLanguagePropertyFromElement(
                            reader, out error);
                    case "operation":
                        return OperationFromElement(
                            reader, out error);
                    case "property":
                        return PropertyFromElement(
                            reader, out error);
                    case "range":
                        return RangeFromElement(
                            reader, out error);
                    case "referenceElement":
                        return ReferenceElementFromElement(
                            reader, out error);
                    case "submodel":
                        return SubmodelFromElement(
                            reader, out error);
                    case "submodelElementCollection":
                        return SubmodelElementCollectionFromElement(
                            reader, out error);
                    case "submodelElementList":
                        return SubmodelElementListFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IReferable? IReferableFromElement

            /// <summary>
            /// Deserialize an instance of IIdentifiable from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IIdentifiable? IIdentifiableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "assetAdministrationShell":
                        return AssetAdministrationShellFromElement(
                            reader, out error);
                    case "conceptDescription":
                        return ConceptDescriptionFromElement(
                            reader, out error);
                    case "submodel":
                        return SubmodelFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IIdentifiable? IIdentifiableFromElement

            /// <summary>
            /// Deserialize an instance of IHasKind from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IHasKind? IHasKindFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "submodel":
                        return SubmodelFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IHasKind? IHasKindFromElement

            /// <summary>
            /// Deserialize an instance of IHasDataSpecification from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IHasDataSpecification? IHasDataSpecificationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "administrativeInformation":
                        return AdministrativeInformationFromElement(
                            reader, out error);
                    case "relationshipElement":
                        return RelationshipElementFromElement(
                            reader, out error);
                    case "annotatedRelationshipElement":
                        return AnnotatedRelationshipElementFromElement(
                            reader, out error);
                    case "assetAdministrationShell":
                        return AssetAdministrationShellFromElement(
                            reader, out error);
                    case "basicEventElement":
                        return BasicEventElementFromElement(
                            reader, out error);
                    case "blob":
                        return BlobFromElement(
                            reader, out error);
                    case "capability":
                        return CapabilityFromElement(
                            reader, out error);
                    case "conceptDescription":
                        return ConceptDescriptionFromElement(
                            reader, out error);
                    case "entity":
                        return EntityFromElement(
                            reader, out error);
                    case "file":
                        return FileFromElement(
                            reader, out error);
                    case "multiLanguageProperty":
                        return MultiLanguagePropertyFromElement(
                            reader, out error);
                    case "operation":
                        return OperationFromElement(
                            reader, out error);
                    case "property":
                        return PropertyFromElement(
                            reader, out error);
                    case "range":
                        return RangeFromElement(
                            reader, out error);
                    case "referenceElement":
                        return ReferenceElementFromElement(
                            reader, out error);
                    case "submodel":
                        return SubmodelFromElement(
                            reader, out error);
                    case "submodelElementCollection":
                        return SubmodelElementCollectionFromElement(
                            reader, out error);
                    case "submodelElementList":
                        return SubmodelElementListFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IHasDataSpecification? IHasDataSpecificationFromElement

            /// <summary>
            /// Deserialize an instance of class AdministrativeInformation from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.AdministrativeInformation? AdministrativeInformationFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                string? theVersion = null;
                string? theRevision = null;
                IReference? theCreator = null;
                string? theTemplateId = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class AdministrativeInformation, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "version":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theVersion = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Version of an instance of class AdministrativeInformation, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theVersion = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Version of an instance of class AdministrativeInformation " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "version"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "revision":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theRevision = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Revision of an instance of class AdministrativeInformation, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theRevision = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Revision of an instance of class AdministrativeInformation " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "revision"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "creator":
                                {
                                    theCreator = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "creator"));
                                        return null;
                                    }
                                    break;
                                }
                            case "templateId":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theTemplateId = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property TemplateId of an instance of class AdministrativeInformation, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theTemplateId = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property TemplateId of an instance of class AdministrativeInformation " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "templateId"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class AdministrativeInformation, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AdministrativeInformation " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AdministrativeInformation " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AdministrativeInformation " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                return new Aas.AdministrativeInformation(
                    theEmbeddedDataSpecifications,
                    theVersion,
                    theRevision,
                    theCreator,
                    theTemplateId);
            }  // internal static Aas.AdministrativeInformation? AdministrativeInformationFromSequence

            /// <summary>
            /// Deserialize an instance of class AdministrativeInformation from an XML element.
            /// </summary>
            internal static Aas.AdministrativeInformation? AdministrativeInformationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AdministrativeInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AdministrativeInformation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "administrativeInformation")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AdministrativeInformation " +
                        $"with element name administrativeInformation, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.AdministrativeInformation? result = (
                    AdministrativeInformationFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AdministrativeInformation, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AdministrativeInformation, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.AdministrativeInformation? AdministrativeInformationFromElement

            /// <summary>
            /// Deserialize an instance of IQualifiable from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IQualifiable? IQualifiableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "relationshipElement":
                        return RelationshipElementFromElement(
                            reader, out error);
                    case "annotatedRelationshipElement":
                        return AnnotatedRelationshipElementFromElement(
                            reader, out error);
                    case "basicEventElement":
                        return BasicEventElementFromElement(
                            reader, out error);
                    case "blob":
                        return BlobFromElement(
                            reader, out error);
                    case "capability":
                        return CapabilityFromElement(
                            reader, out error);
                    case "entity":
                        return EntityFromElement(
                            reader, out error);
                    case "file":
                        return FileFromElement(
                            reader, out error);
                    case "multiLanguageProperty":
                        return MultiLanguagePropertyFromElement(
                            reader, out error);
                    case "operation":
                        return OperationFromElement(
                            reader, out error);
                    case "property":
                        return PropertyFromElement(
                            reader, out error);
                    case "range":
                        return RangeFromElement(
                            reader, out error);
                    case "referenceElement":
                        return ReferenceElementFromElement(
                            reader, out error);
                    case "submodel":
                        return SubmodelFromElement(
                            reader, out error);
                    case "submodelElementCollection":
                        return SubmodelElementCollectionFromElement(
                            reader, out error);
                    case "submodelElementList":
                        return SubmodelElementListFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IQualifiable? IQualifiableFromElement

            /// <summary>
            /// Deserialize an instance of class Qualifier from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Qualifier? QualifierFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                QualifierKind? theKind = null;
                string? theType = null;
                DataTypeDefXsd? theValueType = null;
                string? theValue = null;
                IReference? theValueId = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Qualifier, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "kind":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Kind of an instance of class Qualifier " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "kind"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property Kind of an instance of class Qualifier, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textKind;
                                    try
                                    {
                                        textKind = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property Kind of an instance of class Qualifier " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "kind"));
                                        return null;
                                    }

                                    theKind = Stringification.QualifierKindFromString(
                                        textKind);

                                    if (theKind == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property Kind of an instance of class Qualifier " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textKind);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "kind"));
                                        return null;
                                    }
                                    break;
                                }
                            case "type":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theType = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Type of an instance of class Qualifier, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theType = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Type of an instance of class Qualifier " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "type"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "valueType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Qualifier " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property ValueType of an instance of class Qualifier, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textValueType;
                                    try
                                    {
                                        textValueType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Qualifier " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    theValueType = Stringification.DataTypeDefXsdFromString(
                                        textValueType);

                                    if (theValueType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Qualifier " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textValueType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class Qualifier, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class Qualifier " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "valueId":
                                {
                                    theValueId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueId"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Qualifier, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Qualifier " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Qualifier " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Qualifier " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "The required property Type has not been given " +
                        "in the XML representation of an instance of class Qualifier");
                    return null;
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueType has not been given " +
                        "in the XML representation of an instance of class Qualifier");
                    return null;
                }

                return new Aas.Qualifier(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theKind,
                    theValue,
                    theValueId);
            }  // internal static Aas.Qualifier? QualifierFromSequence

            /// <summary>
            /// Deserialize an instance of class Qualifier from an XML element.
            /// </summary>
            internal static Aas.Qualifier? QualifierFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Qualifier, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Qualifier, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "qualifier")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Qualifier " +
                        $"with element name qualifier, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Qualifier? result = (
                    QualifierFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Qualifier, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Qualifier, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Qualifier? QualifierFromElement

            /// <summary>
            /// Deserialize an instance of class AssetAdministrationShell from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IAdministrativeInformation? theAdministration = null;
                string? theId = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                IReference? theDerivedFrom = null;
                IAssetInformation? theAssetInformation = null;
                List<IReference>? theSubmodels = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class AssetAdministrationShell, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class AssetAdministrationShell, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class AssetAdministrationShell " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class AssetAdministrationShell, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class AssetAdministrationShell " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "administration":
                                {
                                    theAdministration = AdministrativeInformationFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "administration"));
                                        return null;
                                    }
                                    break;
                                }
                            case "id":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theId = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Id of an instance of class AssetAdministrationShell, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theId = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Id of an instance of class AssetAdministrationShell " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "id"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "derivedFrom":
                                {
                                    theDerivedFrom = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "derivedFrom"));
                                        return null;
                                    }
                                    break;
                                }
                            case "assetInformation":
                                {
                                    theAssetInformation = AssetInformationFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "assetInformation"));
                                        return null;
                                    }
                                    break;
                                }
                            case "submodels":
                                {
                                    theSubmodels = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSubmodels = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSubmodels));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "submodels"));
                                                return null;
                                            }

                                            theSubmodels.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSubmodels++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class AssetAdministrationShell, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AssetAdministrationShell " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AssetAdministrationShell " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AssetAdministrationShell " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "The required property Id has not been given " +
                        "in the XML representation of an instance of class AssetAdministrationShell");
                    return null;
                }

                if (theAssetInformation == null)
                {
                    error = new Reporting.Error(
                        "The required property AssetInformation has not been given " +
                        "in the XML representation of an instance of class AssetAdministrationShell");
                    return null;
                }

                return new Aas.AssetAdministrationShell(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theAssetInformation
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theAdministration,
                    theEmbeddedDataSpecifications,
                    theDerivedFrom,
                    theSubmodels);
            }  // internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromSequence

            /// <summary>
            /// Deserialize an instance of class AssetAdministrationShell from an XML element.
            /// </summary>
            internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AssetAdministrationShell, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AssetAdministrationShell, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "assetAdministrationShell")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AssetAdministrationShell " +
                        $"with element name assetAdministrationShell, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.AssetAdministrationShell? result = (
                    AssetAdministrationShellFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AssetAdministrationShell, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AssetAdministrationShell, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromElement

            /// <summary>
            /// Deserialize an instance of class AssetInformation from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.AssetInformation? AssetInformationFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                AssetKind? theAssetKind = null;
                string? theGlobalAssetId = null;
                List<ISpecificAssetId>? theSpecificAssetIds = null;
                string? theAssetType = null;
                IResource? theDefaultThumbnail = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class AssetInformation, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "assetKind":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property AssetKind of an instance of class AssetInformation " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "assetKind"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property AssetKind of an instance of class AssetInformation, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textAssetKind;
                                    try
                                    {
                                        textAssetKind = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property AssetKind of an instance of class AssetInformation " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "assetKind"));
                                        return null;
                                    }

                                    theAssetKind = Stringification.AssetKindFromString(
                                        textAssetKind);

                                    if (theAssetKind == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property AssetKind of an instance of class AssetInformation " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textAssetKind);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "assetKind"));
                                        return null;
                                    }
                                    break;
                                }
                            case "globalAssetId":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theGlobalAssetId = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property GlobalAssetId of an instance of class AssetInformation, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theGlobalAssetId = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property GlobalAssetId of an instance of class AssetInformation " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "globalAssetId"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "specificAssetIds":
                                {
                                    theSpecificAssetIds = new List<ISpecificAssetId>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSpecificAssetIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ISpecificAssetId? item = SpecificAssetIdFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSpecificAssetIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "specificAssetIds"));
                                                return null;
                                            }

                                            theSpecificAssetIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSpecificAssetIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "assetType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theAssetType = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property AssetType of an instance of class AssetInformation, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theAssetType = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property AssetType of an instance of class AssetInformation " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "assetType"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "defaultThumbnail":
                                {
                                    theDefaultThumbnail = ResourceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "defaultThumbnail"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class AssetInformation, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AssetInformation " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AssetInformation " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AssetInformation " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theAssetKind == null)
                {
                    error = new Reporting.Error(
                        "The required property AssetKind has not been given " +
                        "in the XML representation of an instance of class AssetInformation");
                    return null;
                }

                return new Aas.AssetInformation(
                    theAssetKind
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theGlobalAssetId,
                    theSpecificAssetIds,
                    theAssetType,
                    theDefaultThumbnail);
            }  // internal static Aas.AssetInformation? AssetInformationFromSequence

            /// <summary>
            /// Deserialize an instance of class AssetInformation from an XML element.
            /// </summary>
            internal static Aas.AssetInformation? AssetInformationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AssetInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AssetInformation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "assetInformation")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AssetInformation " +
                        $"with element name assetInformation, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.AssetInformation? result = (
                    AssetInformationFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AssetInformation, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AssetInformation, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.AssetInformation? AssetInformationFromElement

            /// <summary>
            /// Deserialize an instance of class Resource from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Resource? ResourceFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                string? thePath = null;
                string? theContentType = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Resource, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "path":
                                {
                                    if (isEmptyProperty)
                                    {
                                        thePath = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Path of an instance of class Resource, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            thePath = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Path of an instance of class Resource " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "path"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "contentType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theContentType = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property ContentType of an instance of class Resource, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theContentType = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property ContentType of an instance of class Resource " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "contentType"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Resource, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Resource " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Resource " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Resource " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (thePath == null)
                {
                    error = new Reporting.Error(
                        "The required property Path has not been given " +
                        "in the XML representation of an instance of class Resource");
                    return null;
                }

                return new Aas.Resource(
                    thePath
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theContentType);
            }  // internal static Aas.Resource? ResourceFromSequence

            /// <summary>
            /// Deserialize an instance of class Resource from an XML element.
            /// </summary>
            internal static Aas.Resource? ResourceFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Resource, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Resource, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "resource")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Resource " +
                        $"with element name resource, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Resource? result = (
                    ResourceFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Resource, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Resource, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Resource? ResourceFromElement

            /// <summary>
            /// Deserialize an instance of class SpecificAssetId from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.SpecificAssetId? SpecificAssetIdFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                string? theName = null;
                string? theValue = null;
                IReference? theExternalSubjectId = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class SpecificAssetId, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "name":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theName = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Name of an instance of class SpecificAssetId, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theName = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Name of an instance of class SpecificAssetId " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "name"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class SpecificAssetId, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class SpecificAssetId " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "externalSubjectId":
                                {
                                    theExternalSubjectId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "externalSubjectId"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class SpecificAssetId, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SpecificAssetId " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SpecificAssetId " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SpecificAssetId " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theName == null)
                {
                    error = new Reporting.Error(
                        "The required property Name has not been given " +
                        "in the XML representation of an instance of class SpecificAssetId");
                    return null;
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class SpecificAssetId");
                    return null;
                }

                return new Aas.SpecificAssetId(
                    theName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theExternalSubjectId);
            }  // internal static Aas.SpecificAssetId? SpecificAssetIdFromSequence

            /// <summary>
            /// Deserialize an instance of class SpecificAssetId from an XML element.
            /// </summary>
            internal static Aas.SpecificAssetId? SpecificAssetIdFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SpecificAssetId, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SpecificAssetId, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "specificAssetId")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class SpecificAssetId " +
                        $"with element name specificAssetId, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.SpecificAssetId? result = (
                    SpecificAssetIdFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class SpecificAssetId, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class SpecificAssetId, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.SpecificAssetId? SpecificAssetIdFromElement

            /// <summary>
            /// Deserialize an instance of class Submodel from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Submodel? SubmodelFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IAdministrativeInformation? theAdministration = null;
                string? theId = null;
                ModellingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<ISubmodelElement>? theSubmodelElements = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Submodel, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class Submodel, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class Submodel " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class Submodel, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class Submodel " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "administration":
                                {
                                    theAdministration = AdministrativeInformationFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "administration"));
                                        return null;
                                    }
                                    break;
                                }
                            case "id":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theId = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Id of an instance of class Submodel, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theId = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Id of an instance of class Submodel " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "id"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "kind":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Kind of an instance of class Submodel " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "kind"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property Kind of an instance of class Submodel, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textKind;
                                    try
                                    {
                                        textKind = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property Kind of an instance of class Submodel " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "kind"));
                                        return null;
                                    }

                                    theKind = Stringification.ModellingKindFromString(
                                        textKind);

                                    if (theKind == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property Kind of an instance of class Submodel " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textKind);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "kind"));
                                        return null;
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "submodelElements":
                                {
                                    theSubmodelElements = new List<ISubmodelElement>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSubmodelElements = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ISubmodelElement? item = ISubmodelElementFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSubmodelElements));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "submodelElements"));
                                                return null;
                                            }

                                            theSubmodelElements.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSubmodelElements++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Submodel, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Submodel " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Submodel " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Submodel " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "The required property Id has not been given " +
                        "in the XML representation of an instance of class Submodel");
                    return null;
                }

                return new Aas.Submodel(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theAdministration,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theSubmodelElements);
            }  // internal static Aas.Submodel? SubmodelFromSequence

            /// <summary>
            /// Deserialize an instance of class Submodel from an XML element.
            /// </summary>
            internal static Aas.Submodel? SubmodelFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Submodel, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Submodel, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "submodel")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Submodel " +
                        $"with element name submodel, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Submodel? result = (
                    SubmodelFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Submodel, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Submodel, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Submodel? SubmodelFromElement

            /// <summary>
            /// Deserialize an instance of ISubmodelElement from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.ISubmodelElement? ISubmodelElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "relationshipElement":
                        return RelationshipElementFromElement(
                            reader, out error);
                    case "annotatedRelationshipElement":
                        return AnnotatedRelationshipElementFromElement(
                            reader, out error);
                    case "basicEventElement":
                        return BasicEventElementFromElement(
                            reader, out error);
                    case "blob":
                        return BlobFromElement(
                            reader, out error);
                    case "capability":
                        return CapabilityFromElement(
                            reader, out error);
                    case "entity":
                        return EntityFromElement(
                            reader, out error);
                    case "file":
                        return FileFromElement(
                            reader, out error);
                    case "multiLanguageProperty":
                        return MultiLanguagePropertyFromElement(
                            reader, out error);
                    case "operation":
                        return OperationFromElement(
                            reader, out error);
                    case "property":
                        return PropertyFromElement(
                            reader, out error);
                    case "range":
                        return RangeFromElement(
                            reader, out error);
                    case "referenceElement":
                        return ReferenceElementFromElement(
                            reader, out error);
                    case "submodelElementCollection":
                        return SubmodelElementCollectionFromElement(
                            reader, out error);
                    case "submodelElementList":
                        return SubmodelElementListFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.ISubmodelElement? ISubmodelElementFromElement

            /// <summary>
            /// Deserialize an instance of class RelationshipElement from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.RelationshipElement? RelationshipElementFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                IReference? theFirst = null;
                IReference? theSecond = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class RelationshipElement, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class RelationshipElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class RelationshipElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class RelationshipElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class RelationshipElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "first":
                                {
                                    theFirst = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "first"));
                                        return null;
                                    }
                                    break;
                                }
                            case "second":
                                {
                                    theSecond = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "second"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class RelationshipElement, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class RelationshipElement " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class RelationshipElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class RelationshipElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theFirst == null)
                {
                    error = new Reporting.Error(
                        "The required property First has not been given " +
                        "in the XML representation of an instance of class RelationshipElement");
                    return null;
                }

                if (theSecond == null)
                {
                    error = new Reporting.Error(
                        "The required property Second has not been given " +
                        "in the XML representation of an instance of class RelationshipElement");
                    return null;
                }

                return new Aas.RelationshipElement(
                    theFirst
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSecond
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications);
            }  // internal static Aas.RelationshipElement? RelationshipElementFromSequence

            /// <summary>
            /// Deserialize an instance of IRelationshipElement from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IRelationshipElement? IRelationshipElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "annotatedRelationshipElement":
                        return AnnotatedRelationshipElementFromElement(
                            reader, out error);
                    case "relationshipElement":
                        return RelationshipElementFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IRelationshipElement? IRelationshipElementFromElement

            /// <summary>
            /// Deserialize an instance of class RelationshipElement from an XML element.
            /// </summary>
            internal static Aas.RelationshipElement? RelationshipElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class RelationshipElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class RelationshipElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "relationshipElement")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class RelationshipElement " +
                        $"with element name relationshipElement, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.RelationshipElement? result = (
                    RelationshipElementFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class RelationshipElement, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class RelationshipElement, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.RelationshipElement? RelationshipElementFromElement

            /// <summary>
            /// Deserialize an instance of class SubmodelElementList from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.SubmodelElementList? SubmodelElementListFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                bool? theOrderRelevant = null;
                IReference? theSemanticIdListElement = null;
                AasSubmodelElements? theTypeValueListElement = null;
                DataTypeDefXsd? theValueTypeListElement = null;
                List<ISubmodelElement>? theValue = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class SubmodelElementList, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class SubmodelElementList, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class SubmodelElementList " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class SubmodelElementList, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class SubmodelElementList " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "orderRelevant":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property OrderRelevant of an instance of class SubmodelElementList " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "orderRelevant"));
                                        return null;
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property OrderRelevant of an instance of class SubmodelElementList, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theOrderRelevant = reader.ReadContentAsBoolean();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property OrderRelevant of an instance of class SubmodelElementList " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "orderRelevant"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "semanticIdListElement":
                                {
                                    theSemanticIdListElement = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticIdListElement"));
                                        return null;
                                    }
                                    break;
                                }
                            case "typeValueListElement":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property TypeValueListElement of an instance of class SubmodelElementList " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "typeValueListElement"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property TypeValueListElement of an instance of class SubmodelElementList, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textTypeValueListElement;
                                    try
                                    {
                                        textTypeValueListElement = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property TypeValueListElement of an instance of class SubmodelElementList " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "typeValueListElement"));
                                        return null;
                                    }

                                    theTypeValueListElement = Stringification.AasSubmodelElementsFromString(
                                        textTypeValueListElement);

                                    if (theTypeValueListElement == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property TypeValueListElement of an instance of class SubmodelElementList " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textTypeValueListElement);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "typeValueListElement"));
                                        return null;
                                    }
                                    break;
                                }
                            case "valueTypeListElement":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueTypeListElement of an instance of class SubmodelElementList " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueTypeListElement"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property ValueTypeListElement of an instance of class SubmodelElementList, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textValueTypeListElement;
                                    try
                                    {
                                        textValueTypeListElement = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueTypeListElement of an instance of class SubmodelElementList " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueTypeListElement"));
                                        return null;
                                    }

                                    theValueTypeListElement = Stringification.DataTypeDefXsdFromString(
                                        textValueTypeListElement);

                                    if (theValueTypeListElement == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueTypeListElement of an instance of class SubmodelElementList " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textValueTypeListElement);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueTypeListElement"));
                                        return null;
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    theValue = new List<ISubmodelElement>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexValue = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ISubmodelElement? item = ISubmodelElementFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexValue));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            theValue.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexValue++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class SubmodelElementList, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SubmodelElementList " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SubmodelElementList " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SubmodelElementList " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theTypeValueListElement == null)
                {
                    error = new Reporting.Error(
                        "The required property TypeValueListElement has not been given " +
                        "in the XML representation of an instance of class SubmodelElementList");
                    return null;
                }

                return new Aas.SubmodelElementList(
                    theTypeValueListElement
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theOrderRelevant,
                    theSemanticIdListElement,
                    theValueTypeListElement,
                    theValue);
            }  // internal static Aas.SubmodelElementList? SubmodelElementListFromSequence

            /// <summary>
            /// Deserialize an instance of class SubmodelElementList from an XML element.
            /// </summary>
            internal static Aas.SubmodelElementList? SubmodelElementListFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SubmodelElementList, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SubmodelElementList, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "submodelElementList")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class SubmodelElementList " +
                        $"with element name submodelElementList, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.SubmodelElementList? result = (
                    SubmodelElementListFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class SubmodelElementList, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class SubmodelElementList, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.SubmodelElementList? SubmodelElementListFromElement

            /// <summary>
            /// Deserialize an instance of class SubmodelElementCollection from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.SubmodelElementCollection? SubmodelElementCollectionFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<ISubmodelElement>? theValue = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class SubmodelElementCollection, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class SubmodelElementCollection, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class SubmodelElementCollection " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class SubmodelElementCollection, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class SubmodelElementCollection " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    theValue = new List<ISubmodelElement>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexValue = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ISubmodelElement? item = ISubmodelElementFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexValue));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            theValue.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexValue++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class SubmodelElementCollection, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SubmodelElementCollection " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SubmodelElementCollection " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class SubmodelElementCollection " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                return new Aas.SubmodelElementCollection(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static Aas.SubmodelElementCollection? SubmodelElementCollectionFromSequence

            /// <summary>
            /// Deserialize an instance of class SubmodelElementCollection from an XML element.
            /// </summary>
            internal static Aas.SubmodelElementCollection? SubmodelElementCollectionFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SubmodelElementCollection, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SubmodelElementCollection, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "submodelElementCollection")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class SubmodelElementCollection " +
                        $"with element name submodelElementCollection, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.SubmodelElementCollection? result = (
                    SubmodelElementCollectionFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class SubmodelElementCollection, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class SubmodelElementCollection, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.SubmodelElementCollection? SubmodelElementCollectionFromElement

            /// <summary>
            /// Deserialize an instance of IDataElement from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IDataElement? IDataElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "blob":
                        return BlobFromElement(
                            reader, out error);
                    case "file":
                        return FileFromElement(
                            reader, out error);
                    case "multiLanguageProperty":
                        return MultiLanguagePropertyFromElement(
                            reader, out error);
                    case "property":
                        return PropertyFromElement(
                            reader, out error);
                    case "range":
                        return RangeFromElement(
                            reader, out error);
                    case "referenceElement":
                        return ReferenceElementFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IDataElement? IDataElementFromElement

            /// <summary>
            /// Deserialize an instance of class Property from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Property? PropertyFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                DataTypeDefXsd? theValueType = null;
                string? theValue = null;
                IReference? theValueId = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Property, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class Property, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class Property " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class Property, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class Property " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "valueType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Property " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property ValueType of an instance of class Property, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textValueType;
                                    try
                                    {
                                        textValueType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Property " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    theValueType = Stringification.DataTypeDefXsdFromString(
                                        textValueType);

                                    if (theValueType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Property " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textValueType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class Property, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class Property " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "valueId":
                                {
                                    theValueId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueId"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Property, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Property " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Property " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Property " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueType has not been given " +
                        "in the XML representation of an instance of class Property");
                    return null;
                }

                return new Aas.Property(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static Aas.Property? PropertyFromSequence

            /// <summary>
            /// Deserialize an instance of class Property from an XML element.
            /// </summary>
            internal static Aas.Property? PropertyFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Property, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Property, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "property")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Property " +
                        $"with element name property, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Property? result = (
                    PropertyFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Property, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Property, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Property? PropertyFromElement

            /// <summary>
            /// Deserialize an instance of class MultiLanguageProperty from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<ILangStringTextType>? theValue = null;
                IReference? theValueId = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class MultiLanguageProperty, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class MultiLanguageProperty, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class MultiLanguageProperty " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class MultiLanguageProperty, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class MultiLanguageProperty " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    theValue = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexValue = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexValue));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            theValue.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexValue++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "valueId":
                                {
                                    theValueId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueId"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class MultiLanguageProperty, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class MultiLanguageProperty " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class MultiLanguageProperty " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class MultiLanguageProperty " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                return new Aas.MultiLanguageProperty(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromSequence

            /// <summary>
            /// Deserialize an instance of class MultiLanguageProperty from an XML element.
            /// </summary>
            internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class MultiLanguageProperty, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class MultiLanguageProperty, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "multiLanguageProperty")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class MultiLanguageProperty " +
                        $"with element name multiLanguageProperty, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.MultiLanguageProperty? result = (
                    MultiLanguagePropertyFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class MultiLanguageProperty, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class MultiLanguageProperty, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromElement

            /// <summary>
            /// Deserialize an instance of class Range from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Range? RangeFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                DataTypeDefXsd? theValueType = null;
                string? theMin = null;
                string? theMax = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Range, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class Range, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class Range " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class Range, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class Range " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "valueType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Range " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property ValueType of an instance of class Range, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textValueType;
                                    try
                                    {
                                        textValueType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Range " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }

                                    theValueType = Stringification.DataTypeDefXsdFromString(
                                        textValueType);

                                    if (theValueType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property ValueType of an instance of class Range " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textValueType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueType"));
                                        return null;
                                    }
                                    break;
                                }
                            case "min":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theMin = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Min of an instance of class Range, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theMin = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Min of an instance of class Range " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "min"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "max":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theMax = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Max of an instance of class Range, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theMax = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Max of an instance of class Range " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "max"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Range, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Range " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Range " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Range " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueType has not been given " +
                        "in the XML representation of an instance of class Range");
                    return null;
                }

                return new Aas.Range(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theMin,
                    theMax);
            }  // internal static Aas.Range? RangeFromSequence

            /// <summary>
            /// Deserialize an instance of class Range from an XML element.
            /// </summary>
            internal static Aas.Range? RangeFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Range, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Range, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "range")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Range " +
                        $"with element name range, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Range? result = (
                    RangeFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Range, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Range, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Range? RangeFromElement

            /// <summary>
            /// Deserialize an instance of class ReferenceElement from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.ReferenceElement? ReferenceElementFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                IReference? theValue = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class ReferenceElement, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class ReferenceElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class ReferenceElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class ReferenceElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class ReferenceElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    theValue = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class ReferenceElement, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ReferenceElement " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ReferenceElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ReferenceElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                return new Aas.ReferenceElement(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static Aas.ReferenceElement? ReferenceElementFromSequence

            /// <summary>
            /// Deserialize an instance of class ReferenceElement from an XML element.
            /// </summary>
            internal static Aas.ReferenceElement? ReferenceElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ReferenceElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ReferenceElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "referenceElement")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class ReferenceElement " +
                        $"with element name referenceElement, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.ReferenceElement? result = (
                    ReferenceElementFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ReferenceElement, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ReferenceElement, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.ReferenceElement? ReferenceElementFromElement

            /// <summary>
            /// Deserialize an instance of class Blob from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Blob? BlobFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                byte[]? theValue = null;
                string? theContentType = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Blob, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class Blob, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class Blob " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class Blob, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class Blob " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Value of an instance of class Blob " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class Blob, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = DeserializeImplementation.ReadWholeContentAsBase64(
                                            reader);
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class Blob " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "contentType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theContentType = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property ContentType of an instance of class Blob, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theContentType = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property ContentType of an instance of class Blob " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "contentType"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Blob, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Blob " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Blob " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Blob " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theContentType == null)
                {
                    error = new Reporting.Error(
                        "The required property ContentType has not been given " +
                        "in the XML representation of an instance of class Blob");
                    return null;
                }

                return new Aas.Blob(
                    theContentType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static Aas.Blob? BlobFromSequence

            /// <summary>
            /// Deserialize an instance of class Blob from an XML element.
            /// </summary>
            internal static Aas.Blob? BlobFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Blob, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Blob, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "blob")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Blob " +
                        $"with element name blob, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Blob? result = (
                    BlobFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Blob, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Blob, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Blob? BlobFromElement

            /// <summary>
            /// Deserialize an instance of class File from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.File? FileFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                string? theValue = null;
                string? theContentType = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class File, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class File, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class File " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class File, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class File " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class File, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class File " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "contentType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theContentType = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property ContentType of an instance of class File, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theContentType = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property ContentType of an instance of class File " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "contentType"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class File, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class File " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class File " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class File " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theContentType == null)
                {
                    error = new Reporting.Error(
                        "The required property ContentType has not been given " +
                        "in the XML representation of an instance of class File");
                    return null;
                }

                return new Aas.File(
                    theContentType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static Aas.File? FileFromSequence

            /// <summary>
            /// Deserialize an instance of class File from an XML element.
            /// </summary>
            internal static Aas.File? FileFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class File, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class File, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "file")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class File " +
                        $"with element name file, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.File? result = (
                    FileFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class File, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class File, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.File? FileFromElement

            /// <summary>
            /// Deserialize an instance of class AnnotatedRelationshipElement from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<IDataElement>? theAnnotations = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class AnnotatedRelationshipElement, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class AnnotatedRelationshipElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class AnnotatedRelationshipElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class AnnotatedRelationshipElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class AnnotatedRelationshipElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "first":
                                {
                                    theFirst = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "first"));
                                        return null;
                                    }
                                    break;
                                }
                            case "second":
                                {
                                    theSecond = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "second"));
                                        return null;
                                    }
                                    break;
                                }
                            case "annotations":
                                {
                                    theAnnotations = new List<IDataElement>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexAnnotations = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IDataElement? item = IDataElementFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexAnnotations));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "annotations"));
                                                return null;
                                            }

                                            theAnnotations.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexAnnotations++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class AnnotatedRelationshipElement, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AnnotatedRelationshipElement " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AnnotatedRelationshipElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class AnnotatedRelationshipElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theFirst == null)
                {
                    error = new Reporting.Error(
                        "The required property First has not been given " +
                        "in the XML representation of an instance of class AnnotatedRelationshipElement");
                    return null;
                }

                if (theSecond == null)
                {
                    error = new Reporting.Error(
                        "The required property Second has not been given " +
                        "in the XML representation of an instance of class AnnotatedRelationshipElement");
                    return null;
                }

                return new Aas.AnnotatedRelationshipElement(
                    theFirst
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSecond
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theAnnotations);
            }  // internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromSequence

            /// <summary>
            /// Deserialize an instance of class AnnotatedRelationshipElement from an XML element.
            /// </summary>
            internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AnnotatedRelationshipElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AnnotatedRelationshipElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "annotatedRelationshipElement")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AnnotatedRelationshipElement " +
                        $"with element name annotatedRelationshipElement, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.AnnotatedRelationshipElement? result = (
                    AnnotatedRelationshipElementFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AnnotatedRelationshipElement, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class AnnotatedRelationshipElement, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromElement

            /// <summary>
            /// Deserialize an instance of class Entity from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Entity? EntityFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<ISubmodelElement>? theStatements = null;
                EntityType? theEntityType = null;
                string? theGlobalAssetId = null;
                List<ISpecificAssetId>? theSpecificAssetIds = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Entity, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class Entity, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class Entity " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class Entity, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class Entity " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "statements":
                                {
                                    theStatements = new List<ISubmodelElement>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexStatements = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ISubmodelElement? item = ISubmodelElementFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexStatements));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "statements"));
                                                return null;
                                            }

                                            theStatements.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexStatements++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "entityType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property EntityType of an instance of class Entity " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "entityType"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property EntityType of an instance of class Entity, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textEntityType;
                                    try
                                    {
                                        textEntityType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property EntityType of an instance of class Entity " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "entityType"));
                                        return null;
                                    }

                                    theEntityType = Stringification.EntityTypeFromString(
                                        textEntityType);

                                    if (theEntityType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property EntityType of an instance of class Entity " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textEntityType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "entityType"));
                                        return null;
                                    }
                                    break;
                                }
                            case "globalAssetId":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theGlobalAssetId = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property GlobalAssetId of an instance of class Entity, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theGlobalAssetId = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property GlobalAssetId of an instance of class Entity " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "globalAssetId"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "specificAssetIds":
                                {
                                    theSpecificAssetIds = new List<ISpecificAssetId>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSpecificAssetIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ISpecificAssetId? item = SpecificAssetIdFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSpecificAssetIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "specificAssetIds"));
                                                return null;
                                            }

                                            theSpecificAssetIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSpecificAssetIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Entity, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Entity " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Entity " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Entity " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theEntityType == null)
                {
                    error = new Reporting.Error(
                        "The required property EntityType has not been given " +
                        "in the XML representation of an instance of class Entity");
                    return null;
                }

                return new Aas.Entity(
                    theEntityType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theStatements,
                    theGlobalAssetId,
                    theSpecificAssetIds);
            }  // internal static Aas.Entity? EntityFromSequence

            /// <summary>
            /// Deserialize an instance of class Entity from an XML element.
            /// </summary>
            internal static Aas.Entity? EntityFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Entity, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Entity, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "entity")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Entity " +
                        $"with element name entity, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Entity? result = (
                    EntityFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Entity, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Entity, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Entity? EntityFromElement

            /// <summary>
            /// Deserialize an instance of class EventPayload from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.EventPayload? EventPayloadFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                IReference? theSource = null;
                IReference? theSourceSemanticId = null;
                IReference? theObservableReference = null;
                IReference? theObservableSemanticId = null;
                string? theTopic = null;
                IReference? theSubjectId = null;
                string? theTimeStamp = null;
                byte[]? thePayload = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class EventPayload, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "source":
                                {
                                    theSource = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "source"));
                                        return null;
                                    }
                                    break;
                                }
                            case "sourceSemanticId":
                                {
                                    theSourceSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "sourceSemanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "observableReference":
                                {
                                    theObservableReference = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "observableReference"));
                                        return null;
                                    }
                                    break;
                                }
                            case "observableSemanticId":
                                {
                                    theObservableSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "observableSemanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "topic":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theTopic = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Topic of an instance of class EventPayload, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theTopic = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Topic of an instance of class EventPayload " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "topic"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "subjectId":
                                {
                                    theSubjectId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "subjectId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "timeStamp":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theTimeStamp = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property TimeStamp of an instance of class EventPayload, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theTimeStamp = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property TimeStamp of an instance of class EventPayload " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "timeStamp"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "payload":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Payload of an instance of class EventPayload " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "payload"));
                                        return null;
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Payload of an instance of class EventPayload, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            thePayload = DeserializeImplementation.ReadWholeContentAsBase64(
                                            reader);
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Payload of an instance of class EventPayload " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "payload"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class EventPayload, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class EventPayload " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class EventPayload " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class EventPayload " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theSource == null)
                {
                    error = new Reporting.Error(
                        "The required property Source has not been given " +
                        "in the XML representation of an instance of class EventPayload");
                    return null;
                }

                if (theObservableReference == null)
                {
                    error = new Reporting.Error(
                        "The required property ObservableReference has not been given " +
                        "in the XML representation of an instance of class EventPayload");
                    return null;
                }

                if (theTimeStamp == null)
                {
                    error = new Reporting.Error(
                        "The required property TimeStamp has not been given " +
                        "in the XML representation of an instance of class EventPayload");
                    return null;
                }

                return new Aas.EventPayload(
                    theSource
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theObservableReference
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theTimeStamp
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSourceSemanticId,
                    theObservableSemanticId,
                    theTopic,
                    theSubjectId,
                    thePayload);
            }  // internal static Aas.EventPayload? EventPayloadFromSequence

            /// <summary>
            /// Deserialize an instance of class EventPayload from an XML element.
            /// </summary>
            internal static Aas.EventPayload? EventPayloadFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class EventPayload, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class EventPayload, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "eventPayload")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class EventPayload " +
                        $"with element name eventPayload, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.EventPayload? result = (
                    EventPayloadFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class EventPayload, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class EventPayload, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.EventPayload? EventPayloadFromElement

            /// <summary>
            /// Deserialize an instance of IEventElement from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IEventElement? IEventElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "basicEventElement":
                        return BasicEventElementFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IEventElement? IEventElementFromElement

            /// <summary>
            /// Deserialize an instance of class BasicEventElement from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.BasicEventElement? BasicEventElementFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                IReference? theObserved = null;
                Direction? theDirection = null;
                StateOfEvent? theState = null;
                string? theMessageTopic = null;
                IReference? theMessageBroker = null;
                string? theLastUpdate = null;
                string? theMinInterval = null;
                string? theMaxInterval = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class BasicEventElement, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class BasicEventElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class BasicEventElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class BasicEventElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class BasicEventElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "observed":
                                {
                                    theObserved = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "observed"));
                                        return null;
                                    }
                                    break;
                                }
                            case "direction":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Direction of an instance of class BasicEventElement " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "direction"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property Direction of an instance of class BasicEventElement, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textDirection;
                                    try
                                    {
                                        textDirection = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property Direction of an instance of class BasicEventElement " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "direction"));
                                        return null;
                                    }

                                    theDirection = Stringification.DirectionFromString(
                                        textDirection);

                                    if (theDirection == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property Direction of an instance of class BasicEventElement " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textDirection);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "direction"));
                                        return null;
                                    }
                                    break;
                                }
                            case "state":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property State of an instance of class BasicEventElement " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "state"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property State of an instance of class BasicEventElement, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textState;
                                    try
                                    {
                                        textState = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property State of an instance of class BasicEventElement " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "state"));
                                        return null;
                                    }

                                    theState = Stringification.StateOfEventFromString(
                                        textState);

                                    if (theState == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property State of an instance of class BasicEventElement " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textState);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "state"));
                                        return null;
                                    }
                                    break;
                                }
                            case "messageTopic":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theMessageTopic = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property MessageTopic of an instance of class BasicEventElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theMessageTopic = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property MessageTopic of an instance of class BasicEventElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "messageTopic"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "messageBroker":
                                {
                                    theMessageBroker = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "messageBroker"));
                                        return null;
                                    }
                                    break;
                                }
                            case "lastUpdate":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theLastUpdate = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property LastUpdate of an instance of class BasicEventElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theLastUpdate = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property LastUpdate of an instance of class BasicEventElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "lastUpdate"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "minInterval":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theMinInterval = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property MinInterval of an instance of class BasicEventElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theMinInterval = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property MinInterval of an instance of class BasicEventElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "minInterval"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "maxInterval":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theMaxInterval = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property MaxInterval of an instance of class BasicEventElement, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theMaxInterval = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property MaxInterval of an instance of class BasicEventElement " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "maxInterval"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class BasicEventElement, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class BasicEventElement " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class BasicEventElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class BasicEventElement " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theObserved == null)
                {
                    error = new Reporting.Error(
                        "The required property Observed has not been given " +
                        "in the XML representation of an instance of class BasicEventElement");
                    return null;
                }

                if (theDirection == null)
                {
                    error = new Reporting.Error(
                        "The required property Direction has not been given " +
                        "in the XML representation of an instance of class BasicEventElement");
                    return null;
                }

                if (theState == null)
                {
                    error = new Reporting.Error(
                        "The required property State has not been given " +
                        "in the XML representation of an instance of class BasicEventElement");
                    return null;
                }

                return new Aas.BasicEventElement(
                    theObserved
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDirection
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theState
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theMessageTopic,
                    theMessageBroker,
                    theLastUpdate,
                    theMinInterval,
                    theMaxInterval);
            }  // internal static Aas.BasicEventElement? BasicEventElementFromSequence

            /// <summary>
            /// Deserialize an instance of class BasicEventElement from an XML element.
            /// </summary>
            internal static Aas.BasicEventElement? BasicEventElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class BasicEventElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class BasicEventElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "basicEventElement")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class BasicEventElement " +
                        $"with element name basicEventElement, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.BasicEventElement? result = (
                    BasicEventElementFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class BasicEventElement, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class BasicEventElement, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.BasicEventElement? BasicEventElementFromElement

            /// <summary>
            /// Deserialize an instance of class Operation from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Operation? OperationFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<IOperationVariable>? theInputVariables = null;
                List<IOperationVariable>? theOutputVariables = null;
                List<IOperationVariable>? theInoutputVariables = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Operation, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class Operation, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class Operation " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class Operation, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class Operation " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "inputVariables":
                                {
                                    theInputVariables = new List<IOperationVariable>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexInputVariables = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IOperationVariable? item = OperationVariableFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexInputVariables));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "inputVariables"));
                                                return null;
                                            }

                                            theInputVariables.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexInputVariables++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "outputVariables":
                                {
                                    theOutputVariables = new List<IOperationVariable>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexOutputVariables = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IOperationVariable? item = OperationVariableFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexOutputVariables));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "outputVariables"));
                                                return null;
                                            }

                                            theOutputVariables.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexOutputVariables++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "inoutputVariables":
                                {
                                    theInoutputVariables = new List<IOperationVariable>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexInoutputVariables = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IOperationVariable? item = OperationVariableFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexInoutputVariables));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "inoutputVariables"));
                                                return null;
                                            }

                                            theInoutputVariables.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexInoutputVariables++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Operation, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Operation " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Operation " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Operation " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                return new Aas.Operation(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theInputVariables,
                    theOutputVariables,
                    theInoutputVariables);
            }  // internal static Aas.Operation? OperationFromSequence

            /// <summary>
            /// Deserialize an instance of class Operation from an XML element.
            /// </summary>
            internal static Aas.Operation? OperationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Operation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Operation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "operation")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Operation " +
                        $"with element name operation, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Operation? result = (
                    OperationFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Operation, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Operation, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Operation? OperationFromElement

            /// <summary>
            /// Deserialize an instance of class OperationVariable from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.OperationVariable? OperationVariableFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                ISubmodelElement? theValue = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class OperationVariable, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            $"Expected an XML element within the element {elementName} representing " +
                                            "the property Value of an instance of class OperationVariable, " +
                                            "but encountered a self-closing element {elementName}");
                                        return null;
                                    }

                                    // We need to skip the whitespace here in order to be able to look ahead
                                    // the discriminator element shortly.
                                    SkipNoneWhitespaceAndComments(reader);

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            $"Expected an XML element within the element {elementName} representing " +
                                            "the property Value of an instance of class OperationVariable, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    // Try to look ahead the discriminator name;
                                    // we need this name only for the error reporting below.
                                    // ISubmodelElementFromElement will perform more sophisticated
                                    // checks.
                                    string? discriminatorElementName = null;
                                    if (reader.NodeType == Xml.XmlNodeType.Element)
                                    {
                                        discriminatorElementName = reader.LocalName;
                                    }

                                    theValue = ISubmodelElementFromElement(
                                        reader, out error);

                                    if (error != null)
                                    {
                                        if (discriminatorElementName != null)
                                        {
                                            error.PrependSegment(
                                                new Reporting.NameSegment(
                                                    discriminatorElementName));
                                        }

                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class OperationVariable, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class OperationVariable " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class OperationVariable " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class OperationVariable " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class OperationVariable");
                    return null;
                }

                return new Aas.OperationVariable(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.OperationVariable? OperationVariableFromSequence

            /// <summary>
            /// Deserialize an instance of class OperationVariable from an XML element.
            /// </summary>
            internal static Aas.OperationVariable? OperationVariableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class OperationVariable, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class OperationVariable, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "operationVariable")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class OperationVariable " +
                        $"with element name operationVariable, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.OperationVariable? result = (
                    OperationVariableFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class OperationVariable, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class OperationVariable, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.OperationVariable? OperationVariableFromElement

            /// <summary>
            /// Deserialize an instance of class Capability from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Capability? CapabilityFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theSupplementalSemanticIds = null;
                List<IQualifier>? theQualifiers = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Capability, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class Capability, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class Capability " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class Capability, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class Capability " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "semanticId":
                                {
                                    theSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "semanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "supplementalSemanticIds":
                                {
                                    theSupplementalSemanticIds = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSupplementalSemanticIds = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSupplementalSemanticIds));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "supplementalSemanticIds"));
                                                return null;
                                            }

                                            theSupplementalSemanticIds.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSupplementalSemanticIds++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "qualifiers":
                                {
                                    theQualifiers = new List<IQualifier>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexQualifiers = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IQualifier? item = QualifierFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexQualifiers));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "qualifiers"));
                                                return null;
                                            }

                                            theQualifiers.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexQualifiers++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Capability, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Capability " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Capability " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Capability " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                return new Aas.Capability(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications);
            }  // internal static Aas.Capability? CapabilityFromSequence

            /// <summary>
            /// Deserialize an instance of class Capability from an XML element.
            /// </summary>
            internal static Aas.Capability? CapabilityFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Capability, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Capability, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "capability")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Capability " +
                        $"with element name capability, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Capability? result = (
                    CapabilityFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Capability, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Capability, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Capability? CapabilityFromElement

            /// <summary>
            /// Deserialize an instance of class ConceptDescription from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.ConceptDescription? ConceptDescriptionFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IExtension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<ILangStringNameType>? theDisplayName = null;
                List<ILangStringTextType>? theDescription = null;
                IAdministrativeInformation? theAdministration = null;
                string? theId = null;
                List<IEmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<IReference>? theIsCaseOf = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class ConceptDescription, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "extensions":
                                {
                                    theExtensions = new List<IExtension>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexExtensions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IExtension? item = ExtensionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexExtensions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "extensions"));
                                                return null;
                                            }

                                            theExtensions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexExtensions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "category":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theCategory = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Category of an instance of class ConceptDescription, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theCategory = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Category of an instance of class ConceptDescription " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "category"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "idShort":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theIdShort = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property IdShort of an instance of class ConceptDescription, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theIdShort = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property IdShort of an instance of class ConceptDescription " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "idShort"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "displayName":
                                {
                                    theDisplayName = new List<ILangStringNameType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDisplayName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringNameType? item = LangStringNameTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDisplayName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "displayName"));
                                                return null;
                                            }

                                            theDisplayName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDisplayName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "description":
                                {
                                    theDescription = new List<ILangStringTextType>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDescription = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringTextType? item = LangStringTextTypeFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDescription));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "description"));
                                                return null;
                                            }

                                            theDescription.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDescription++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "administration":
                                {
                                    theAdministration = AdministrativeInformationFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "administration"));
                                        return null;
                                    }
                                    break;
                                }
                            case "id":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theId = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Id of an instance of class ConceptDescription, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theId = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Id of an instance of class ConceptDescription " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "id"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "embeddedDataSpecifications":
                                {
                                    theEmbeddedDataSpecifications = new List<IEmbeddedDataSpecification>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexEmbeddedDataSpecifications = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IEmbeddedDataSpecification? item = EmbeddedDataSpecificationFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexEmbeddedDataSpecifications));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "embeddedDataSpecifications"));
                                                return null;
                                            }

                                            theEmbeddedDataSpecifications.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexEmbeddedDataSpecifications++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "isCaseOf":
                                {
                                    theIsCaseOf = new List<IReference>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexIsCaseOf = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IReference? item = ReferenceFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexIsCaseOf));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "isCaseOf"));
                                                return null;
                                            }

                                            theIsCaseOf.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexIsCaseOf++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class ConceptDescription, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ConceptDescription " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ConceptDescription " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ConceptDescription " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "The required property Id has not been given " +
                        "in the XML representation of an instance of class ConceptDescription");
                    return null;
                }

                return new Aas.ConceptDescription(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theAdministration,
                    theEmbeddedDataSpecifications,
                    theIsCaseOf);
            }  // internal static Aas.ConceptDescription? ConceptDescriptionFromSequence

            /// <summary>
            /// Deserialize an instance of class ConceptDescription from an XML element.
            /// </summary>
            internal static Aas.ConceptDescription? ConceptDescriptionFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ConceptDescription, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ConceptDescription, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "conceptDescription")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class ConceptDescription " +
                        $"with element name conceptDescription, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.ConceptDescription? result = (
                    ConceptDescriptionFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ConceptDescription, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ConceptDescription, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.ConceptDescription? ConceptDescriptionFromElement

            /// <summary>
            /// Deserialize an instance of class Reference from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Reference? ReferenceFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                ReferenceTypes? theType = null;
                IReference? theReferredSemanticId = null;
                List<IKey>? theKeys = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Reference, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "type":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Type of an instance of class Reference " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "type"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property Type of an instance of class Reference, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textType;
                                    try
                                    {
                                        textType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property Type of an instance of class Reference " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "type"));
                                        return null;
                                    }

                                    theType = Stringification.ReferenceTypesFromString(
                                        textType);

                                    if (theType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property Type of an instance of class Reference " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "type"));
                                        return null;
                                    }
                                    break;
                                }
                            case "referredSemanticId":
                                {
                                    theReferredSemanticId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "referredSemanticId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "keys":
                                {
                                    theKeys = new List<IKey>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexKeys = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IKey? item = KeyFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexKeys));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "keys"));
                                                return null;
                                            }

                                            theKeys.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexKeys++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Reference, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Reference " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Reference " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Reference " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "The required property Type has not been given " +
                        "in the XML representation of an instance of class Reference");
                    return null;
                }

                if (theKeys == null)
                {
                    error = new Reporting.Error(
                        "The required property Keys has not been given " +
                        "in the XML representation of an instance of class Reference");
                    return null;
                }

                return new Aas.Reference(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theKeys
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theReferredSemanticId);
            }  // internal static Aas.Reference? ReferenceFromSequence

            /// <summary>
            /// Deserialize an instance of class Reference from an XML element.
            /// </summary>
            internal static Aas.Reference? ReferenceFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Reference, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Reference, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "reference")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Reference " +
                        $"with element name reference, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Reference? result = (
                    ReferenceFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Reference, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Reference, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Reference? ReferenceFromElement

            /// <summary>
            /// Deserialize an instance of class Key from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Key? KeyFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                KeyTypes? theType = null;
                string? theValue = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Key, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "type":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Type of an instance of class Key " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "type"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property Type of an instance of class Key, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textType;
                                    try
                                    {
                                        textType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property Type of an instance of class Key " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "type"));
                                        return null;
                                    }

                                    theType = Stringification.KeyTypesFromString(
                                        textType);

                                    if (theType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property Type of an instance of class Key " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "type"));
                                        return null;
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class Key, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class Key " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Key, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Key " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Key " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Key " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "The required property Type has not been given " +
                        "in the XML representation of an instance of class Key");
                    return null;
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class Key");
                    return null;
                }

                return new Aas.Key(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.Key? KeyFromSequence

            /// <summary>
            /// Deserialize an instance of class Key from an XML element.
            /// </summary>
            internal static Aas.Key? KeyFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Key, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Key, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "key")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Key " +
                        $"with element name key, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Key? result = (
                    KeyFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Key, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Key, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Key? KeyFromElement

            /// <summary>
            /// Deserialize an instance of IAbstractLangString from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IAbstractLangString? IAbstractLangStringFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "langStringDefinitionTypeIec61360":
                        return LangStringDefinitionTypeIec61360FromElement(
                            reader, out error);
                    case "langStringNameType":
                        return LangStringNameTypeFromElement(
                            reader, out error);
                    case "langStringPreferredNameTypeIec61360":
                        return LangStringPreferredNameTypeIec61360FromElement(
                            reader, out error);
                    case "langStringShortNameTypeIec61360":
                        return LangStringShortNameTypeIec61360FromElement(
                            reader, out error);
                    case "langStringTextType":
                        return LangStringTextTypeFromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IAbstractLangString? IAbstractLangStringFromElement

            /// <summary>
            /// Deserialize an instance of class LangStringNameType from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.LangStringNameType? LangStringNameTypeFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                string? theLanguage = null;
                string? theText = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class LangStringNameType, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "language":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theLanguage = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Language of an instance of class LangStringNameType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theLanguage = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Language of an instance of class LangStringNameType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "language"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "text":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theText = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Text of an instance of class LangStringNameType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theText = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Text of an instance of class LangStringNameType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "text"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class LangStringNameType, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringNameType " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringNameType " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringNameType " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theLanguage == null)
                {
                    error = new Reporting.Error(
                        "The required property Language has not been given " +
                        "in the XML representation of an instance of class LangStringNameType");
                    return null;
                }

                if (theText == null)
                {
                    error = new Reporting.Error(
                        "The required property Text has not been given " +
                        "in the XML representation of an instance of class LangStringNameType");
                    return null;
                }

                return new Aas.LangStringNameType(
                    theLanguage
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theText
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LangStringNameType? LangStringNameTypeFromSequence

            /// <summary>
            /// Deserialize an instance of class LangStringNameType from an XML element.
            /// </summary>
            internal static Aas.LangStringNameType? LangStringNameTypeFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringNameType, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringNameType, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "langStringNameType")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LangStringNameType " +
                        $"with element name langStringNameType, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.LangStringNameType? result = (
                    LangStringNameTypeFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringNameType, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringNameType, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.LangStringNameType? LangStringNameTypeFromElement

            /// <summary>
            /// Deserialize an instance of class LangStringTextType from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.LangStringTextType? LangStringTextTypeFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                string? theLanguage = null;
                string? theText = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class LangStringTextType, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "language":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theLanguage = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Language of an instance of class LangStringTextType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theLanguage = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Language of an instance of class LangStringTextType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "language"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "text":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theText = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Text of an instance of class LangStringTextType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theText = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Text of an instance of class LangStringTextType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "text"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class LangStringTextType, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringTextType " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringTextType " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringTextType " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theLanguage == null)
                {
                    error = new Reporting.Error(
                        "The required property Language has not been given " +
                        "in the XML representation of an instance of class LangStringTextType");
                    return null;
                }

                if (theText == null)
                {
                    error = new Reporting.Error(
                        "The required property Text has not been given " +
                        "in the XML representation of an instance of class LangStringTextType");
                    return null;
                }

                return new Aas.LangStringTextType(
                    theLanguage
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theText
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LangStringTextType? LangStringTextTypeFromSequence

            /// <summary>
            /// Deserialize an instance of class LangStringTextType from an XML element.
            /// </summary>
            internal static Aas.LangStringTextType? LangStringTextTypeFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringTextType, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringTextType, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "langStringTextType")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LangStringTextType " +
                        $"with element name langStringTextType, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.LangStringTextType? result = (
                    LangStringTextTypeFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringTextType, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringTextType, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.LangStringTextType? LangStringTextTypeFromElement

            /// <summary>
            /// Deserialize an instance of class Environment from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.Environment? EnvironmentFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IAssetAdministrationShell>? theAssetAdministrationShells = null;
                List<ISubmodel>? theSubmodels = null;
                List<IConceptDescription>? theConceptDescriptions = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class Environment, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "assetAdministrationShells":
                                {
                                    theAssetAdministrationShells = new List<IAssetAdministrationShell>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexAssetAdministrationShells = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IAssetAdministrationShell? item = AssetAdministrationShellFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexAssetAdministrationShells));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "assetAdministrationShells"));
                                                return null;
                                            }

                                            theAssetAdministrationShells.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexAssetAdministrationShells++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "submodels":
                                {
                                    theSubmodels = new List<ISubmodel>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexSubmodels = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ISubmodel? item = SubmodelFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexSubmodels));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "submodels"));
                                                return null;
                                            }

                                            theSubmodels.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexSubmodels++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "conceptDescriptions":
                                {
                                    theConceptDescriptions = new List<IConceptDescription>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexConceptDescriptions = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IConceptDescription? item = ConceptDescriptionFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexConceptDescriptions));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "conceptDescriptions"));
                                                return null;
                                            }

                                            theConceptDescriptions.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexConceptDescriptions++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class Environment, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Environment " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Environment " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class Environment " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                return new Aas.Environment(
                    theAssetAdministrationShells,
                    theSubmodels,
                    theConceptDescriptions);
            }  // internal static Aas.Environment? EnvironmentFromSequence

            /// <summary>
            /// Deserialize an instance of class Environment from an XML element.
            /// </summary>
            internal static Aas.Environment? EnvironmentFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Environment, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Environment, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "environment")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Environment " +
                        $"with element name environment, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.Environment? result = (
                    EnvironmentFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Environment, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class Environment, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.Environment? EnvironmentFromElement

            /// <summary>
            /// Deserialize an instance of IDataSpecificationContent from an XML element.
            /// </summary>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            internal static Aas.IDataSpecificationContent? IDataSpecificationContentFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                switch (elementName)
                {
                    case "dataSpecificationIec61360":
                        return DataSpecificationIec61360FromElement(
                            reader, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected element with the name {elementName}");
                        return null;
                }
            }  // internal static Aas.IDataSpecificationContent? IDataSpecificationContentFromElement

            /// <summary>
            /// Deserialize an instance of class EmbeddedDataSpecification from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.EmbeddedDataSpecification? EmbeddedDataSpecificationFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                IReference? theDataSpecification = null;
                IDataSpecificationContent? theDataSpecificationContent = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class EmbeddedDataSpecification, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "dataSpecification":
                                {
                                    theDataSpecification = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "dataSpecification"));
                                        return null;
                                    }
                                    break;
                                }
                            case "dataSpecificationContent":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            $"Expected an XML element within the element {elementName} representing " +
                                            "the property DataSpecificationContent of an instance of class EmbeddedDataSpecification, " +
                                            "but encountered a self-closing element {elementName}");
                                        return null;
                                    }

                                    // We need to skip the whitespace here in order to be able to look ahead
                                    // the discriminator element shortly.
                                    SkipNoneWhitespaceAndComments(reader);

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            $"Expected an XML element within the element {elementName} representing " +
                                            "the property DataSpecificationContent of an instance of class EmbeddedDataSpecification, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    // Try to look ahead the discriminator name;
                                    // we need this name only for the error reporting below.
                                    // IDataSpecificationContentFromElement will perform more sophisticated
                                    // checks.
                                    string? discriminatorElementName = null;
                                    if (reader.NodeType == Xml.XmlNodeType.Element)
                                    {
                                        discriminatorElementName = reader.LocalName;
                                    }

                                    theDataSpecificationContent = IDataSpecificationContentFromElement(
                                        reader, out error);

                                    if (error != null)
                                    {
                                        if (discriminatorElementName != null)
                                        {
                                            error.PrependSegment(
                                                new Reporting.NameSegment(
                                                    discriminatorElementName));
                                        }

                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "dataSpecificationContent"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class EmbeddedDataSpecification, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class EmbeddedDataSpecification " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class EmbeddedDataSpecification " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class EmbeddedDataSpecification " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theDataSpecification == null)
                {
                    error = new Reporting.Error(
                        "The required property DataSpecification has not been given " +
                        "in the XML representation of an instance of class EmbeddedDataSpecification");
                    return null;
                }

                if (theDataSpecificationContent == null)
                {
                    error = new Reporting.Error(
                        "The required property DataSpecificationContent has not been given " +
                        "in the XML representation of an instance of class EmbeddedDataSpecification");
                    return null;
                }

                return new Aas.EmbeddedDataSpecification(
                    theDataSpecification
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecificationContent
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.EmbeddedDataSpecification? EmbeddedDataSpecificationFromSequence

            /// <summary>
            /// Deserialize an instance of class EmbeddedDataSpecification from an XML element.
            /// </summary>
            internal static Aas.EmbeddedDataSpecification? EmbeddedDataSpecificationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class EmbeddedDataSpecification, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class EmbeddedDataSpecification, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "embeddedDataSpecification")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class EmbeddedDataSpecification " +
                        $"with element name embeddedDataSpecification, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.EmbeddedDataSpecification? result = (
                    EmbeddedDataSpecificationFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class EmbeddedDataSpecification, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class EmbeddedDataSpecification, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.EmbeddedDataSpecification? EmbeddedDataSpecificationFromElement

            /// <summary>
            /// Deserialize an instance of class LevelType from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.LevelType? LevelTypeFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                bool? theMin = null;
                bool? theNom = null;
                bool? theTyp = null;
                bool? theMax = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class LevelType, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "min":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Min of an instance of class LevelType " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "min"));
                                        return null;
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Min of an instance of class LevelType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theMin = reader.ReadContentAsBoolean();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Min of an instance of class LevelType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "min"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "nom":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Nom of an instance of class LevelType " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "nom"));
                                        return null;
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Nom of an instance of class LevelType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theNom = reader.ReadContentAsBoolean();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Nom of an instance of class LevelType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "nom"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "typ":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Typ of an instance of class LevelType " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "typ"));
                                        return null;
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Typ of an instance of class LevelType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theTyp = reader.ReadContentAsBoolean();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Typ of an instance of class LevelType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "typ"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "max":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property Max of an instance of class LevelType " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "max"));
                                        return null;
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Max of an instance of class LevelType, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theMax = reader.ReadContentAsBoolean();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Max of an instance of class LevelType " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "max"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class LevelType, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LevelType " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LevelType " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LevelType " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theMin == null)
                {
                    error = new Reporting.Error(
                        "The required property Min has not been given " +
                        "in the XML representation of an instance of class LevelType");
                    return null;
                }

                if (theNom == null)
                {
                    error = new Reporting.Error(
                        "The required property Nom has not been given " +
                        "in the XML representation of an instance of class LevelType");
                    return null;
                }

                if (theTyp == null)
                {
                    error = new Reporting.Error(
                        "The required property Typ has not been given " +
                        "in the XML representation of an instance of class LevelType");
                    return null;
                }

                if (theMax == null)
                {
                    error = new Reporting.Error(
                        "The required property Max has not been given " +
                        "in the XML representation of an instance of class LevelType");
                    return null;
                }

                return new Aas.LevelType(
                    theMin
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theNom
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theTyp
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theMax
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LevelType? LevelTypeFromSequence

            /// <summary>
            /// Deserialize an instance of class LevelType from an XML element.
            /// </summary>
            internal static Aas.LevelType? LevelTypeFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LevelType, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LevelType, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "levelType")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LevelType " +
                        $"with element name levelType, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.LevelType? result = (
                    LevelTypeFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LevelType, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LevelType, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.LevelType? LevelTypeFromElement

            /// <summary>
            /// Deserialize an instance of class ValueReferencePair from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.ValueReferencePair? ValueReferencePairFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                string? theValue = null;
                IReference? theValueId = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class ValueReferencePair, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class ValueReferencePair, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class ValueReferencePair " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "valueId":
                                {
                                    theValueId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueId"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class ValueReferencePair, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ValueReferencePair " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ValueReferencePair " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ValueReferencePair " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class ValueReferencePair");
                    return null;
                }

                if (theValueId == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueId has not been given " +
                        "in the XML representation of an instance of class ValueReferencePair");
                    return null;
                }

                return new Aas.ValueReferencePair(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValueId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.ValueReferencePair? ValueReferencePairFromSequence

            /// <summary>
            /// Deserialize an instance of class ValueReferencePair from an XML element.
            /// </summary>
            internal static Aas.ValueReferencePair? ValueReferencePairFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ValueReferencePair, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ValueReferencePair, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "valueReferencePair")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class ValueReferencePair " +
                        $"with element name valueReferencePair, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.ValueReferencePair? result = (
                    ValueReferencePairFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ValueReferencePair, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ValueReferencePair, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.ValueReferencePair? ValueReferencePairFromElement

            /// <summary>
            /// Deserialize an instance of class ValueList from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.ValueList? ValueListFromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<IValueReferencePair>? theValueReferencePairs = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class ValueList, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "valueReferencePairs":
                                {
                                    theValueReferencePairs = new List<IValueReferencePair>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexValueReferencePairs = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            IValueReferencePair? item = ValueReferencePairFromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexValueReferencePairs));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "valueReferencePairs"));
                                                return null;
                                            }

                                            theValueReferencePairs.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexValueReferencePairs++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class ValueList, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ValueList " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ValueList " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class ValueList " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theValueReferencePairs == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueReferencePairs has not been given " +
                        "in the XML representation of an instance of class ValueList");
                    return null;
                }

                return new Aas.ValueList(
                    theValueReferencePairs
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.ValueList? ValueListFromSequence

            /// <summary>
            /// Deserialize an instance of class ValueList from an XML element.
            /// </summary>
            internal static Aas.ValueList? ValueListFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ValueList, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ValueList, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "valueList")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class ValueList " +
                        $"with element name valueList, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.ValueList? result = (
                    ValueListFromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ValueList, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class ValueList, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.ValueList? ValueListFromElement

            /// <summary>
            /// Deserialize an instance of class LangStringPreferredNameTypeIec61360 from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.LangStringPreferredNameTypeIec61360? LangStringPreferredNameTypeIec61360FromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                string? theLanguage = null;
                string? theText = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class LangStringPreferredNameTypeIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "language":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theLanguage = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Language of an instance of class LangStringPreferredNameTypeIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theLanguage = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Language of an instance of class LangStringPreferredNameTypeIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "language"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "text":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theText = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Text of an instance of class LangStringPreferredNameTypeIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theText = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Text of an instance of class LangStringPreferredNameTypeIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "text"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class LangStringPreferredNameTypeIec61360, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringPreferredNameTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringPreferredNameTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringPreferredNameTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theLanguage == null)
                {
                    error = new Reporting.Error(
                        "The required property Language has not been given " +
                        "in the XML representation of an instance of class LangStringPreferredNameTypeIec61360");
                    return null;
                }

                if (theText == null)
                {
                    error = new Reporting.Error(
                        "The required property Text has not been given " +
                        "in the XML representation of an instance of class LangStringPreferredNameTypeIec61360");
                    return null;
                }

                return new Aas.LangStringPreferredNameTypeIec61360(
                    theLanguage
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theText
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LangStringPreferredNameTypeIec61360? LangStringPreferredNameTypeIec61360FromSequence

            /// <summary>
            /// Deserialize an instance of class LangStringPreferredNameTypeIec61360 from an XML element.
            /// </summary>
            internal static Aas.LangStringPreferredNameTypeIec61360? LangStringPreferredNameTypeIec61360FromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringPreferredNameTypeIec61360, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringPreferredNameTypeIec61360, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "langStringPreferredNameTypeIec61360")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LangStringPreferredNameTypeIec61360 " +
                        $"with element name langStringPreferredNameTypeIec61360, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.LangStringPreferredNameTypeIec61360? result = (
                    LangStringPreferredNameTypeIec61360FromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringPreferredNameTypeIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringPreferredNameTypeIec61360, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.LangStringPreferredNameTypeIec61360? LangStringPreferredNameTypeIec61360FromElement

            /// <summary>
            /// Deserialize an instance of class LangStringShortNameTypeIec61360 from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.LangStringShortNameTypeIec61360? LangStringShortNameTypeIec61360FromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                string? theLanguage = null;
                string? theText = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class LangStringShortNameTypeIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "language":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theLanguage = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Language of an instance of class LangStringShortNameTypeIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theLanguage = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Language of an instance of class LangStringShortNameTypeIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "language"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "text":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theText = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Text of an instance of class LangStringShortNameTypeIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theText = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Text of an instance of class LangStringShortNameTypeIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "text"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class LangStringShortNameTypeIec61360, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringShortNameTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringShortNameTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringShortNameTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theLanguage == null)
                {
                    error = new Reporting.Error(
                        "The required property Language has not been given " +
                        "in the XML representation of an instance of class LangStringShortNameTypeIec61360");
                    return null;
                }

                if (theText == null)
                {
                    error = new Reporting.Error(
                        "The required property Text has not been given " +
                        "in the XML representation of an instance of class LangStringShortNameTypeIec61360");
                    return null;
                }

                return new Aas.LangStringShortNameTypeIec61360(
                    theLanguage
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theText
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LangStringShortNameTypeIec61360? LangStringShortNameTypeIec61360FromSequence

            /// <summary>
            /// Deserialize an instance of class LangStringShortNameTypeIec61360 from an XML element.
            /// </summary>
            internal static Aas.LangStringShortNameTypeIec61360? LangStringShortNameTypeIec61360FromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringShortNameTypeIec61360, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringShortNameTypeIec61360, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "langStringShortNameTypeIec61360")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LangStringShortNameTypeIec61360 " +
                        $"with element name langStringShortNameTypeIec61360, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.LangStringShortNameTypeIec61360? result = (
                    LangStringShortNameTypeIec61360FromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringShortNameTypeIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringShortNameTypeIec61360, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.LangStringShortNameTypeIec61360? LangStringShortNameTypeIec61360FromElement

            /// <summary>
            /// Deserialize an instance of class LangStringDefinitionTypeIec61360 from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.LangStringDefinitionTypeIec61360? LangStringDefinitionTypeIec61360FromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                string? theLanguage = null;
                string? theText = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class LangStringDefinitionTypeIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "language":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theLanguage = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Language of an instance of class LangStringDefinitionTypeIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theLanguage = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Language of an instance of class LangStringDefinitionTypeIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "language"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "text":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theText = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Text of an instance of class LangStringDefinitionTypeIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theText = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Text of an instance of class LangStringDefinitionTypeIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "text"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class LangStringDefinitionTypeIec61360, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringDefinitionTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringDefinitionTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class LangStringDefinitionTypeIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (theLanguage == null)
                {
                    error = new Reporting.Error(
                        "The required property Language has not been given " +
                        "in the XML representation of an instance of class LangStringDefinitionTypeIec61360");
                    return null;
                }

                if (theText == null)
                {
                    error = new Reporting.Error(
                        "The required property Text has not been given " +
                        "in the XML representation of an instance of class LangStringDefinitionTypeIec61360");
                    return null;
                }

                return new Aas.LangStringDefinitionTypeIec61360(
                    theLanguage
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theText
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LangStringDefinitionTypeIec61360? LangStringDefinitionTypeIec61360FromSequence

            /// <summary>
            /// Deserialize an instance of class LangStringDefinitionTypeIec61360 from an XML element.
            /// </summary>
            internal static Aas.LangStringDefinitionTypeIec61360? LangStringDefinitionTypeIec61360FromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringDefinitionTypeIec61360, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringDefinitionTypeIec61360, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "langStringDefinitionTypeIec61360")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LangStringDefinitionTypeIec61360 " +
                        $"with element name langStringDefinitionTypeIec61360, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.LangStringDefinitionTypeIec61360? result = (
                    LangStringDefinitionTypeIec61360FromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringDefinitionTypeIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class LangStringDefinitionTypeIec61360, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.LangStringDefinitionTypeIec61360? LangStringDefinitionTypeIec61360FromElement

            /// <summary>
            /// Deserialize an instance of class DataSpecificationIec61360 from a sequence of XML elements.
            /// </summary>
            /// <remarks>
            /// If <paramref name="isEmptySequence" /> is set, we should try to deserialize
            /// the instance from an empty sequence. That is, the parent element
            /// was a self-closing element.
            /// </remarks>
            internal static Aas.DataSpecificationIec61360? DataSpecificationIec61360FromSequence(
                Xml.XmlReader reader,
                bool isEmptySequence,
                out Reporting.Error? error)
            {
                error = null;

                List<ILangStringPreferredNameTypeIec61360>? thePreferredName = null;
                List<ILangStringShortNameTypeIec61360>? theShortName = null;
                string? theUnit = null;
                IReference? theUnitId = null;
                string? theSourceOfDefinition = null;
                string? theSymbol = null;
                DataTypeIec61360? theDataType = null;
                List<ILangStringDefinitionTypeIec61360>? theDefinition = null;
                string? theValueFormat = null;
                IValueList? theValueList = null;
                string? theValue = null;
                ILevelType? theLevelType = null;

                if (!isEmptySequence)
                {
                    SkipNoneWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML element representing " +
                            "a property of an instance of class DataSpecificationIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }
                    while (reader.NodeType == Xml.XmlNodeType.Element)
                    {
                        string elementName = TryElementName(
                            reader, out error);
                        if (error != null)
                        {
                            return null;
                        }

                        bool isEmptyProperty = reader.IsEmptyElement;

                        // Skip the expected element
                        reader.Read();

                        switch (elementName)
                        {
                            case "preferredName":
                                {
                                    thePreferredName = new List<ILangStringPreferredNameTypeIec61360>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexPreferredName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringPreferredNameTypeIec61360? item = LangStringPreferredNameTypeIec61360FromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexPreferredName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "preferredName"));
                                                return null;
                                            }

                                            thePreferredName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexPreferredName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "shortName":
                                {
                                    theShortName = new List<ILangStringShortNameTypeIec61360>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexShortName = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringShortNameTypeIec61360? item = LangStringShortNameTypeIec61360FromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexShortName));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "shortName"));
                                                return null;
                                            }

                                            theShortName.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexShortName++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "unit":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theUnit = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Unit of an instance of class DataSpecificationIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theUnit = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Unit of an instance of class DataSpecificationIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "unit"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "unitId":
                                {
                                    theUnitId = ReferenceFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "unitId"));
                                        return null;
                                    }
                                    break;
                                }
                            case "sourceOfDefinition":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theSourceOfDefinition = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property SourceOfDefinition of an instance of class DataSpecificationIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theSourceOfDefinition = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property SourceOfDefinition of an instance of class DataSpecificationIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "sourceOfDefinition"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "symbol":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theSymbol = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Symbol of an instance of class DataSpecificationIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theSymbol = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Symbol of an instance of class DataSpecificationIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "symbol"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "dataType":
                                {
                                    if (isEmptyProperty)
                                    {
                                        error = new Reporting.Error(
                                            "The property DataType of an instance of class DataSpecificationIec61360 " +
                                            "can not be de-serialized from a self-closing element " +
                                            "since it needs content");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "dataType"));
                                        return null;
                                    }

                                    if (reader.EOF)
                                    {
                                        error = new Reporting.Error(
                                            "Expected an XML content representing " +
                                            "the property DataType of an instance of class DataSpecificationIec61360, " +
                                            "but reached the end-of-file");
                                        return null;
                                    }

                                    string textDataType;
                                    try
                                    {
                                        textDataType = reader.ReadContentAsString();
                                    }
                                    catch (System.FormatException exception)
                                    {
                                        error = new Reporting.Error(
                                            "The property DataType of an instance of class DataSpecificationIec61360 " +
                                            $"could not be de-serialized as a string: {exception}");
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "dataType"));
                                        return null;
                                    }

                                    theDataType = Stringification.DataTypeIec61360FromString(
                                        textDataType);

                                    if (theDataType == null)
                                    {
                                        error = new Reporting.Error(
                                            "The property DataType of an instance of class DataSpecificationIec61360 " +
                                            "could not be de-serialized from an unexpected enumeration literal: " +
                                            textDataType);
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "dataType"));
                                        return null;
                                    }
                                    break;
                                }
                            case "definition":
                                {
                                    theDefinition = new List<ILangStringDefinitionTypeIec61360>();

                                    if (!isEmptyProperty)
                                    {
                                        SkipNoneWhitespaceAndComments(reader);

                                        int indexDefinition = 0;
                                        while (reader.NodeType == Xml.XmlNodeType.Element)
                                        {
                                            ILangStringDefinitionTypeIec61360? item = LangStringDefinitionTypeIec61360FromElement(
                                                reader, out error);

                                            if (error != null)
                                            {
                                                error.PrependSegment(
                                                    new Reporting.IndexSegment(
                                                        indexDefinition));
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "definition"));
                                                return null;
                                            }

                                            theDefinition.Add(
                                                item
                                                    ?? throw new System.InvalidOperationException(
                                                        "Unexpected item null when error null"));

                                            indexDefinition++;
                                            SkipNoneWhitespaceAndComments(reader);
                                        }
                                    }
                                    break;
                                }
                            case "valueFormat":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValueFormat = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property ValueFormat of an instance of class DataSpecificationIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValueFormat = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property ValueFormat of an instance of class DataSpecificationIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "valueFormat"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "valueList":
                                {
                                    theValueList = ValueListFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueList"));
                                        return null;
                                    }
                                    break;
                                }
                            case "value":
                                {
                                    if (isEmptyProperty)
                                    {
                                        theValue = "";
                                    }
                                    else
                                    {
                                        if (reader.EOF)
                                        {
                                            error = new Reporting.Error(
                                                "Expected an XML content representing " +
                                                "the property Value of an instance of class DataSpecificationIec61360, " +
                                                "but reached the end-of-file");
                                            return null;
                                        }

                                        try
                                        {
                                            theValue = reader.ReadContentAsString();
                                        }
                                        catch (System.Exception exception)
                                        {
                                            if (exception is System.FormatException
                                                || exception is System.Xml.XmlException)
                                            {
                                                error = new Reporting.Error(
                                                    "The property Value of an instance of class DataSpecificationIec61360 " +
                                                    $"could not be de-serialized: {exception.Message}");
                                                error.PrependSegment(
                                                    new Reporting.NameSegment(
                                                        "value"));
                                                return null;
                                            }

                                            throw;
                                        }
                                    }
                                    break;
                                }
                            case "levelType":
                                {
                                    theLevelType = LevelTypeFromSequence(
                                        reader, isEmptyProperty, out error);

                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "levelType"));
                                        return null;
                                    }
                                    break;
                                }
                            default:
                                error = new Reporting.Error(
                                    "We expected properties of the class DataSpecificationIec61360, " +
                                    "but got an unexpected element " +
                                    $"with the name {elementName}");
                                return null;
                        }

                        SkipNoneWhitespaceAndComments(reader);

                        if (!isEmptyProperty)
                        {
                            // Read the end element

                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class DataSpecificationIec61360 " +
                                    $"with the element name {elementName}, " +
                                    "but got the end-of-file.");
                                return null;
                            }
                            if (reader.NodeType != Xml.XmlNodeType.EndElement)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class DataSpecificationIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the node of type {reader.NodeType} " +
                                    $"with the value {reader.Value}");
                                return null;
                            }

                            string endElementName = TryElementName(
                                reader, out error);
                            if (error != null)
                            {
                                return null;
                            }

                            if (endElementName != elementName)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML end element to conclude a property of class DataSpecificationIec61360 " +
                                    $"with the element name {elementName}, " +
                                    $"but got the end element with the name {reader.Name}");
                                return null;
                            }
                            // Skip the expected end element
                            reader.Read();

                            SkipNoneWhitespaceAndComments(reader);
                        }

                        if (reader.EOF)
                        {
                            break;
                        }
                    }
                }

                if (thePreferredName == null)
                {
                    error = new Reporting.Error(
                        "The required property PreferredName has not been given " +
                        "in the XML representation of an instance of class DataSpecificationIec61360");
                    return null;
                }

                return new Aas.DataSpecificationIec61360(
                    thePreferredName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theShortName,
                    theUnit,
                    theUnitId,
                    theSourceOfDefinition,
                    theSymbol,
                    theDataType,
                    theDefinition,
                    theValueFormat,
                    theValueList,
                    theValue,
                    theLevelType);
            }  // internal static Aas.DataSpecificationIec61360? DataSpecificationIec61360FromSequence

            /// <summary>
            /// Deserialize an instance of class DataSpecificationIec61360 from an XML element.
            /// </summary>
            internal static Aas.DataSpecificationIec61360? DataSpecificationIec61360FromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipNoneWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class DataSpecificationIec61360, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class DataSpecificationIec61360, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                string elementName = TryElementName(
                    reader, out error);
                if (error != null)
                {
                    return null;
                }

                if (elementName != "dataSpecificationIec61360")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class DataSpecificationIec61360 " +
                        $"with element name dataSpecificationIec61360, but got: {elementName}");
                    return null;
                }

                bool isEmptyElement = reader.IsEmptyElement;

                // Skip the element node and go to the content
                reader.Read();

                Aas.DataSpecificationIec61360? result = (
                    DataSpecificationIec61360FromSequence(
                        reader, isEmptyElement, out error));
                if (error != null)
                {
                    return null;
                }

                SkipNoneWhitespaceAndComments(reader);

                if (!isEmptyElement)
                {
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class DataSpecificationIec61360, " +
                            "but reached the end-of-file");
                        return null;
                    }

                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            "Expected an XML end element concluding an instance of class DataSpecificationIec61360, " +
                            $"but got a node of type {reader.NodeType} " +
                            $"with value {reader.Value}");
                        return null;
                    }

                    string endElementName = TryElementName(
                        reader, out error);
                    if (error != null)
                    {
                        return null;
                    }

                    if (endElementName != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element with an name {elementName}, " +
                            $"but got: {endElementName}");
                        return null;
                    }

                    // Skip the end element
                    reader.Read();
                }

                return result;
            }  // internal static Aas.DataSpecificationIec61360? DataSpecificationIec61360FromElement
        }  // internal static class DeserializeImplementation

        /// <summary>
        /// Represent a critical error during the deserialization.
        /// </summary>
        public class Exception : System.Exception
        {
            public readonly string Path;
            public readonly string Cause;
            public Exception(string path, string cause)
                : base($"{cause} at: {path}")
            {
                Path = path;
                Cause = cause;
            }
        }

        /// <summary>
        /// Deserialize instances of meta-model classes from XML.
        /// </summary>
        /// <example>
        /// Here is an example how to parse an instance of class IHasSemantics:
        /// <code>
        /// var reader = new System.Xml.XmlReader(/* some arguments */);
        /// Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom(
        ///     reader);
        /// </code>
        /// </example>
        ///
        /// <example>
        /// If the elements live in a namespace, you have to supply it. For example:
        /// <code>
        /// var reader = new System.Xml.XmlReader(/* some arguments */);
        /// Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom(
        ///     reader,
        ///     "http://www.example.com/5/12");
        /// </code>
        /// </example>
        public static class Deserialize
        {
            /// <summary>
            /// Deserialize an instance of IHasSemantics from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IHasSemantics.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasSemantics IHasSemanticsFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasSemantics? result = (
                    DeserializeImplementation.IHasSemanticsFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Extension from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Extension.
            /// </exception>
            public static Aas.Extension ExtensionFrom(
                Xml.XmlReader reader)
            {
                Aas.Extension? result = (
                    DeserializeImplementation.ExtensionFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasExtensions from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IHasExtensions.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasExtensions IHasExtensionsFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasExtensions? result = (
                    DeserializeImplementation.IHasExtensionsFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IReferable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IReferable.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IReferable IReferableFrom(
                Xml.XmlReader reader)
            {
                Aas.IReferable? result = (
                    DeserializeImplementation.IReferableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IIdentifiable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IIdentifiable.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IIdentifiable IIdentifiableFrom(
                Xml.XmlReader reader)
            {
                Aas.IIdentifiable? result = (
                    DeserializeImplementation.IIdentifiableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasKind from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IHasKind.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasKind IHasKindFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasKind? result = (
                    DeserializeImplementation.IHasKindFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasDataSpecification from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IHasDataSpecification.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasDataSpecification IHasDataSpecificationFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasDataSpecification? result = (
                    DeserializeImplementation.IHasDataSpecificationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AdministrativeInformation from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of AdministrativeInformation.
            /// </exception>
            public static Aas.AdministrativeInformation AdministrativeInformationFrom(
                Xml.XmlReader reader)
            {
                Aas.AdministrativeInformation? result = (
                    DeserializeImplementation.AdministrativeInformationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IQualifiable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IQualifiable.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IQualifiable IQualifiableFrom(
                Xml.XmlReader reader)
            {
                Aas.IQualifiable? result = (
                    DeserializeImplementation.IQualifiableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Qualifier from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Qualifier.
            /// </exception>
            public static Aas.Qualifier QualifierFrom(
                Xml.XmlReader reader)
            {
                Aas.Qualifier? result = (
                    DeserializeImplementation.QualifierFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetAdministrationShell from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of AssetAdministrationShell.
            /// </exception>
            public static Aas.AssetAdministrationShell AssetAdministrationShellFrom(
                Xml.XmlReader reader)
            {
                Aas.AssetAdministrationShell? result = (
                    DeserializeImplementation.AssetAdministrationShellFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetInformation from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of AssetInformation.
            /// </exception>
            public static Aas.AssetInformation AssetInformationFrom(
                Xml.XmlReader reader)
            {
                Aas.AssetInformation? result = (
                    DeserializeImplementation.AssetInformationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Resource from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Resource.
            /// </exception>
            public static Aas.Resource ResourceFrom(
                Xml.XmlReader reader)
            {
                Aas.Resource? result = (
                    DeserializeImplementation.ResourceFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SpecificAssetId from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of SpecificAssetId.
            /// </exception>
            public static Aas.SpecificAssetId SpecificAssetIdFrom(
                Xml.XmlReader reader)
            {
                Aas.SpecificAssetId? result = (
                    DeserializeImplementation.SpecificAssetIdFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Submodel from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Submodel.
            /// </exception>
            public static Aas.Submodel SubmodelFrom(
                Xml.XmlReader reader)
            {
                Aas.Submodel? result = (
                    DeserializeImplementation.SubmodelFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ISubmodelElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of ISubmodelElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.ISubmodelElement ISubmodelElementFrom(
                Xml.XmlReader reader)
            {
                Aas.ISubmodelElement? result = (
                    DeserializeImplementation.ISubmodelElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IRelationshipElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IRelationshipElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IRelationshipElement IRelationshipElementFrom(
                Xml.XmlReader reader)
            {
                Aas.IRelationshipElement? result = (
                    DeserializeImplementation.IRelationshipElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of RelationshipElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of RelationshipElement.
            /// </exception>
            public static Aas.RelationshipElement RelationshipElementFrom(
                Xml.XmlReader reader)
            {
                Aas.RelationshipElement? result = (
                    DeserializeImplementation.RelationshipElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SubmodelElementList from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of SubmodelElementList.
            /// </exception>
            public static Aas.SubmodelElementList SubmodelElementListFrom(
                Xml.XmlReader reader)
            {
                Aas.SubmodelElementList? result = (
                    DeserializeImplementation.SubmodelElementListFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SubmodelElementCollection from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of SubmodelElementCollection.
            /// </exception>
            public static Aas.SubmodelElementCollection SubmodelElementCollectionFrom(
                Xml.XmlReader reader)
            {
                Aas.SubmodelElementCollection? result = (
                    DeserializeImplementation.SubmodelElementCollectionFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IDataElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IDataElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IDataElement IDataElementFrom(
                Xml.XmlReader reader)
            {
                Aas.IDataElement? result = (
                    DeserializeImplementation.IDataElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Property from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Property.
            /// </exception>
            public static Aas.Property PropertyFrom(
                Xml.XmlReader reader)
            {
                Aas.Property? result = (
                    DeserializeImplementation.PropertyFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of MultiLanguageProperty from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of MultiLanguageProperty.
            /// </exception>
            public static Aas.MultiLanguageProperty MultiLanguagePropertyFrom(
                Xml.XmlReader reader)
            {
                Aas.MultiLanguageProperty? result = (
                    DeserializeImplementation.MultiLanguagePropertyFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Range from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Range.
            /// </exception>
            public static Aas.Range RangeFrom(
                Xml.XmlReader reader)
            {
                Aas.Range? result = (
                    DeserializeImplementation.RangeFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ReferenceElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of ReferenceElement.
            /// </exception>
            public static Aas.ReferenceElement ReferenceElementFrom(
                Xml.XmlReader reader)
            {
                Aas.ReferenceElement? result = (
                    DeserializeImplementation.ReferenceElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Blob from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Blob.
            /// </exception>
            public static Aas.Blob BlobFrom(
                Xml.XmlReader reader)
            {
                Aas.Blob? result = (
                    DeserializeImplementation.BlobFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of File from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of File.
            /// </exception>
            public static Aas.File FileFrom(
                Xml.XmlReader reader)
            {
                Aas.File? result = (
                    DeserializeImplementation.FileFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AnnotatedRelationshipElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of AnnotatedRelationshipElement.
            /// </exception>
            public static Aas.AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(
                Xml.XmlReader reader)
            {
                Aas.AnnotatedRelationshipElement? result = (
                    DeserializeImplementation.AnnotatedRelationshipElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Entity from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Entity.
            /// </exception>
            public static Aas.Entity EntityFrom(
                Xml.XmlReader reader)
            {
                Aas.Entity? result = (
                    DeserializeImplementation.EntityFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of EventPayload from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of EventPayload.
            /// </exception>
            public static Aas.EventPayload EventPayloadFrom(
                Xml.XmlReader reader)
            {
                Aas.EventPayload? result = (
                    DeserializeImplementation.EventPayloadFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IEventElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IEventElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IEventElement IEventElementFrom(
                Xml.XmlReader reader)
            {
                Aas.IEventElement? result = (
                    DeserializeImplementation.IEventElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of BasicEventElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of BasicEventElement.
            /// </exception>
            public static Aas.BasicEventElement BasicEventElementFrom(
                Xml.XmlReader reader)
            {
                Aas.BasicEventElement? result = (
                    DeserializeImplementation.BasicEventElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Operation from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Operation.
            /// </exception>
            public static Aas.Operation OperationFrom(
                Xml.XmlReader reader)
            {
                Aas.Operation? result = (
                    DeserializeImplementation.OperationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of OperationVariable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of OperationVariable.
            /// </exception>
            public static Aas.OperationVariable OperationVariableFrom(
                Xml.XmlReader reader)
            {
                Aas.OperationVariable? result = (
                    DeserializeImplementation.OperationVariableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Capability from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Capability.
            /// </exception>
            public static Aas.Capability CapabilityFrom(
                Xml.XmlReader reader)
            {
                Aas.Capability? result = (
                    DeserializeImplementation.CapabilityFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ConceptDescription from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of ConceptDescription.
            /// </exception>
            public static Aas.ConceptDescription ConceptDescriptionFrom(
                Xml.XmlReader reader)
            {
                Aas.ConceptDescription? result = (
                    DeserializeImplementation.ConceptDescriptionFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Reference from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Reference.
            /// </exception>
            public static Aas.Reference ReferenceFrom(
                Xml.XmlReader reader)
            {
                Aas.Reference? result = (
                    DeserializeImplementation.ReferenceFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Key from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Key.
            /// </exception>
            public static Aas.Key KeyFrom(
                Xml.XmlReader reader)
            {
                Aas.Key? result = (
                    DeserializeImplementation.KeyFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IAbstractLangString from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IAbstractLangString.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IAbstractLangString IAbstractLangStringFrom(
                Xml.XmlReader reader)
            {
                Aas.IAbstractLangString? result = (
                    DeserializeImplementation.IAbstractLangStringFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LangStringNameType from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of LangStringNameType.
            /// </exception>
            public static Aas.LangStringNameType LangStringNameTypeFrom(
                Xml.XmlReader reader)
            {
                Aas.LangStringNameType? result = (
                    DeserializeImplementation.LangStringNameTypeFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LangStringTextType from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of LangStringTextType.
            /// </exception>
            public static Aas.LangStringTextType LangStringTextTypeFrom(
                Xml.XmlReader reader)
            {
                Aas.LangStringTextType? result = (
                    DeserializeImplementation.LangStringTextTypeFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Environment from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of Environment.
            /// </exception>
            public static Aas.Environment EnvironmentFrom(
                Xml.XmlReader reader)
            {
                Aas.Environment? result = (
                    DeserializeImplementation.EnvironmentFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IDataSpecificationContent from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of IDataSpecificationContent.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IDataSpecificationContent IDataSpecificationContentFrom(
                Xml.XmlReader reader)
            {
                Aas.IDataSpecificationContent? result = (
                    DeserializeImplementation.IDataSpecificationContentFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of EmbeddedDataSpecification from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of EmbeddedDataSpecification.
            /// </exception>
            public static Aas.EmbeddedDataSpecification EmbeddedDataSpecificationFrom(
                Xml.XmlReader reader)
            {
                Aas.EmbeddedDataSpecification? result = (
                    DeserializeImplementation.EmbeddedDataSpecificationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LevelType from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of LevelType.
            /// </exception>
            public static Aas.LevelType LevelTypeFrom(
                Xml.XmlReader reader)
            {
                Aas.LevelType? result = (
                    DeserializeImplementation.LevelTypeFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ValueReferencePair from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of ValueReferencePair.
            /// </exception>
            public static Aas.ValueReferencePair ValueReferencePairFrom(
                Xml.XmlReader reader)
            {
                Aas.ValueReferencePair? result = (
                    DeserializeImplementation.ValueReferencePairFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ValueList from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of ValueList.
            /// </exception>
            public static Aas.ValueList ValueListFrom(
                Xml.XmlReader reader)
            {
                Aas.ValueList? result = (
                    DeserializeImplementation.ValueListFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LangStringPreferredNameTypeIec61360 from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of LangStringPreferredNameTypeIec61360.
            /// </exception>
            public static Aas.LangStringPreferredNameTypeIec61360 LangStringPreferredNameTypeIec61360From(
                Xml.XmlReader reader)
            {
                Aas.LangStringPreferredNameTypeIec61360? result = (
                    DeserializeImplementation.LangStringPreferredNameTypeIec61360FromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LangStringShortNameTypeIec61360 from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of LangStringShortNameTypeIec61360.
            /// </exception>
            public static Aas.LangStringShortNameTypeIec61360 LangStringShortNameTypeIec61360From(
                Xml.XmlReader reader)
            {
                Aas.LangStringShortNameTypeIec61360? result = (
                    DeserializeImplementation.LangStringShortNameTypeIec61360FromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LangStringDefinitionTypeIec61360 from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of LangStringDefinitionTypeIec61360.
            /// </exception>
            public static Aas.LangStringDefinitionTypeIec61360 LangStringDefinitionTypeIec61360From(
                Xml.XmlReader reader)
            {
                Aas.LangStringDefinitionTypeIec61360? result = (
                    DeserializeImplementation.LangStringDefinitionTypeIec61360FromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataSpecificationIec61360 from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when the element is not a valid XML
            /// representation of DataSpecificationIec61360.
            /// </exception>
            public static Aas.DataSpecificationIec61360 DataSpecificationIec61360From(
                Xml.XmlReader reader)
            {
                Aas.DataSpecificationIec61360? result = (
                    DeserializeImplementation.DataSpecificationIec61360FromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }
        }  // public static class Deserialize

        /// <summary>
        /// Serialize recursively the instances as XML elements.
        /// </summary>
        internal class VisitorWithWriter
            : Visitation.AbstractVisitorWithContext<Xml.XmlWriter>
        {
            private void ExtensionToSequence(
                Aas.IExtension that,
                Xml.XmlWriter writer)
            {
                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "name",
                    NS);

                writer.WriteValue(
                    that.Name);

                writer.WriteEndElement();

                if (that.ValueType != null)
                {
                    writer.WriteStartElement(
                        "valueType",
                        NS);

                    string? textValueType = Stringification.ToString(
                        that.ValueType);
                    writer.WriteValue(
                        textValueType
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration DataTypeDefXsd: " +
                                that.ValueType.ToString()));

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    writer.WriteValue(
                        that.Value);

                    writer.WriteEndElement();
                }

                if (that.RefersTo != null)
                {
                    writer.WriteStartElement(
                        "refersTo",
                        NS);

                    foreach (var item in that.RefersTo)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void ExtensionToSequence

            public override void VisitExtension(
                Aas.IExtension that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "extension",
                    NS);
                this.ExtensionToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AdministrativeInformationToSequence(
                Aas.IAdministrativeInformation that,
                Xml.XmlWriter writer)
            {
                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Version != null)
                {
                    writer.WriteStartElement(
                        "version",
                        NS);

                    writer.WriteValue(
                        that.Version);

                    writer.WriteEndElement();
                }

                if (that.Revision != null)
                {
                    writer.WriteStartElement(
                        "revision",
                        NS);

                    writer.WriteValue(
                        that.Revision);

                    writer.WriteEndElement();
                }

                if (that.Creator != null)
                {
                    writer.WriteStartElement(
                        "creator",
                        NS);

                    this.ReferenceToSequence(
                        that.Creator,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.TemplateId != null)
                {
                    writer.WriteStartElement(
                        "templateId",
                        NS);

                    writer.WriteValue(
                        that.TemplateId);

                    writer.WriteEndElement();
                }
            }  // private void AdministrativeInformationToSequence

            public override void VisitAdministrativeInformation(
                Aas.IAdministrativeInformation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "administrativeInformation",
                    NS);
                this.AdministrativeInformationToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void QualifierToSequence(
                Aas.IQualifier that,
                Xml.XmlWriter writer)
            {
                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind",
                        NS);

                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration QualifierKind: " +
                                that.Kind.ToString()));

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "type",
                    NS);

                writer.WriteValue(
                    that.Type);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "valueType",
                    NS);

                string? textValueType = Stringification.ToString(
                    that.ValueType);
                writer.WriteValue(
                    textValueType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration DataTypeDefXsd: " +
                            that.ValueType.ToString()));

                writer.WriteEndElement();

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    writer.WriteValue(
                        that.Value);

                    writer.WriteEndElement();
                }

                if (that.ValueId != null)
                {
                    writer.WriteStartElement(
                        "valueId",
                        NS);

                    this.ReferenceToSequence(
                        that.ValueId,
                        writer);

                    writer.WriteEndElement();
                }
            }  // private void QualifierToSequence

            public override void VisitQualifier(
                Aas.IQualifier that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "qualifier",
                    NS);
                this.QualifierToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AssetAdministrationShellToSequence(
                Aas.IAssetAdministrationShell that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Administration != null)
                {
                    writer.WriteStartElement(
                        "administration",
                        NS);

                    this.AdministrativeInformationToSequence(
                        that.Administration,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "id",
                    NS);

                writer.WriteValue(
                    that.Id);

                writer.WriteEndElement();

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.DerivedFrom != null)
                {
                    writer.WriteStartElement(
                        "derivedFrom",
                        NS);

                    this.ReferenceToSequence(
                        that.DerivedFrom,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "assetInformation",
                    NS);

                this.AssetInformationToSequence(
                    that.AssetInformation,
                    writer);

                writer.WriteEndElement();

                if (that.Submodels != null)
                {
                    writer.WriteStartElement(
                        "submodels",
                        NS);

                    foreach (var item in that.Submodels)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void AssetAdministrationShellToSequence

            public override void VisitAssetAdministrationShell(
                Aas.IAssetAdministrationShell that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "assetAdministrationShell",
                    NS);
                this.AssetAdministrationShellToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AssetInformationToSequence(
                Aas.IAssetInformation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "assetKind",
                    NS);

                string? textAssetKind = Stringification.ToString(
                    that.AssetKind);
                writer.WriteValue(
                    textAssetKind
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration AssetKind: " +
                            that.AssetKind.ToString()));

                writer.WriteEndElement();

                if (that.GlobalAssetId != null)
                {
                    writer.WriteStartElement(
                        "globalAssetId",
                        NS);

                    writer.WriteValue(
                        that.GlobalAssetId);

                    writer.WriteEndElement();
                }

                if (that.SpecificAssetIds != null)
                {
                    writer.WriteStartElement(
                        "specificAssetIds",
                        NS);

                    foreach (var item in that.SpecificAssetIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.AssetType != null)
                {
                    writer.WriteStartElement(
                        "assetType",
                        NS);

                    writer.WriteValue(
                        that.AssetType);

                    writer.WriteEndElement();
                }

                if (that.DefaultThumbnail != null)
                {
                    writer.WriteStartElement(
                        "defaultThumbnail",
                        NS);

                    this.ResourceToSequence(
                        that.DefaultThumbnail,
                        writer);

                    writer.WriteEndElement();
                }
            }  // private void AssetInformationToSequence

            public override void VisitAssetInformation(
                Aas.IAssetInformation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "assetInformation",
                    NS);
                this.AssetInformationToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ResourceToSequence(
                Aas.IResource that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "path",
                    NS);

                writer.WriteValue(
                    that.Path);

                writer.WriteEndElement();

                if (that.ContentType != null)
                {
                    writer.WriteStartElement(
                        "contentType",
                        NS);

                    writer.WriteValue(
                        that.ContentType);

                    writer.WriteEndElement();
                }
            }  // private void ResourceToSequence

            public override void VisitResource(
                Aas.IResource that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "resource",
                    NS);
                this.ResourceToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void SpecificAssetIdToSequence(
                Aas.ISpecificAssetId that,
                Xml.XmlWriter writer)
            {
                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "name",
                    NS);

                writer.WriteValue(
                    that.Name);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "value",
                    NS);

                writer.WriteValue(
                    that.Value);

                writer.WriteEndElement();

                if (that.ExternalSubjectId != null)
                {
                    writer.WriteStartElement(
                        "externalSubjectId",
                        NS);

                    this.ReferenceToSequence(
                        that.ExternalSubjectId,
                        writer);

                    writer.WriteEndElement();
                }
            }  // private void SpecificAssetIdToSequence

            public override void VisitSpecificAssetId(
                Aas.ISpecificAssetId that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "specificAssetId",
                    NS);
                this.SpecificAssetIdToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void SubmodelToSequence(
                Aas.ISubmodel that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Administration != null)
                {
                    writer.WriteStartElement(
                        "administration",
                        NS);

                    this.AdministrativeInformationToSequence(
                        that.Administration,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "id",
                    NS);

                writer.WriteValue(
                    that.Id);

                writer.WriteEndElement();

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind",
                        NS);

                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModellingKind: " +
                                that.Kind.ToString()));

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SubmodelElements != null)
                {
                    writer.WriteStartElement(
                        "submodelElements",
                        NS);

                    foreach (var item in that.SubmodelElements)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void SubmodelToSequence

            public override void VisitSubmodel(
                Aas.ISubmodel that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "submodel",
                    NS);
                this.SubmodelToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void RelationshipElementToSequence(
                Aas.IRelationshipElement that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "first",
                    NS);

                this.ReferenceToSequence(
                    that.First,
                    writer);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "second",
                    NS);

                this.ReferenceToSequence(
                    that.Second,
                    writer);

                writer.WriteEndElement();
            }  // private void RelationshipElementToSequence

            public override void VisitRelationshipElement(
                Aas.IRelationshipElement that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "relationshipElement",
                    NS);
                this.RelationshipElementToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void SubmodelElementListToSequence(
                Aas.ISubmodelElementList that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.OrderRelevant.HasValue)
                {
                    writer.WriteStartElement(
                        "orderRelevant",
                        NS);

                    writer.WriteValue(
                        that.OrderRelevant.Value);

                    writer.WriteEndElement();
                }

                if (that.SemanticIdListElement != null)
                {
                    writer.WriteStartElement(
                        "semanticIdListElement",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticIdListElement,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "typeValueListElement",
                    NS);

                string? textTypeValueListElement = Stringification.ToString(
                    that.TypeValueListElement);
                writer.WriteValue(
                    textTypeValueListElement
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration AasSubmodelElements: " +
                            that.TypeValueListElement.ToString()));

                writer.WriteEndElement();

                if (that.ValueTypeListElement != null)
                {
                    writer.WriteStartElement(
                        "valueTypeListElement",
                        NS);

                    string? textValueTypeListElement = Stringification.ToString(
                        that.ValueTypeListElement);
                    writer.WriteValue(
                        textValueTypeListElement
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration DataTypeDefXsd: " +
                                that.ValueTypeListElement.ToString()));

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    foreach (var item in that.Value)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void SubmodelElementListToSequence

            public override void VisitSubmodelElementList(
                Aas.ISubmodelElementList that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "submodelElementList",
                    NS);
                this.SubmodelElementListToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void SubmodelElementCollectionToSequence(
                Aas.ISubmodelElementCollection that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    foreach (var item in that.Value)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void SubmodelElementCollectionToSequence

            public override void VisitSubmodelElementCollection(
                Aas.ISubmodelElementCollection that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "submodelElementCollection",
                    NS);
                this.SubmodelElementCollectionToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void PropertyToSequence(
                Aas.IProperty that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "valueType",
                    NS);

                string? textValueType = Stringification.ToString(
                    that.ValueType);
                writer.WriteValue(
                    textValueType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration DataTypeDefXsd: " +
                            that.ValueType.ToString()));

                writer.WriteEndElement();

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    writer.WriteValue(
                        that.Value);

                    writer.WriteEndElement();
                }

                if (that.ValueId != null)
                {
                    writer.WriteStartElement(
                        "valueId",
                        NS);

                    this.ReferenceToSequence(
                        that.ValueId,
                        writer);

                    writer.WriteEndElement();
                }
            }  // private void PropertyToSequence

            public override void VisitProperty(
                Aas.IProperty that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "property",
                    NS);
                this.PropertyToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void MultiLanguagePropertyToSequence(
                Aas.IMultiLanguageProperty that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    foreach (var item in that.Value)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.ValueId != null)
                {
                    writer.WriteStartElement(
                        "valueId",
                        NS);

                    this.ReferenceToSequence(
                        that.ValueId,
                        writer);

                    writer.WriteEndElement();
                }
            }  // private void MultiLanguagePropertyToSequence

            public override void VisitMultiLanguageProperty(
                Aas.IMultiLanguageProperty that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "multiLanguageProperty",
                    NS);
                this.MultiLanguagePropertyToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void RangeToSequence(
                Aas.IRange that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "valueType",
                    NS);

                string? textValueType = Stringification.ToString(
                    that.ValueType);
                writer.WriteValue(
                    textValueType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration DataTypeDefXsd: " +
                            that.ValueType.ToString()));

                writer.WriteEndElement();

                if (that.Min != null)
                {
                    writer.WriteStartElement(
                        "min",
                        NS);

                    writer.WriteValue(
                        that.Min);

                    writer.WriteEndElement();
                }

                if (that.Max != null)
                {
                    writer.WriteStartElement(
                        "max",
                        NS);

                    writer.WriteValue(
                        that.Max);

                    writer.WriteEndElement();
                }
            }  // private void RangeToSequence

            public override void VisitRange(
                Aas.IRange that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "range",
                    NS);
                this.RangeToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ReferenceElementToSequence(
                Aas.IReferenceElement that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    this.ReferenceToSequence(
                        that.Value,
                        writer);

                    writer.WriteEndElement();
                }
            }  // private void ReferenceElementToSequence

            public override void VisitReferenceElement(
                Aas.IReferenceElement that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "referenceElement",
                    NS);
                this.ReferenceElementToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void BlobToSequence(
                Aas.IBlob that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    writer.WriteBase64(
                        that.Value,
                        0,
                        that.Value.Length);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "contentType",
                    NS);

                writer.WriteValue(
                    that.ContentType);

                writer.WriteEndElement();
            }  // private void BlobToSequence

            public override void VisitBlob(
                Aas.IBlob that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "blob",
                    NS);
                this.BlobToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void FileToSequence(
                Aas.IFile that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    writer.WriteValue(
                        that.Value);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "contentType",
                    NS);

                writer.WriteValue(
                    that.ContentType);

                writer.WriteEndElement();
            }  // private void FileToSequence

            public override void VisitFile(
                Aas.IFile that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "file",
                    NS);
                this.FileToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AnnotatedRelationshipElementToSequence(
                Aas.IAnnotatedRelationshipElement that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "first",
                    NS);

                this.ReferenceToSequence(
                    that.First,
                    writer);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "second",
                    NS);

                this.ReferenceToSequence(
                    that.Second,
                    writer);

                writer.WriteEndElement();

                if (that.Annotations != null)
                {
                    writer.WriteStartElement(
                        "annotations",
                        NS);

                    foreach (var item in that.Annotations)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void AnnotatedRelationshipElementToSequence

            public override void VisitAnnotatedRelationshipElement(
                Aas.IAnnotatedRelationshipElement that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "annotatedRelationshipElement",
                    NS);
                this.AnnotatedRelationshipElementToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void EntityToSequence(
                Aas.IEntity that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Statements != null)
                {
                    writer.WriteStartElement(
                        "statements",
                        NS);

                    foreach (var item in that.Statements)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "entityType",
                    NS);

                string? textEntityType = Stringification.ToString(
                    that.EntityType);
                writer.WriteValue(
                    textEntityType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration EntityType: " +
                            that.EntityType.ToString()));

                writer.WriteEndElement();

                if (that.GlobalAssetId != null)
                {
                    writer.WriteStartElement(
                        "globalAssetId",
                        NS);

                    writer.WriteValue(
                        that.GlobalAssetId);

                    writer.WriteEndElement();
                }

                if (that.SpecificAssetIds != null)
                {
                    writer.WriteStartElement(
                        "specificAssetIds",
                        NS);

                    foreach (var item in that.SpecificAssetIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void EntityToSequence

            public override void VisitEntity(
                Aas.IEntity that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "entity",
                    NS);
                this.EntityToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void EventPayloadToSequence(
                Aas.IEventPayload that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "source",
                    NS);

                this.ReferenceToSequence(
                    that.Source,
                    writer);

                writer.WriteEndElement();

                if (that.SourceSemanticId != null)
                {
                    writer.WriteStartElement(
                        "sourceSemanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SourceSemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "observableReference",
                    NS);

                this.ReferenceToSequence(
                    that.ObservableReference,
                    writer);

                writer.WriteEndElement();

                if (that.ObservableSemanticId != null)
                {
                    writer.WriteStartElement(
                        "observableSemanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.ObservableSemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.Topic != null)
                {
                    writer.WriteStartElement(
                        "topic",
                        NS);

                    writer.WriteValue(
                        that.Topic);

                    writer.WriteEndElement();
                }

                if (that.SubjectId != null)
                {
                    writer.WriteStartElement(
                        "subjectId",
                        NS);

                    this.ReferenceToSequence(
                        that.SubjectId,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "timeStamp",
                    NS);

                writer.WriteValue(
                    that.TimeStamp);

                writer.WriteEndElement();

                if (that.Payload != null)
                {
                    writer.WriteStartElement(
                        "payload",
                        NS);

                    writer.WriteBase64(
                        that.Payload,
                        0,
                        that.Payload.Length);

                    writer.WriteEndElement();
                }
            }  // private void EventPayloadToSequence

            public override void VisitEventPayload(
                Aas.IEventPayload that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "eventPayload",
                    NS);
                this.EventPayloadToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void BasicEventElementToSequence(
                Aas.IBasicEventElement that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "observed",
                    NS);

                this.ReferenceToSequence(
                    that.Observed,
                    writer);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "direction",
                    NS);

                string? textDirection = Stringification.ToString(
                    that.Direction);
                writer.WriteValue(
                    textDirection
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration Direction: " +
                            that.Direction.ToString()));

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "state",
                    NS);

                string? textState = Stringification.ToString(
                    that.State);
                writer.WriteValue(
                    textState
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration StateOfEvent: " +
                            that.State.ToString()));

                writer.WriteEndElement();

                if (that.MessageTopic != null)
                {
                    writer.WriteStartElement(
                        "messageTopic",
                        NS);

                    writer.WriteValue(
                        that.MessageTopic);

                    writer.WriteEndElement();
                }

                if (that.MessageBroker != null)
                {
                    writer.WriteStartElement(
                        "messageBroker",
                        NS);

                    this.ReferenceToSequence(
                        that.MessageBroker,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.LastUpdate != null)
                {
                    writer.WriteStartElement(
                        "lastUpdate",
                        NS);

                    writer.WriteValue(
                        that.LastUpdate);

                    writer.WriteEndElement();
                }

                if (that.MinInterval != null)
                {
                    writer.WriteStartElement(
                        "minInterval",
                        NS);

                    writer.WriteValue(
                        that.MinInterval);

                    writer.WriteEndElement();
                }

                if (that.MaxInterval != null)
                {
                    writer.WriteStartElement(
                        "maxInterval",
                        NS);

                    writer.WriteValue(
                        that.MaxInterval);

                    writer.WriteEndElement();
                }
            }  // private void BasicEventElementToSequence

            public override void VisitBasicEventElement(
                Aas.IBasicEventElement that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "basicEventElement",
                    NS);
                this.BasicEventElementToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void OperationToSequence(
                Aas.IOperation that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.InputVariables != null)
                {
                    writer.WriteStartElement(
                        "inputVariables",
                        NS);

                    foreach (var item in that.InputVariables)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.OutputVariables != null)
                {
                    writer.WriteStartElement(
                        "outputVariables",
                        NS);

                    foreach (var item in that.OutputVariables)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.InoutputVariables != null)
                {
                    writer.WriteStartElement(
                        "inoutputVariables",
                        NS);

                    foreach (var item in that.InoutputVariables)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void OperationToSequence

            public override void VisitOperation(
                Aas.IOperation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "operation",
                    NS);
                this.OperationToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void OperationVariableToSequence(
                Aas.IOperationVariable that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "value",
                    NS);

                this.Visit(
                    that.Value,
                    writer);

                writer.WriteEndElement();
            }  // private void OperationVariableToSequence

            public override void VisitOperationVariable(
                Aas.IOperationVariable that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "operationVariable",
                    NS);
                this.OperationVariableToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void CapabilityToSequence(
                Aas.ICapability that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.SemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SupplementalSemanticIds != null)
                {
                    writer.WriteStartElement(
                        "supplementalSemanticIds",
                        NS);

                    foreach (var item in that.SupplementalSemanticIds)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers",
                        NS);

                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void CapabilityToSequence

            public override void VisitCapability(
                Aas.ICapability that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "capability",
                    NS);
                this.CapabilityToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ConceptDescriptionToSequence(
                Aas.IConceptDescription that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions",
                        NS);

                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category",
                        NS);

                    writer.WriteValue(
                        that.Category);

                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort",
                        NS);

                    writer.WriteValue(
                        that.IdShort);

                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName",
                        NS);

                    foreach (var item in that.DisplayName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description",
                        NS);

                    foreach (var item in that.Description)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Administration != null)
                {
                    writer.WriteStartElement(
                        "administration",
                        NS);

                    this.AdministrativeInformationToSequence(
                        that.Administration,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "id",
                    NS);

                writer.WriteValue(
                    that.Id);

                writer.WriteEndElement();

                if (that.EmbeddedDataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "embeddedDataSpecifications",
                        NS);

                    foreach (var item in that.EmbeddedDataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.IsCaseOf != null)
                {
                    writer.WriteStartElement(
                        "isCaseOf",
                        NS);

                    foreach (var item in that.IsCaseOf)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void ConceptDescriptionToSequence

            public override void VisitConceptDescription(
                Aas.IConceptDescription that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "conceptDescription",
                    NS);
                this.ConceptDescriptionToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ReferenceToSequence(
                Aas.IReference that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "type",
                    NS);

                string? textType = Stringification.ToString(
                    that.Type);
                writer.WriteValue(
                    textType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration ReferenceTypes: " +
                            that.Type.ToString()));

                writer.WriteEndElement();

                if (that.ReferredSemanticId != null)
                {
                    writer.WriteStartElement(
                        "referredSemanticId",
                        NS);

                    this.ReferenceToSequence(
                        that.ReferredSemanticId,
                        writer);

                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "keys",
                    NS);

                foreach (var item in that.Keys)
                {
                    this.Visit(
                        item,
                        writer);
                }

                writer.WriteEndElement();
            }  // private void ReferenceToSequence

            public override void VisitReference(
                Aas.IReference that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "reference",
                    NS);
                this.ReferenceToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void KeyToSequence(
                Aas.IKey that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "type",
                    NS);

                string? textType = Stringification.ToString(
                    that.Type);
                writer.WriteValue(
                    textType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration KeyTypes: " +
                            that.Type.ToString()));

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "value",
                    NS);

                writer.WriteValue(
                    that.Value);

                writer.WriteEndElement();
            }  // private void KeyToSequence

            public override void VisitKey(
                Aas.IKey that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "key",
                    NS);
                this.KeyToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LangStringNameTypeToSequence(
                Aas.ILangStringNameType that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "language",
                    NS);

                writer.WriteValue(
                    that.Language);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "text",
                    NS);

                writer.WriteValue(
                    that.Text);

                writer.WriteEndElement();
            }  // private void LangStringNameTypeToSequence

            public override void VisitLangStringNameType(
                Aas.ILangStringNameType that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langStringNameType",
                    NS);
                this.LangStringNameTypeToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LangStringTextTypeToSequence(
                Aas.ILangStringTextType that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "language",
                    NS);

                writer.WriteValue(
                    that.Language);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "text",
                    NS);

                writer.WriteValue(
                    that.Text);

                writer.WriteEndElement();
            }  // private void LangStringTextTypeToSequence

            public override void VisitLangStringTextType(
                Aas.ILangStringTextType that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langStringTextType",
                    NS);
                this.LangStringTextTypeToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void EnvironmentToSequence(
                Aas.IEnvironment that,
                Xml.XmlWriter writer)
            {
                if (that.AssetAdministrationShells != null)
                {
                    writer.WriteStartElement(
                        "assetAdministrationShells",
                        NS);

                    foreach (var item in that.AssetAdministrationShells)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Submodels != null)
                {
                    writer.WriteStartElement(
                        "submodels",
                        NS);

                    foreach (var item in that.Submodels)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.ConceptDescriptions != null)
                {
                    writer.WriteStartElement(
                        "conceptDescriptions",
                        NS);

                    foreach (var item in that.ConceptDescriptions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }
            }  // private void EnvironmentToSequence

            public override void VisitEnvironment(
                Aas.IEnvironment that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "environment",
                    NS);
                this.EnvironmentToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void EmbeddedDataSpecificationToSequence(
                Aas.IEmbeddedDataSpecification that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "dataSpecification",
                    NS);

                this.ReferenceToSequence(
                    that.DataSpecification,
                    writer);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "dataSpecificationContent",
                    NS);

                this.Visit(
                    that.DataSpecificationContent,
                    writer);

                writer.WriteEndElement();

            }  // private void EmbeddedDataSpecificationToSequence

            public override void VisitEmbeddedDataSpecification(
                Aas.IEmbeddedDataSpecification that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "embeddedDataSpecification",
                    NS);
                this.EmbeddedDataSpecificationToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LevelTypeToSequence(
                Aas.ILevelType that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "min",
                    NS);

                writer.WriteValue(
                    that.Min);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "nom",
                    NS);

                writer.WriteValue(
                    that.Nom);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "typ",
                    NS);

                writer.WriteValue(
                    that.Typ);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "max",
                    NS);

                writer.WriteValue(
                    that.Max);

                writer.WriteEndElement();
            }  // private void LevelTypeToSequence

            public override void VisitLevelType(
                Aas.ILevelType that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "levelType",
                    NS);
                this.LevelTypeToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ValueReferencePairToSequence(
                Aas.IValueReferencePair that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "value",
                    NS);

                writer.WriteValue(
                    that.Value);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "valueId",
                    NS);

                this.ReferenceToSequence(
                    that.ValueId,
                    writer);

                writer.WriteEndElement();
            }  // private void ValueReferencePairToSequence

            public override void VisitValueReferencePair(
                Aas.IValueReferencePair that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "valueReferencePair",
                    NS);
                this.ValueReferencePairToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ValueListToSequence(
                Aas.IValueList that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "valueReferencePairs",
                    NS);

                foreach (var item in that.ValueReferencePairs)
                {
                    this.Visit(
                        item,
                        writer);
                }

                writer.WriteEndElement();
            }  // private void ValueListToSequence

            public override void VisitValueList(
                Aas.IValueList that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "valueList",
                    NS);
                this.ValueListToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LangStringPreferredNameTypeIec61360ToSequence(
                Aas.ILangStringPreferredNameTypeIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "language",
                    NS);

                writer.WriteValue(
                    that.Language);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "text",
                    NS);

                writer.WriteValue(
                    that.Text);

                writer.WriteEndElement();
            }  // private void LangStringPreferredNameTypeIec61360ToSequence

            public override void VisitLangStringPreferredNameTypeIec61360(
                Aas.ILangStringPreferredNameTypeIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langStringPreferredNameTypeIec61360",
                    NS);
                this.LangStringPreferredNameTypeIec61360ToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LangStringShortNameTypeIec61360ToSequence(
                Aas.ILangStringShortNameTypeIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "language",
                    NS);

                writer.WriteValue(
                    that.Language);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "text",
                    NS);

                writer.WriteValue(
                    that.Text);

                writer.WriteEndElement();
            }  // private void LangStringShortNameTypeIec61360ToSequence

            public override void VisitLangStringShortNameTypeIec61360(
                Aas.ILangStringShortNameTypeIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langStringShortNameTypeIec61360",
                    NS);
                this.LangStringShortNameTypeIec61360ToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LangStringDefinitionTypeIec61360ToSequence(
                Aas.ILangStringDefinitionTypeIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "language",
                    NS);

                writer.WriteValue(
                    that.Language);

                writer.WriteEndElement();

                writer.WriteStartElement(
                    "text",
                    NS);

                writer.WriteValue(
                    that.Text);

                writer.WriteEndElement();
            }  // private void LangStringDefinitionTypeIec61360ToSequence

            public override void VisitLangStringDefinitionTypeIec61360(
                Aas.ILangStringDefinitionTypeIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langStringDefinitionTypeIec61360",
                    NS);
                this.LangStringDefinitionTypeIec61360ToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void DataSpecificationIec61360ToSequence(
                Aas.IDataSpecificationIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "preferredName",
                    NS);

                foreach (var item in that.PreferredName)
                {
                    this.Visit(
                        item,
                        writer);
                }

                writer.WriteEndElement();

                if (that.ShortName != null)
                {
                    writer.WriteStartElement(
                        "shortName",
                        NS);

                    foreach (var item in that.ShortName)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.Unit != null)
                {
                    writer.WriteStartElement(
                        "unit",
                        NS);

                    writer.WriteValue(
                        that.Unit);

                    writer.WriteEndElement();
                }

                if (that.UnitId != null)
                {
                    writer.WriteStartElement(
                        "unitId",
                        NS);

                    this.ReferenceToSequence(
                        that.UnitId,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.SourceOfDefinition != null)
                {
                    writer.WriteStartElement(
                        "sourceOfDefinition",
                        NS);

                    writer.WriteValue(
                        that.SourceOfDefinition);

                    writer.WriteEndElement();
                }

                if (that.Symbol != null)
                {
                    writer.WriteStartElement(
                        "symbol",
                        NS);

                    writer.WriteValue(
                        that.Symbol);

                    writer.WriteEndElement();
                }

                if (that.DataType != null)
                {
                    writer.WriteStartElement(
                        "dataType",
                        NS);

                    string? textDataType = Stringification.ToString(
                        that.DataType);
                    writer.WriteValue(
                        textDataType
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration DataTypeIec61360: " +
                                that.DataType.ToString()));

                    writer.WriteEndElement();
                }

                if (that.Definition != null)
                {
                    writer.WriteStartElement(
                        "definition",
                        NS);

                    foreach (var item in that.Definition)
                    {
                        this.Visit(
                            item,
                            writer);
                    }

                    writer.WriteEndElement();
                }

                if (that.ValueFormat != null)
                {
                    writer.WriteStartElement(
                        "valueFormat",
                        NS);

                    writer.WriteValue(
                        that.ValueFormat);

                    writer.WriteEndElement();
                }

                if (that.ValueList != null)
                {
                    writer.WriteStartElement(
                        "valueList",
                        NS);

                    this.ValueListToSequence(
                        that.ValueList,
                        writer);

                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value",
                        NS);

                    writer.WriteValue(
                        that.Value);

                    writer.WriteEndElement();
                }

                if (that.LevelType != null)
                {
                    writer.WriteStartElement(
                        "levelType",
                        NS);

                    this.LevelTypeToSequence(
                        that.LevelType,
                        writer);

                    writer.WriteEndElement();
                }
            }  // private void DataSpecificationIec61360ToSequence

            public override void VisitDataSpecificationIec61360(
                Aas.IDataSpecificationIec61360 that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "dataSpecificationIec61360",
                    NS);
                this.DataSpecificationIec61360ToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }
        }  // internal class VisitorWithWriter

        /// <summary>
        /// Serialize instances of meta-model classes to XML.
        /// </summary>
        /// <example>
        /// Here is an example how to serialize an instance of IHasSemantics:
        /// <code>
        /// var anInstance = new Aas.IHasSemantics(
        ///     /* ... some constructor arguments ... */
        /// );
        /// var writer = new System.Xml.XmlWriter( /* some arguments */ );
        /// Serialize.To(
        ///     anInstance,
        ///     writer);
        /// </code>
        /// </example>
        public static class Serialize
        {
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            private static readonly VisitorWithWriter _visitorWithWriter = (
                new VisitorWithWriter());

            /// <summary>
            /// Serialize an instance of the meta-model to XML.
            /// </summary>
            public static void To(
                Aas.IClass that,
                Xml.XmlWriter writer)
            {
                Serialize._visitorWithWriter.Visit(
                    that, writer);
            }
        }  // public static class Serialize
    }  // public static class Xmlization
}  // namespace AasCore.Aas3_0

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
