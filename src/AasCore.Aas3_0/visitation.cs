/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

namespace AasCore.Aas3_0
{
    public static class Visitation
    {
        /// <summary>
        /// Define the interface for a visitor which visits the instances of the model.
        /// </summary>
        /// <remarks>
        /// When you use the visitor, please always call the main dispatching method
        /// <see cref="Visit" />. You should most probably never call the <c>Visit*</c>
        /// methods directly. They are only made public so that model classes can access them.
        /// </remarks>
        public interface IVisitor
        {
            public void Visit(IClass that);
            public void VisitExtension(
                IExtension that
            );
            public void VisitAdministrativeInformation(
                IAdministrativeInformation that
            );
            public void VisitQualifier(
                IQualifier that
            );
            public void VisitAssetAdministrationShell(
                IAssetAdministrationShell that
            );
            public void VisitAssetInformation(
                IAssetInformation that
            );
            public void VisitResource(
                IResource that
            );
            public void VisitSpecificAssetId(
                ISpecificAssetId that
            );
            public void VisitSubmodel(
                ISubmodel that
            );
            public void VisitRelationshipElement(
                IRelationshipElement that
            );
            public void VisitSubmodelElementList(
                ISubmodelElementList that
            );
            public void VisitSubmodelElementCollection(
                ISubmodelElementCollection that
            );
            public void VisitProperty(
                IProperty that
            );
            public void VisitMultiLanguageProperty(
                IMultiLanguageProperty that
            );
            public void VisitRange(
                IRange that
            );
            public void VisitReferenceElement(
                IReferenceElement that
            );
            public void VisitBlob(
                IBlob that
            );
            public void VisitFile(
                IFile that
            );
            public void VisitAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that
            );
            public void VisitEntity(
                IEntity that
            );
            public void VisitEventPayload(
                IEventPayload that
            );
            public void VisitBasicEventElement(
                IBasicEventElement that
            );
            public void VisitOperation(
                IOperation that
            );
            public void VisitOperationVariable(
                IOperationVariable that
            );
            public void VisitCapability(
                ICapability that
            );
            public void VisitConceptDescription(
                IConceptDescription that
            );
            public void VisitReference(
                IReference that
            );
            public void VisitKey(
                IKey that
            );
            public void VisitLangStringNameType(
                ILangStringNameType that
            );
            public void VisitLangStringTextType(
                ILangStringTextType that
            );
            public void VisitEnvironment(
                IEnvironment that
            );
            public void VisitEmbeddedDataSpecification(
                IEmbeddedDataSpecification that
            );
            public void VisitLevelType(
                ILevelType that
            );
            public void VisitValueReferencePair(
                IValueReferencePair that
            );
            public void VisitValueList(
                IValueList that
            );
            public void VisitLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that
            );
            public void VisitLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that
            );
            public void VisitLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that
            );
            public void VisitDataSpecificationIec61360(
                IDataSpecificationIec61360 that
            );
        }  // public interface IVisitor

        /// <summary>
        /// Just descend through the instances without any action.
        /// </summary>
        /// <remarks>
        /// This class is meaningless for itself. However, it is a good base if you
        /// want to descend through instances and apply actions only on a subset of
        /// classes.
        /// </remarks>
        public class VisitorThrough : IVisitor
        {
            public virtual void Visit(IClass that)
            {
                that.Accept(this);
            }

            public virtual void VisitExtension(
                IExtension that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitAdministrativeInformation(
                IAdministrativeInformation that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitQualifier(
                IQualifier that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitAssetAdministrationShell(
                IAssetAdministrationShell that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitAssetInformation(
                IAssetInformation that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitResource(
                IResource that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitSpecificAssetId(
                ISpecificAssetId that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitSubmodel(
                ISubmodel that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitRelationshipElement(
                IRelationshipElement that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitSubmodelElementList(
                ISubmodelElementList that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitSubmodelElementCollection(
                ISubmodelElementCollection that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitProperty(
                IProperty that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitMultiLanguageProperty(
                IMultiLanguageProperty that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitRange(
                IRange that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitReferenceElement(
                IReferenceElement that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitBlob(
                IBlob that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitFile(
                IFile that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitEntity(
                IEntity that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitEventPayload(
                IEventPayload that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitBasicEventElement(
                IBasicEventElement that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitOperation(
                IOperation that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitOperationVariable(
                IOperationVariable that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitCapability(
                ICapability that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitConceptDescription(
                IConceptDescription that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitReference(
                IReference that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitKey(
                IKey that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitLangStringNameType(
                ILangStringNameType that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitLangStringTextType(
                ILangStringTextType that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitEnvironment(
                IEnvironment that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitEmbeddedDataSpecification(
                IEmbeddedDataSpecification that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitLevelType(
                ILevelType that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitValueReferencePair(
                IValueReferencePair that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitValueList(
                IValueList that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }

            public virtual void VisitDataSpecificationIec61360(
                IDataSpecificationIec61360 that
            )
            {
                // Just descend through, do nothing with <c>that</c>
                foreach (var something in that.DescendOnce())
                {
                    Visit(something);
                }
            }
        }  // public class VisitorThrough

        /// <summary>
        /// Perform double-dispatch to visit the concrete instances.
        /// </summary>
        public abstract class AbstractVisitor : IVisitor
        {
            public virtual void Visit(IClass that)
            {
                that.Accept(this);
            }
            public abstract void VisitExtension(
                IExtension that
            );
            public abstract void VisitAdministrativeInformation(
                IAdministrativeInformation that
            );
            public abstract void VisitQualifier(
                IQualifier that
            );
            public abstract void VisitAssetAdministrationShell(
                IAssetAdministrationShell that
            );
            public abstract void VisitAssetInformation(
                IAssetInformation that
            );
            public abstract void VisitResource(
                IResource that
            );
            public abstract void VisitSpecificAssetId(
                ISpecificAssetId that
            );
            public abstract void VisitSubmodel(
                ISubmodel that
            );
            public abstract void VisitRelationshipElement(
                IRelationshipElement that
            );
            public abstract void VisitSubmodelElementList(
                ISubmodelElementList that
            );
            public abstract void VisitSubmodelElementCollection(
                ISubmodelElementCollection that
            );
            public abstract void VisitProperty(
                IProperty that
            );
            public abstract void VisitMultiLanguageProperty(
                IMultiLanguageProperty that
            );
            public abstract void VisitRange(
                IRange that
            );
            public abstract void VisitReferenceElement(
                IReferenceElement that
            );
            public abstract void VisitBlob(
                IBlob that
            );
            public abstract void VisitFile(
                IFile that
            );
            public abstract void VisitAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that
            );
            public abstract void VisitEntity(
                IEntity that
            );
            public abstract void VisitEventPayload(
                IEventPayload that
            );
            public abstract void VisitBasicEventElement(
                IBasicEventElement that
            );
            public abstract void VisitOperation(
                IOperation that
            );
            public abstract void VisitOperationVariable(
                IOperationVariable that
            );
            public abstract void VisitCapability(
                ICapability that
            );
            public abstract void VisitConceptDescription(
                IConceptDescription that
            );
            public abstract void VisitReference(
                IReference that
            );
            public abstract void VisitKey(
                IKey that
            );
            public abstract void VisitLangStringNameType(
                ILangStringNameType that
            );
            public abstract void VisitLangStringTextType(
                ILangStringTextType that
            );
            public abstract void VisitEnvironment(
                IEnvironment that
            );
            public abstract void VisitEmbeddedDataSpecification(
                IEmbeddedDataSpecification that
            );
            public abstract void VisitLevelType(
                ILevelType that
            );
            public abstract void VisitValueReferencePair(
                IValueReferencePair that
            );
            public abstract void VisitValueList(
                IValueList that
            );
            public abstract void VisitLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that
            );
            public abstract void VisitLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that
            );
            public abstract void VisitLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that
            );
            public abstract void VisitDataSpecificationIec61360(
                IDataSpecificationIec61360 that
            );
        }  // public abstract class AbstractVisitor

        /// <summary>
        /// Define the interface for a visitor which visits the instances of the model.
        /// </summary>
        /// <remarks>
        /// When you use the visitor, please always call the main dispatching method
        /// <see cref="Visit" />. You should most probably never call the <c>Visit*</c>
        /// methods directly. They are only made public so that model classes can access them.
        /// </remarks>
        /// <typeparam name="TContext">Context type</typeparam>
        public interface IVisitorWithContext<in TContext>
        {
            public void Visit(IClass that, TContext context);
            public void VisitExtension(
                IExtension that,
                TContext context
            );
            public void VisitAdministrativeInformation(
                IAdministrativeInformation that,
                TContext context
            );
            public void VisitQualifier(
                IQualifier that,
                TContext context
            );
            public void VisitAssetAdministrationShell(
                IAssetAdministrationShell that,
                TContext context
            );
            public void VisitAssetInformation(
                IAssetInformation that,
                TContext context
            );
            public void VisitResource(
                IResource that,
                TContext context
            );
            public void VisitSpecificAssetId(
                ISpecificAssetId that,
                TContext context
            );
            public void VisitSubmodel(
                ISubmodel that,
                TContext context
            );
            public void VisitRelationshipElement(
                IRelationshipElement that,
                TContext context
            );
            public void VisitSubmodelElementList(
                ISubmodelElementList that,
                TContext context
            );
            public void VisitSubmodelElementCollection(
                ISubmodelElementCollection that,
                TContext context
            );
            public void VisitProperty(
                IProperty that,
                TContext context
            );
            public void VisitMultiLanguageProperty(
                IMultiLanguageProperty that,
                TContext context
            );
            public void VisitRange(
                IRange that,
                TContext context
            );
            public void VisitReferenceElement(
                IReferenceElement that,
                TContext context
            );
            public void VisitBlob(
                IBlob that,
                TContext context
            );
            public void VisitFile(
                IFile that,
                TContext context
            );
            public void VisitAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that,
                TContext context
            );
            public void VisitEntity(
                IEntity that,
                TContext context
            );
            public void VisitEventPayload(
                IEventPayload that,
                TContext context
            );
            public void VisitBasicEventElement(
                IBasicEventElement that,
                TContext context
            );
            public void VisitOperation(
                IOperation that,
                TContext context
            );
            public void VisitOperationVariable(
                IOperationVariable that,
                TContext context
            );
            public void VisitCapability(
                ICapability that,
                TContext context
            );
            public void VisitConceptDescription(
                IConceptDescription that,
                TContext context
            );
            public void VisitReference(
                IReference that,
                TContext context
            );
            public void VisitKey(
                IKey that,
                TContext context
            );
            public void VisitLangStringNameType(
                ILangStringNameType that,
                TContext context
            );
            public void VisitLangStringTextType(
                ILangStringTextType that,
                TContext context
            );
            public void VisitEnvironment(
                IEnvironment that,
                TContext context
            );
            public void VisitEmbeddedDataSpecification(
                IEmbeddedDataSpecification that,
                TContext context
            );
            public void VisitLevelType(
                ILevelType that,
                TContext context
            );
            public void VisitValueReferencePair(
                IValueReferencePair that,
                TContext context
            );
            public void VisitValueList(
                IValueList that,
                TContext context
            );
            public void VisitLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that,
                TContext context
            );
            public void VisitLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that,
                TContext context
            );
            public void VisitLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that,
                TContext context
            );
            public void VisitDataSpecificationIec61360(
                IDataSpecificationIec61360 that,
                TContext context
            );
        }  // public interface IVisitorWithContext

        /// <summary>
        /// Perform double-dispatch to visit the concrete instances
        /// with context.
        /// </summary>
        /// <typeparam name="TContext">Context type</typeparam>
        public abstract class AbstractVisitorWithContext<TContext>
            : IVisitorWithContext<TContext>
        {
            public void Visit(IClass that, TContext context)
            {
                that.Accept(this, context);
            }
            public abstract void VisitExtension(
                IExtension that,
                TContext context
            );
            public abstract void VisitAdministrativeInformation(
                IAdministrativeInformation that,
                TContext context
            );
            public abstract void VisitQualifier(
                IQualifier that,
                TContext context
            );
            public abstract void VisitAssetAdministrationShell(
                IAssetAdministrationShell that,
                TContext context
            );
            public abstract void VisitAssetInformation(
                IAssetInformation that,
                TContext context
            );
            public abstract void VisitResource(
                IResource that,
                TContext context
            );
            public abstract void VisitSpecificAssetId(
                ISpecificAssetId that,
                TContext context
            );
            public abstract void VisitSubmodel(
                ISubmodel that,
                TContext context
            );
            public abstract void VisitRelationshipElement(
                IRelationshipElement that,
                TContext context
            );
            public abstract void VisitSubmodelElementList(
                ISubmodelElementList that,
                TContext context
            );
            public abstract void VisitSubmodelElementCollection(
                ISubmodelElementCollection that,
                TContext context
            );
            public abstract void VisitProperty(
                IProperty that,
                TContext context
            );
            public abstract void VisitMultiLanguageProperty(
                IMultiLanguageProperty that,
                TContext context
            );
            public abstract void VisitRange(
                IRange that,
                TContext context
            );
            public abstract void VisitReferenceElement(
                IReferenceElement that,
                TContext context
            );
            public abstract void VisitBlob(
                IBlob that,
                TContext context
            );
            public abstract void VisitFile(
                IFile that,
                TContext context
            );
            public abstract void VisitAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that,
                TContext context
            );
            public abstract void VisitEntity(
                IEntity that,
                TContext context
            );
            public abstract void VisitEventPayload(
                IEventPayload that,
                TContext context
            );
            public abstract void VisitBasicEventElement(
                IBasicEventElement that,
                TContext context
            );
            public abstract void VisitOperation(
                IOperation that,
                TContext context
            );
            public abstract void VisitOperationVariable(
                IOperationVariable that,
                TContext context
            );
            public abstract void VisitCapability(
                ICapability that,
                TContext context
            );
            public abstract void VisitConceptDescription(
                IConceptDescription that,
                TContext context
            );
            public abstract void VisitReference(
                IReference that,
                TContext context
            );
            public abstract void VisitKey(
                IKey that,
                TContext context
            );
            public abstract void VisitLangStringNameType(
                ILangStringNameType that,
                TContext context
            );
            public abstract void VisitLangStringTextType(
                ILangStringTextType that,
                TContext context
            );
            public abstract void VisitEnvironment(
                IEnvironment that,
                TContext context
            );
            public abstract void VisitEmbeddedDataSpecification(
                IEmbeddedDataSpecification that,
                TContext context
            );
            public abstract void VisitLevelType(
                ILevelType that,
                TContext context
            );
            public abstract void VisitValueReferencePair(
                IValueReferencePair that,
                TContext context
            );
            public abstract void VisitValueList(
                IValueList that,
                TContext context
            );
            public abstract void VisitLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that,
                TContext context
            );
            public abstract void VisitLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that,
                TContext context
            );
            public abstract void VisitLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that,
                TContext context
            );
            public abstract void VisitDataSpecificationIec61360(
                IDataSpecificationIec61360 that,
                TContext context
            );
        }  // public abstract class AbstractVisitorWithContext

        /// <summary>
        /// Define the interface for a transformer which transforms recursively
        /// the instances into something else.
        /// </summary>
        /// <remarks>
        /// When you use the transformer, please always call the main dispatching method
        /// <see cref="Transform" />. You should most probably never call the <c>Transform*</c>
        /// methods directly. They are only made public so that model classes can access them.
        /// </remarks>
        /// <typeparam name="T">The type of the transformation result</typeparam>
        public interface ITransformer<out T>
        {
            public T Transform(IClass that);
            public T TransformExtension(
                IExtension that
            );
            public T TransformAdministrativeInformation(
                IAdministrativeInformation that
            );
            public T TransformQualifier(
                IQualifier that
            );
            public T TransformAssetAdministrationShell(
                IAssetAdministrationShell that
            );
            public T TransformAssetInformation(
                IAssetInformation that
            );
            public T TransformResource(
                IResource that
            );
            public T TransformSpecificAssetId(
                ISpecificAssetId that
            );
            public T TransformSubmodel(
                ISubmodel that
            );
            public T TransformRelationshipElement(
                IRelationshipElement that
            );
            public T TransformSubmodelElementList(
                ISubmodelElementList that
            );
            public T TransformSubmodelElementCollection(
                ISubmodelElementCollection that
            );
            public T TransformProperty(
                IProperty that
            );
            public T TransformMultiLanguageProperty(
                IMultiLanguageProperty that
            );
            public T TransformRange(
                IRange that
            );
            public T TransformReferenceElement(
                IReferenceElement that
            );
            public T TransformBlob(
                IBlob that
            );
            public T TransformFile(
                IFile that
            );
            public T TransformAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that
            );
            public T TransformEntity(
                IEntity that
            );
            public T TransformEventPayload(
                IEventPayload that
            );
            public T TransformBasicEventElement(
                IBasicEventElement that
            );
            public T TransformOperation(
                IOperation that
            );
            public T TransformOperationVariable(
                IOperationVariable that
            );
            public T TransformCapability(
                ICapability that
            );
            public T TransformConceptDescription(
                IConceptDescription that
            );
            public T TransformReference(
                IReference that
            );
            public T TransformKey(
                IKey that
            );
            public T TransformLangStringNameType(
                ILangStringNameType that
            );
            public T TransformLangStringTextType(
                ILangStringTextType that
            );
            public T TransformEnvironment(
                IEnvironment that
            );
            public T TransformEmbeddedDataSpecification(
                IEmbeddedDataSpecification that
            );
            public T TransformLevelType(
                ILevelType that
            );
            public T TransformValueReferencePair(
                IValueReferencePair that
            );
            public T TransformValueList(
                IValueList that
            );
            public T TransformLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that
            );
            public T TransformLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that
            );
            public T TransformLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that
            );
            public T TransformDataSpecificationIec61360(
                IDataSpecificationIec61360 that
            );
        }  // public interface ITransformer

        /// <summary>
        /// Perform double-dispatch to transform recursively
        /// the instances into something else.
        /// </summary>
        /// <typeparam name="T">The type of the transformation result</typeparam>
        public abstract class AbstractTransformer<T> : ITransformer<T>
        {
            public T Transform(IClass that)
            {
                return that.Transform(this);
            }

            public abstract T TransformExtension(
                IExtension that
            );

            public abstract T TransformAdministrativeInformation(
                IAdministrativeInformation that
            );

            public abstract T TransformQualifier(
                IQualifier that
            );

            public abstract T TransformAssetAdministrationShell(
                IAssetAdministrationShell that
            );

            public abstract T TransformAssetInformation(
                IAssetInformation that
            );

            public abstract T TransformResource(
                IResource that
            );

            public abstract T TransformSpecificAssetId(
                ISpecificAssetId that
            );

            public abstract T TransformSubmodel(
                ISubmodel that
            );

            public abstract T TransformRelationshipElement(
                IRelationshipElement that
            );

            public abstract T TransformSubmodelElementList(
                ISubmodelElementList that
            );

            public abstract T TransformSubmodelElementCollection(
                ISubmodelElementCollection that
            );

            public abstract T TransformProperty(
                IProperty that
            );

            public abstract T TransformMultiLanguageProperty(
                IMultiLanguageProperty that
            );

            public abstract T TransformRange(
                IRange that
            );

            public abstract T TransformReferenceElement(
                IReferenceElement that
            );

            public abstract T TransformBlob(
                IBlob that
            );

            public abstract T TransformFile(
                IFile that
            );

            public abstract T TransformAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that
            );

            public abstract T TransformEntity(
                IEntity that
            );

            public abstract T TransformEventPayload(
                IEventPayload that
            );

            public abstract T TransformBasicEventElement(
                IBasicEventElement that
            );

            public abstract T TransformOperation(
                IOperation that
            );

            public abstract T TransformOperationVariable(
                IOperationVariable that
            );

            public abstract T TransformCapability(
                ICapability that
            );

            public abstract T TransformConceptDescription(
                IConceptDescription that
            );

            public abstract T TransformReference(
                IReference that
            );

            public abstract T TransformKey(
                IKey that
            );

            public abstract T TransformLangStringNameType(
                ILangStringNameType that
            );

            public abstract T TransformLangStringTextType(
                ILangStringTextType that
            );

            public abstract T TransformEnvironment(
                IEnvironment that
            );

            public abstract T TransformEmbeddedDataSpecification(
                IEmbeddedDataSpecification that
            );

            public abstract T TransformLevelType(
                ILevelType that
            );

            public abstract T TransformValueReferencePair(
                IValueReferencePair that
            );

            public abstract T TransformValueList(
                IValueList that
            );

            public abstract T TransformLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that
            );

            public abstract T TransformLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that
            );

            public abstract T TransformLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that
            );

            public abstract T TransformDataSpecificationIec61360(
                IDataSpecificationIec61360 that
            );
        }  // public abstract class AbstractTransformer

        /// <summary>
        /// Define the interface for a transformer which recursively transforms
        /// the instances into something else while the context is passed along.
        /// </summary>
        /// <remarks>
        /// When you use the transformer, please always call the main dispatching method
        /// <see cref="Transform" />. You should most probably never call the <c>Transform*</c>
        /// methods directly. They are only made public so that model classes can access them.
        /// </remarks>
        /// <typeparam name="TContext">Type of the transformation context</typeparam>
        /// <typeparam name="T">The type of the transformation result</typeparam>
        public interface ITransformerWithContext<in TContext, out T>
        {
            public T Transform(IClass that, TContext context);
            public T TransformExtension(
                IExtension that,
                TContext context
            );
            public T TransformAdministrativeInformation(
                IAdministrativeInformation that,
                TContext context
            );
            public T TransformQualifier(
                IQualifier that,
                TContext context
            );
            public T TransformAssetAdministrationShell(
                IAssetAdministrationShell that,
                TContext context
            );
            public T TransformAssetInformation(
                IAssetInformation that,
                TContext context
            );
            public T TransformResource(
                IResource that,
                TContext context
            );
            public T TransformSpecificAssetId(
                ISpecificAssetId that,
                TContext context
            );
            public T TransformSubmodel(
                ISubmodel that,
                TContext context
            );
            public T TransformRelationshipElement(
                IRelationshipElement that,
                TContext context
            );
            public T TransformSubmodelElementList(
                ISubmodelElementList that,
                TContext context
            );
            public T TransformSubmodelElementCollection(
                ISubmodelElementCollection that,
                TContext context
            );
            public T TransformProperty(
                IProperty that,
                TContext context
            );
            public T TransformMultiLanguageProperty(
                IMultiLanguageProperty that,
                TContext context
            );
            public T TransformRange(
                IRange that,
                TContext context
            );
            public T TransformReferenceElement(
                IReferenceElement that,
                TContext context
            );
            public T TransformBlob(
                IBlob that,
                TContext context
            );
            public T TransformFile(
                IFile that,
                TContext context
            );
            public T TransformAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that,
                TContext context
            );
            public T TransformEntity(
                IEntity that,
                TContext context
            );
            public T TransformEventPayload(
                IEventPayload that,
                TContext context
            );
            public T TransformBasicEventElement(
                IBasicEventElement that,
                TContext context
            );
            public T TransformOperation(
                IOperation that,
                TContext context
            );
            public T TransformOperationVariable(
                IOperationVariable that,
                TContext context
            );
            public T TransformCapability(
                ICapability that,
                TContext context
            );
            public T TransformConceptDescription(
                IConceptDescription that,
                TContext context
            );
            public T TransformReference(
                IReference that,
                TContext context
            );
            public T TransformKey(
                IKey that,
                TContext context
            );
            public T TransformLangStringNameType(
                ILangStringNameType that,
                TContext context
            );
            public T TransformLangStringTextType(
                ILangStringTextType that,
                TContext context
            );
            public T TransformEnvironment(
                IEnvironment that,
                TContext context
            );
            public T TransformEmbeddedDataSpecification(
                IEmbeddedDataSpecification that,
                TContext context
            );
            public T TransformLevelType(
                ILevelType that,
                TContext context
            );
            public T TransformValueReferencePair(
                IValueReferencePair that,
                TContext context
            );
            public T TransformValueList(
                IValueList that,
                TContext context
            );
            public T TransformLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that,
                TContext context
            );
            public T TransformLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that,
                TContext context
            );
            public T TransformLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that,
                TContext context
            );
            public T TransformDataSpecificationIec61360(
                IDataSpecificationIec61360 that,
                TContext context
            );
        }  // public interface ITransformerWithContext

        /// <summary>
        /// Perform double-dispatch to transform recursively
        /// the instances into something else.
        /// </summary>
        /// <remarks>
        /// When you use the transformer, please always call the main dispatching method
        /// <see cref="Transform" />. You should most probably never call the <c>Transform*</c>
        /// methods directly. They are only made public so that model classes can access them.
        /// </remarks>
        /// <typeparam name="TContext">The type of the transformation context</typeparam>
        /// <typeparam name="T">The type of the transformation result</typeparam>
        public abstract class AbstractTransformerWithContext<TContext, T>
            : ITransformerWithContext<TContext, T>
        {
            public T Transform(IClass that, TContext context)
            {
                return that.Transform(this, context);
            }

            public abstract T TransformExtension(
                IExtension that,
                TContext context
            );

            public abstract T TransformAdministrativeInformation(
                IAdministrativeInformation that,
                TContext context
            );

            public abstract T TransformQualifier(
                IQualifier that,
                TContext context
            );

            public abstract T TransformAssetAdministrationShell(
                IAssetAdministrationShell that,
                TContext context
            );

            public abstract T TransformAssetInformation(
                IAssetInformation that,
                TContext context
            );

            public abstract T TransformResource(
                IResource that,
                TContext context
            );

            public abstract T TransformSpecificAssetId(
                ISpecificAssetId that,
                TContext context
            );

            public abstract T TransformSubmodel(
                ISubmodel that,
                TContext context
            );

            public abstract T TransformRelationshipElement(
                IRelationshipElement that,
                TContext context
            );

            public abstract T TransformSubmodelElementList(
                ISubmodelElementList that,
                TContext context
            );

            public abstract T TransformSubmodelElementCollection(
                ISubmodelElementCollection that,
                TContext context
            );

            public abstract T TransformProperty(
                IProperty that,
                TContext context
            );

            public abstract T TransformMultiLanguageProperty(
                IMultiLanguageProperty that,
                TContext context
            );

            public abstract T TransformRange(
                IRange that,
                TContext context
            );

            public abstract T TransformReferenceElement(
                IReferenceElement that,
                TContext context
            );

            public abstract T TransformBlob(
                IBlob that,
                TContext context
            );

            public abstract T TransformFile(
                IFile that,
                TContext context
            );

            public abstract T TransformAnnotatedRelationshipElement(
                IAnnotatedRelationshipElement that,
                TContext context
            );

            public abstract T TransformEntity(
                IEntity that,
                TContext context
            );

            public abstract T TransformEventPayload(
                IEventPayload that,
                TContext context
            );

            public abstract T TransformBasicEventElement(
                IBasicEventElement that,
                TContext context
            );

            public abstract T TransformOperation(
                IOperation that,
                TContext context
            );

            public abstract T TransformOperationVariable(
                IOperationVariable that,
                TContext context
            );

            public abstract T TransformCapability(
                ICapability that,
                TContext context
            );

            public abstract T TransformConceptDescription(
                IConceptDescription that,
                TContext context
            );

            public abstract T TransformReference(
                IReference that,
                TContext context
            );

            public abstract T TransformKey(
                IKey that,
                TContext context
            );

            public abstract T TransformLangStringNameType(
                ILangStringNameType that,
                TContext context
            );

            public abstract T TransformLangStringTextType(
                ILangStringTextType that,
                TContext context
            );

            public abstract T TransformEnvironment(
                IEnvironment that,
                TContext context
            );

            public abstract T TransformEmbeddedDataSpecification(
                IEmbeddedDataSpecification that,
                TContext context
            );

            public abstract T TransformLevelType(
                ILevelType that,
                TContext context
            );

            public abstract T TransformValueReferencePair(
                IValueReferencePair that,
                TContext context
            );

            public abstract T TransformValueList(
                IValueList that,
                TContext context
            );

            public abstract T TransformLangStringPreferredNameTypeIec61360(
                ILangStringPreferredNameTypeIec61360 that,
                TContext context
            );

            public abstract T TransformLangStringShortNameTypeIec61360(
                ILangStringShortNameTypeIec61360 that,
                TContext context
            );

            public abstract T TransformLangStringDefinitionTypeIec61360(
                ILangStringDefinitionTypeIec61360 that,
                TContext context
            );

            public abstract T TransformDataSpecificationIec61360(
                IDataSpecificationIec61360 that,
                TContext context
            );
        }  // public abstract class AbstractTransformerWithContext
    }  // public static class Visitation
}  // namespace AasCore.Aas3_0

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
