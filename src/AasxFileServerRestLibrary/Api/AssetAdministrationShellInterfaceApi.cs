/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using IO.Swagger.Client;
//using IO.Swagger.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text.Json.Nodes;
//using AdminShellNS;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetAdministrationShellInterfaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteSubmodelReferenceById(string submodelIdentifier);

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubmodelReferenceByIdWithHttpInfo(string submodelIdentifier);
        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Reference&gt;</returns>
        List<Reference> GetAllSubmodelReferences();

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        ApiResponse<List<Reference>> GetAllSubmodelReferencesWithHttpInfo();
        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>AssetAdministrationShell</returns>
        AssetAdministrationShell GetAssetAdministrationShell(string content = null);

        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        ApiResponse<AssetAdministrationShell> GetAssetAdministrationShellWithHttpInfo(string content = null);
        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AssetInformation</returns>
        AssetInformation GetAssetInformation();

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AssetInformation</returns>
        ApiResponse<AssetInformation> GetAssetInformationWithHttpInfo();
        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>Reference</returns>
        Reference PostSubmodelReference(Reference body);

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>ApiResponse of Reference</returns>
        ApiResponse<Reference> PostSubmodelReferenceWithHttpInfo(Reference body);
        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns></returns>
        void PutAssetAdministrationShell(AssetAdministrationShell body, string content = null);

        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAssetAdministrationShellWithHttpInfo(AssetAdministrationShell body, string content = null);
        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns></returns>
        void PutAssetInformation(AssetInformation body);

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAssetInformationWithHttpInfo(AssetInformation body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubmodelReferenceByIdAsync(string submodelIdentifier);

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelReferenceByIdAsyncWithHttpInfo(string submodelIdentifier);
        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        System.Threading.Tasks.Task<List<Reference>> GetAllSubmodelReferencesAsync();

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Reference>>> GetAllSubmodelReferencesAsyncWithHttpInfo();
        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        System.Threading.Tasks.Task<AssetAdministrationShell> GetAssetAdministrationShellAsync(string content = null);

        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> GetAssetAdministrationShellAsyncWithHttpInfo(string content = null);
        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AssetInformation</returns>
        System.Threading.Tasks.Task<AssetInformation> GetAssetInformationAsync();

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AssetInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetInformation>> GetAssetInformationAsyncWithHttpInfo();
        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>Task of Reference</returns>
        System.Threading.Tasks.Task<Reference> PostSubmodelReferenceAsync(Reference body);

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>Task of ApiResponse (Reference)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reference>> PostSubmodelReferenceAsyncWithHttpInfo(Reference body);
        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAssetAdministrationShellAsync(AssetAdministrationShell body, string content = null);

        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellAsyncWithHttpInfo(AssetAdministrationShell body, string content = null);
        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAssetInformationAsync(AssetInformation body);

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetInformationAsyncWithHttpInfo(AssetInformation body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetAdministrationShellInterfaceApi : IAssetAdministrationShellInterfaceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellInterfaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellInterfaceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellInterfaceApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellInterfaceApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellInterfaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetAdministrationShellInterfaceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            //TODO (jtikekar, 2022-04-04): Change
            return this.Configuration.BasePath;
            //return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteSubmodelReferenceById(string submodelIdentifier)
        {
            DeleteSubmodelReferenceByIdWithHttpInfo(submodelIdentifier);
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubmodelReferenceByIdWithHttpInfo(string submodelIdentifier)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellInterfaceApi->DeleteSubmodelReferenceById");

            var localVarPath = "/aas/submodels/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelReferenceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubmodelReferenceByIdAsync(string submodelIdentifier)
        {
            await DeleteSubmodelReferenceByIdAsyncWithHttpInfo(submodelIdentifier);

        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelReferenceByIdAsyncWithHttpInfo(string submodelIdentifier)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellInterfaceApi->DeleteSubmodelReferenceById");

            var localVarPath = "/aas/submodels/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelReferenceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Reference&gt;</returns>
        public List<Reference> GetAllSubmodelReferences()
        {
            ApiResponse<List<Reference>> localVarResponse = GetAllSubmodelReferencesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        public ApiResponse<List<Reference>> GetAllSubmodelReferencesWithHttpInfo()
        {

            var localVarPath = "/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Reference>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        public async System.Threading.Tasks.Task<List<Reference>> GetAllSubmodelReferencesAsync()
        {
            ApiResponse<List<Reference>> localVarResponse = await GetAllSubmodelReferencesAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Reference>>> GetAllSubmodelReferencesAsyncWithHttpInfo()
        {

            var localVarPath = "/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Reference>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>AssetAdministrationShell</returns>
        public AssetAdministrationShell GetAssetAdministrationShell(string content = null)
        {
            ApiResponse<AssetAdministrationShell> localVarResponse = GetAssetAdministrationShellWithHttpInfo(content);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        public ApiResponse<AssetAdministrationShell> GetAssetAdministrationShellWithHttpInfo(string content = null)
        {

            var localVarPath = "/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            //return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));

            //TODO (jtikekar, 2022-04-04): Change during refactoring
            //var aas = AdminShellSerializationHelper.DeserializeFromJSON<AssetAdministrationShell>(localVarResponse.Content);
            JsonNode node = System.Text.Json.JsonSerializer.Deserialize<JsonNode>(localVarResponse.Content);
            var aas = Jsonization.Deserialize.AssetAdministrationShellFrom(node);
            return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        public async System.Threading.Tasks.Task<AssetAdministrationShell> GetAssetAdministrationShellAsync(string content = null)
        {
            ApiResponse<AssetAdministrationShell> localVarResponse = await GetAssetAdministrationShellAsyncWithHttpInfo(content);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> GetAssetAdministrationShellAsyncWithHttpInfo(string content = null)
        {

            var localVarPath = "/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AssetInformation</returns>
        public AssetInformation GetAssetInformation()
        {
            ApiResponse<AssetInformation> localVarResponse = GetAssetInformationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AssetInformation</returns>
        public ApiResponse<AssetInformation> GetAssetInformationWithHttpInfo()
        {

            var localVarPath = "/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetInformation)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInformation)));
        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AssetInformation</returns>
        public async System.Threading.Tasks.Task<AssetInformation> GetAssetInformationAsync()
        {
            ApiResponse<AssetInformation> localVarResponse = await GetAssetInformationAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AssetInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetInformation>> GetAssetInformationAsyncWithHttpInfo()
        {

            var localVarPath = "/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetInformation)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInformation)));
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>Reference</returns>
        public Reference PostSubmodelReference(Reference body)
        {
            ApiResponse<Reference> localVarResponse = PostSubmodelReferenceWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>ApiResponse of Reference</returns>
        public ApiResponse<Reference> PostSubmodelReferenceWithHttpInfo(Reference body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellInterfaceApi->PostSubmodelReference");

            var localVarPath = "/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Reference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Reference)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Reference)));
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>Task of Reference</returns>
        public async System.Threading.Tasks.Task<Reference> PostSubmodelReferenceAsync(Reference body)
        {
            ApiResponse<Reference> localVarResponse = await PostSubmodelReferenceAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <returns>Task of ApiResponse (Reference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Reference>> PostSubmodelReferenceAsyncWithHttpInfo(Reference body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellInterfaceApi->PostSubmodelReference");

            var localVarPath = "/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Reference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Reference)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Reference)));
        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns></returns>
        public void PutAssetAdministrationShell(AssetAdministrationShell body, string content = null)
        {
            PutAssetAdministrationShellWithHttpInfo(body, content);
        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAssetAdministrationShellWithHttpInfo(AssetAdministrationShell body, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellInterfaceApi->PutAssetAdministrationShell");

            var localVarPath = "/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept heade
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAssetAdministrationShellAsync(AssetAdministrationShell body, string content = null)
        {
            await PutAssetAdministrationShellAsyncWithHttpInfo(body, content);

        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellAsyncWithHttpInfo(AssetAdministrationShell body, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellInterfaceApi->PutAssetAdministrationShell");

            var localVarPath = "/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns></returns>
        public void PutAssetInformation(AssetInformation body)
        {
            PutAssetInformationWithHttpInfo(body);
        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAssetInformationWithHttpInfo(AssetInformation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellInterfaceApi->PutAssetInformation");

            var localVarPath = "/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAssetInformationAsync(AssetInformation body)
        {
            await PutAssetInformationAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetInformationAsyncWithHttpInfo(AssetInformation body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellInterfaceApi->PutAssetInformation");

            var localVarPath = "/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
