/* 
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository
 *
 * An exemplary interface combination for the use case of an Asset Administration Shell Repository
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using AdminShellNS;
using IO.Swagger.Client;
using IO.Swagger.Model;
using RestSharp;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetAdministrationShellRepositoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteAssetAdministrationShellById(string aasIdentifier);

        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetAdministrationShellByIdWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteConceptDescriptionById(string cdIdentifier);

        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConceptDescriptionByIdWithHttpInfo(string cdIdentifier);
        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns></returns>
        void DeleteSubmodelElementByPath(string aasIdentifier, string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubmodelElementByPathWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath);
        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns></returns>
        void DeleteSubmodelElementByPathSubmodelRepo(string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubmodelElementByPathSubmodelRepoWithHttpInfo(string submodelIdentifier, string idShortPath);
        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteSubmodelReferenceById(string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubmodelReferenceByIdWithHttpInfo(string aasIdentifier, string submodelIdentifier);
        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>byte[]</returns>
        byte[] GenerateSerializationByIds(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions);

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GenerateSerializationByIdsWithHttpInfo(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions);
        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>List&lt;AssetAdministrationShell&gt;</returns>
        List<AssetAdministrationShell> GetAllAssetAdministrationShells(List<IdentifierKeyValuePair> assetIds = null, string idShort = null);

        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetAdministrationShell&gt;</returns>
        ApiResponse<List<AssetAdministrationShell>> GetAllAssetAdministrationShellsWithHttpInfo(List<IdentifierKeyValuePair> assetIds = null, string idShort = null);
        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>List&lt;ConceptDescription&gt;</returns>
        List<ConceptDescription> GetAllConceptDescriptions(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>ApiResponse of List&lt;ConceptDescription&gt;</returns>
        ApiResponse<List<ConceptDescription>> GetAllConceptDescriptionsWithHttpInfo(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);
        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>List&lt;SubmodelElement&gt;</returns>
        List<SubmodelElement> GetAllSubmodelElements(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of List&lt;SubmodelElement&gt;</returns>
        ApiResponse<List<SubmodelElement>> GetAllSubmodelElementsWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>List&lt;SubmodelElement&gt;</returns>
        List<SubmodelElement> GetAllSubmodelElementsSubmodelRepo(string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of List&lt;SubmodelElement&gt;</returns>
        ApiResponse<List<SubmodelElement>> GetAllSubmodelElementsSubmodelRepoWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>List&lt;Reference&gt;</returns>
        List<Reference> GetAllSubmodelReferences(string aasIdentifier);

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        ApiResponse<List<Reference>> GetAllSubmodelReferencesWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Returns all Submodels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>List&lt;Submodel&gt;</returns>
        List<Submodel> GetAllSubmodels(string semanticId = null, string idShort = null);

        /// <summary>
        /// Returns all Submodels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>ApiResponse of List&lt;Submodel&gt;</returns>
        ApiResponse<List<Submodel>> GetAllSubmodelsWithHttpInfo(string semanticId = null, string idShort = null);
        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>AssetAdministrationShell</returns>
        AssetAdministrationShell GetAssetAdministrationShell(string aasIdentifier, string content = null);

        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        ApiResponse<AssetAdministrationShell> GetAssetAdministrationShellWithHttpInfo(string aasIdentifier, string content = null);
        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>AssetAdministrationShell</returns>
        //AssetAdministrationShell GetAssetAdministrationShellById (string aasIdentifier);
        AdminShell.AdministrationShell GetAssetAdministrationShellById(string aasIdentifier);

        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        //ApiResponse<AssetAdministrationShell> GetAssetAdministrationShellByIdWithHttpInfo (string aasIdentifier);
        ApiResponse<AdminShell.AdministrationShell> GetAssetAdministrationShellByIdWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>AssetInformation</returns>
        //TODO (jtikekar, 2022-04-04): Change during v3 upgrade
        //AssetInformation GetAssetInformation (string aasIdentifier);
        AdminShellV30.AssetInformation GetAssetInformation(string aasIdentifier);

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of AssetInformation</returns>
        //TODO (jtikekar, 2022-04-04): Change during v3 upgrade
        //ApiResponse<AssetInformation> GetAssetInformationWithHttpInfo (string aasIdentifier);
        ApiResponse<AdminShellV30.AssetInformation> GetAssetInformationWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ConceptDescription</returns>
        ConceptDescription GetConceptDescriptionById(string cdIdentifier);

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        ApiResponse<ConceptDescription> GetConceptDescriptionByIdWithHttpInfo(string cdIdentifier);
        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        OperationResult GetOperationAsyncResult(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null);

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        ApiResponse<OperationResult> GetOperationAsyncResultWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null);
        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        OperationResult GetOperationAsyncResultSubmodelRepo(string submodelIdentifier, string idShortPath, string handleId, string content = null);

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        ApiResponse<OperationResult> GetOperationAsyncResultSubmodelRepoWithHttpInfo(string submodelIdentifier, string idShortPath, string handleId, string content = null);
        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Submodel</returns>
        Submodel GetSubmodel(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Submodel</returns>
        ApiResponse<Submodel> GetSubmodelWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement GetSubmodelElementByPath(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> GetSubmodelElementByPathWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement GetSubmodelElementByPathSubmodelRepo(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> GetSubmodelElementByPathSubmodelRepoWithHttpInfo(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Submodel</returns>
        Submodel GetSubmodelSubmodelRepo(string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Submodel</returns>
        ApiResponse<Submodel> GetSubmodelSubmodelRepoWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        OperationResult InvokeOperation(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        ApiResponse<OperationResult> InvokeOperationWithHttpInfo(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);
        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        OperationResult InvokeOperationSubmodelRepo(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        ApiResponse<OperationResult> InvokeOperationSubmodelRepoWithHttpInfo(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);
        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>AssetAdministrationShell</returns>
        AssetAdministrationShell PostAssetAdministrationShell(AssetAdministrationShell body);

        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        ApiResponse<AssetAdministrationShell> PostAssetAdministrationShellWithHttpInfo(AssetAdministrationShell body);
        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ConceptDescription</returns>
        ConceptDescription PostConceptDescription(ConceptDescription body);

        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        ApiResponse<ConceptDescription> PostConceptDescriptionWithHttpInfo(ConceptDescription body);
        /// <summary>
        /// Creates a new Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>Submodel</returns>
        Submodel PostSubmodel(Submodel body);

        /// <summary>
        /// Creates a new Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>ApiResponse of Submodel</returns>
        ApiResponse<Submodel> PostSubmodelWithHttpInfo(Submodel body);
        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement PostSubmodelElement(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> PostSubmodelElementWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement PostSubmodelElementByPath(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> PostSubmodelElementByPathWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement PostSubmodelElementByPathSubmodelRepo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> PostSubmodelElementByPathSubmodelRepoWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement PostSubmodelElementSubmodelRepo(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> PostSubmodelElementSubmodelRepoWithHttpInfo(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Reference</returns>
        Reference PostSubmodelReference(Reference body, string aasIdentifier);

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Reference</returns>
        ApiResponse<Reference> PostSubmodelReferenceWithHttpInfo(Reference body, string aasIdentifier);
        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns></returns>
        void PutAssetAdministrationShell(AssetAdministrationShell body, string aasIdentifier, string content = null);

        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAssetAdministrationShellWithHttpInfo(AssetAdministrationShell body, string aasIdentifier, string content = null);
        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void PutAssetAdministrationShellById(AssetAdministrationShell body, string aasIdentifier);

        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAssetAdministrationShellByIdWithHttpInfo(AssetAdministrationShell body, string aasIdentifier);
        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void PutAssetInformation(AssetInformation body, string aasIdentifier);

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAssetInformationWithHttpInfo(AssetInformation body, string aasIdentifier);
        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void PutConceptDescriptionById(ConceptDescription body, string cdIdentifier);

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutConceptDescriptionByIdWithHttpInfo(ConceptDescription body, string cdIdentifier);
        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        void PutSubmodel(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutSubmodelWithHttpInfo(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        void PutSubmodelElementByPath(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutSubmodelElementByPathWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        void PutSubmodelElementByPathSubmodelRepo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutSubmodelElementByPathSubmodelRepoWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        void PutSubmodelSubmodelRepo(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutSubmodelSubmodelRepoWithHttpInfo(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetAdministrationShellByIdAsync(string aasIdentifier);

        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAdministrationShellByIdAsyncWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConceptDescriptionByIdAsync(string cdIdentifier);

        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConceptDescriptionByIdAsyncWithHttpInfo(string cdIdentifier);
        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubmodelElementByPathAsync(string aasIdentifier, string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelElementByPathAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath);
        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubmodelElementByPathSubmodelRepoAsync(string submodelIdentifier, string idShortPath);

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string idShortPath);
        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubmodelReferenceByIdAsync(string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelReferenceByIdAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier);
        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GenerateSerializationByIdsAsync(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions);

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateSerializationByIdsAsyncWithHttpInfo(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions);
        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>Task of List&lt;AssetAdministrationShell&gt;</returns>
        System.Threading.Tasks.Task<List<AssetAdministrationShell>> GetAllAssetAdministrationShellsAsync(List<IdentifierKeyValuePair> assetIds = null, string idShort = null);

        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetAdministrationShell&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetAdministrationShell>>> GetAllAssetAdministrationShellsAsyncWithHttpInfo(List<IdentifierKeyValuePair> assetIds = null, string idShort = null);
        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of List&lt;ConceptDescription&gt;</returns>
        System.Threading.Tasks.Task<List<ConceptDescription>> GetAllConceptDescriptionsAsync(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ConceptDescription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConceptDescription>>> GetAllConceptDescriptionsAsyncWithHttpInfo(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);
        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of List&lt;SubmodelElement&gt;</returns>
        System.Threading.Tasks.Task<List<SubmodelElement>> GetAllSubmodelElementsAsync(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelElement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SubmodelElement>>> GetAllSubmodelElementsAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of List&lt;SubmodelElement&gt;</returns>
        System.Threading.Tasks.Task<List<SubmodelElement>> GetAllSubmodelElementsSubmodelRepoAsync(string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelElement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SubmodelElement>>> GetAllSubmodelElementsSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        System.Threading.Tasks.Task<List<Reference>> GetAllSubmodelReferencesAsync(string aasIdentifier);

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Reference>>> GetAllSubmodelReferencesAsyncWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Returns all Submodels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>Task of List&lt;Submodel&gt;</returns>
        System.Threading.Tasks.Task<List<Submodel>> GetAllSubmodelsAsync(string semanticId = null, string idShort = null);

        /// <summary>
        /// Returns all Submodels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Submodel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Submodel>>> GetAllSubmodelsAsyncWithHttpInfo(string semanticId = null, string idShort = null);
        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        System.Threading.Tasks.Task<AssetAdministrationShell> GetAssetAdministrationShellAsync(string aasIdentifier, string content = null);

        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> GetAssetAdministrationShellAsyncWithHttpInfo(string aasIdentifier, string content = null);
        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        System.Threading.Tasks.Task<AssetAdministrationShell> GetAssetAdministrationShellByIdAsync(string aasIdentifier);

        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> GetAssetAdministrationShellByIdAsyncWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of AssetInformation</returns>
        System.Threading.Tasks.Task<AssetInformation> GetAssetInformationAsync(string aasIdentifier);

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (AssetInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetInformation>> GetAssetInformationAsyncWithHttpInfo(string aasIdentifier);
        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ConceptDescription</returns>
        System.Threading.Tasks.Task<ConceptDescription> GetConceptDescriptionByIdAsync(string cdIdentifier);

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> GetConceptDescriptionByIdAsyncWithHttpInfo(string cdIdentifier);
        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        System.Threading.Tasks.Task<OperationResult> GetOperationAsyncResultAsync(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null);

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResult>> GetOperationAsyncResultAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null);
        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        System.Threading.Tasks.Task<OperationResult> GetOperationAsyncResultSubmodelRepoAsync(string submodelIdentifier, string idShortPath, string handleId, string content = null);

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResult>> GetOperationAsyncResultSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string idShortPath, string handleId, string content = null);
        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of Submodel</returns>
        System.Threading.Tasks.Task<Submodel> GetSubmodelAsync(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submodel>> GetSubmodelAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> GetSubmodelElementByPathAsync(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> GetSubmodelElementByPathAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> GetSubmodelElementByPathSubmodelRepoAsync(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> GetSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of Submodel</returns>
        System.Threading.Tasks.Task<Submodel> GetSubmodelSubmodelRepoAsync(string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submodel>> GetSubmodelSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        System.Threading.Tasks.Task<OperationResult> InvokeOperationAsync(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResult>> InvokeOperationAsyncWithHttpInfo(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);
        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        System.Threading.Tasks.Task<OperationResult> InvokeOperationSubmodelRepoAsync(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResult>> InvokeOperationSubmodelRepoAsyncWithHttpInfo(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null);
        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        System.Threading.Tasks.Task<AssetAdministrationShell> PostAssetAdministrationShellAsync(AssetAdministrationShell body);

        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> PostAssetAdministrationShellAsyncWithHttpInfo(AssetAdministrationShell body);
        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ConceptDescription</returns>
        System.Threading.Tasks.Task<ConceptDescription> PostConceptDescriptionAsync(ConceptDescription body);

        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> PostConceptDescriptionAsyncWithHttpInfo(ConceptDescription body);
        /// <summary>
        /// Creates a new Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>Task of Submodel</returns>
        System.Threading.Tasks.Task<Submodel> PostSubmodelAsync(Submodel body);

        /// <summary>
        /// Creates a new Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submodel>> PostSubmodelAsyncWithHttpInfo(Submodel body);
        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementAsync(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementAsyncWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementByPathAsync(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementByPathAsyncWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementByPathSubmodelRepoAsync(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementSubmodelRepoAsync(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementSubmodelRepoAsyncWithHttpInfo(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of Reference</returns>
        System.Threading.Tasks.Task<Reference> PostSubmodelReferenceAsync(Reference body, string aasIdentifier);

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (Reference)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reference>> PostSubmodelReferenceAsyncWithHttpInfo(Reference body, string aasIdentifier);
        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAssetAdministrationShellAsync(AssetAdministrationShell body, string aasIdentifier, string content = null);

        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellAsyncWithHttpInfo(AssetAdministrationShell body, string aasIdentifier, string content = null);
        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAssetAdministrationShellByIdAsync(AssetAdministrationShell body, string aasIdentifier);

        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellByIdAsyncWithHttpInfo(AssetAdministrationShell body, string aasIdentifier);
        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAssetInformationAsync(AssetInformation body, string aasIdentifier);

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetInformationAsyncWithHttpInfo(AssetInformation body, string aasIdentifier);
        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutConceptDescriptionByIdAsync(ConceptDescription body, string cdIdentifier);

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutConceptDescriptionByIdAsyncWithHttpInfo(ConceptDescription body, string cdIdentifier);
        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutSubmodelAsync(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelAsyncWithHttpInfo(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutSubmodelElementByPathAsync(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelElementByPathAsyncWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutSubmodelElementByPathSubmodelRepoAsync(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutSubmodelSubmodelRepoAsync(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelSubmodelRepoAsyncWithHttpInfo(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetAdministrationShellRepositoryApi : IAssetAdministrationShellRepositoryApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellRepositoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellRepositoryApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellRepositoryApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellRepositoryApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellRepositoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetAdministrationShellRepositoryApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            //TODO (jtikekar, 2022-04-04): Change
            return this.Configuration.BasePath;
            //return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteAssetAdministrationShellById(string aasIdentifier)
        {
            DeleteAssetAdministrationShellByIdWithHttpInfo(aasIdentifier);
        }

        /// <summary>
        /// Deletes an Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssetAdministrationShellByIdWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteAssetAdministrationShellById");

            var localVarPath = "/shells/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssetAdministrationShellById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetAdministrationShellByIdAsync(string aasIdentifier)
        {
            await DeleteAssetAdministrationShellByIdAsyncWithHttpInfo(aasIdentifier);

        }

        /// <summary>
        /// Deletes an Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAdministrationShellByIdAsyncWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteAssetAdministrationShellById");

            var localVarPath = "/shells/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssetAdministrationShellById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteConceptDescriptionById(string cdIdentifier)
        {
            DeleteConceptDescriptionByIdWithHttpInfo(cdIdentifier);
        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteConceptDescriptionByIdWithHttpInfo(string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConceptDescriptionByIdAsync(string cdIdentifier)
        {
            await DeleteConceptDescriptionByIdAsyncWithHttpInfo(cdIdentifier);

        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConceptDescriptionByIdAsyncWithHttpInfo(string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns></returns>
        public void DeleteSubmodelElementByPath(string aasIdentifier, string submodelIdentifier, string idShortPath)
        {
            DeleteSubmodelElementByPathWithHttpInfo(aasIdentifier, submodelIdentifier, idShortPath);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubmodelElementByPathWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubmodelElementByPathAsync(string aasIdentifier, string submodelIdentifier, string idShortPath)
        {
            await DeleteSubmodelElementByPathAsyncWithHttpInfo(aasIdentifier, submodelIdentifier, idShortPath);

        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelElementByPathAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns></returns>
        public void DeleteSubmodelElementByPathSubmodelRepo(string submodelIdentifier, string idShortPath)
        {
            DeleteSubmodelElementByPathSubmodelRepoWithHttpInfo(submodelIdentifier, idShortPath);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubmodelElementByPathSubmodelRepoWithHttpInfo(string submodelIdentifier, string idShortPath)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubmodelElementByPathSubmodelRepoAsync(string submodelIdentifier, string idShortPath)
        {
            await DeleteSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(submodelIdentifier, idShortPath);

        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string idShortPath)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteSubmodelReferenceById(string aasIdentifier, string submodelIdentifier)
        {
            DeleteSubmodelReferenceByIdWithHttpInfo(aasIdentifier, submodelIdentifier);
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubmodelReferenceByIdWithHttpInfo(string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelReferenceById");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelReferenceById");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelReferenceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubmodelReferenceByIdAsync(string aasIdentifier, string submodelIdentifier)
        {
            await DeleteSubmodelReferenceByIdAsyncWithHttpInfo(aasIdentifier, submodelIdentifier);

        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelReferenceByIdAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelReferenceById");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->DeleteSubmodelReferenceById");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelReferenceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>byte[]</returns>
        public byte[] GenerateSerializationByIds(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions)
        {
            ApiResponse<byte[]> localVarResponse = GenerateSerializationByIdsWithHttpInfo(aasIds, submodelIds, includeConceptDescriptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse<byte[]> GenerateSerializationByIdsWithHttpInfo(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions)
        {
            // verify the required parameter 'aasIds' is set
            if (aasIds == null)
                throw new ApiException(400, "Missing required parameter 'aasIds' when calling AssetAdministrationShellRepositoryApi->GenerateSerializationByIds");
            // verify the required parameter 'submodelIds' is set
            if (submodelIds == null)
                throw new ApiException(400, "Missing required parameter 'submodelIds' when calling AssetAdministrationShellRepositoryApi->GenerateSerializationByIds");
            // verify the required parameter 'includeConceptDescriptions' is set
            if (includeConceptDescriptions == null)
                throw new ApiException(400, "Missing required parameter 'includeConceptDescriptions' when calling AssetAdministrationShellRepositoryApi->GenerateSerializationByIds");

            var localVarPath = "/serialization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/asset-administration-shell-package+xml",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aasIds", aasIds)); // query parameter
            if (submodelIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "submodelIds", submodelIds)); // query parameter
            if (includeConceptDescriptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConceptDescriptions", includeConceptDescriptions)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSerializationByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[])this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GenerateSerializationByIdsAsync(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions)
        {
            ApiResponse<byte[]> localVarResponse = await GenerateSerializationByIdsAsyncWithHttpInfo(aasIds, submodelIds, includeConceptDescriptions);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateSerializationByIdsAsyncWithHttpInfo(List<string> aasIds, List<string> submodelIds, bool? includeConceptDescriptions)
        {
            // verify the required parameter 'aasIds' is set
            if (aasIds == null)
                throw new ApiException(400, "Missing required parameter 'aasIds' when calling AssetAdministrationShellRepositoryApi->GenerateSerializationByIds");
            // verify the required parameter 'submodelIds' is set
            if (submodelIds == null)
                throw new ApiException(400, "Missing required parameter 'submodelIds' when calling AssetAdministrationShellRepositoryApi->GenerateSerializationByIds");
            // verify the required parameter 'includeConceptDescriptions' is set
            if (includeConceptDescriptions == null)
                throw new ApiException(400, "Missing required parameter 'includeConceptDescriptions' when calling AssetAdministrationShellRepositoryApi->GenerateSerializationByIds");

            var localVarPath = "/serialization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/asset-administration-shell-package+xml",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "aasIds", aasIds)); // query parameter
            if (submodelIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "submodelIds", submodelIds)); // query parameter
            if (includeConceptDescriptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConceptDescriptions", includeConceptDescriptions)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSerializationByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[])this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Returns all Asset Administration Shells 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>List&lt;AssetAdministrationShell&gt;</returns>
        public List<AssetAdministrationShell> GetAllAssetAdministrationShells(List<IdentifierKeyValuePair> assetIds = null, string idShort = null)
        {
            ApiResponse<List<AssetAdministrationShell>> localVarResponse = GetAllAssetAdministrationShellsWithHttpInfo(assetIds, idShort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Asset Administration Shells 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetAdministrationShell&gt;</returns>
        public ApiResponse<List<AssetAdministrationShell>> GetAllAssetAdministrationShellsWithHttpInfo(List<IdentifierKeyValuePair> assetIds = null, string idShort = null)
        {

            var localVarPath = "/shells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assetIds", assetIds)); // query parameter
            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAssetAdministrationShells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetAdministrationShell>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssetAdministrationShell>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetAdministrationShell>)));
        }

        /// <summary>
        /// Returns all Asset Administration Shells 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>Task of List&lt;AssetAdministrationShell&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetAdministrationShell>> GetAllAssetAdministrationShellsAsync(List<IdentifierKeyValuePair> assetIds = null, string idShort = null)
        {
            ApiResponse<List<AssetAdministrationShell>> localVarResponse = await GetAllAssetAdministrationShellsAsyncWithHttpInfo(assetIds, idShort);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all Asset Administration Shells 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The key-value-pair of an Asset identifier (optional)</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetAdministrationShell&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetAdministrationShell>>> GetAllAssetAdministrationShellsAsyncWithHttpInfo(List<IdentifierKeyValuePair> assetIds = null, string idShort = null)
        {

            var localVarPath = "/shells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assetIds", assetIds)); // query parameter
            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAssetAdministrationShells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetAdministrationShell>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssetAdministrationShell>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetAdministrationShell>)));
        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>List&lt;ConceptDescription&gt;</returns>
        public List<ConceptDescription> GetAllConceptDescriptions(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {
            ApiResponse<List<ConceptDescription>> localVarResponse = GetAllConceptDescriptionsWithHttpInfo(idShort, isCaseOf, dataSpecificationRef);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>ApiResponse of List&lt;ConceptDescription&gt;</returns>
        public ApiResponse<List<ConceptDescription>> GetAllConceptDescriptionsWithHttpInfo(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter
            if (isCaseOf != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isCaseOf", isCaseOf)); // query parameter
            if (dataSpecificationRef != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataSpecificationRef", dataSpecificationRef)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllConceptDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConceptDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ConceptDescription>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConceptDescription>)));
        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of List&lt;ConceptDescription&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConceptDescription>> GetAllConceptDescriptionsAsync(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {
            ApiResponse<List<ConceptDescription>> localVarResponse = await GetAllConceptDescriptionsAsyncWithHttpInfo(idShort, isCaseOf, dataSpecificationRef);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ConceptDescription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ConceptDescription>>> GetAllConceptDescriptionsAsyncWithHttpInfo(string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter
            if (isCaseOf != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isCaseOf", isCaseOf)); // query parameter
            if (dataSpecificationRef != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataSpecificationRef", dataSpecificationRef)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllConceptDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConceptDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ConceptDescription>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConceptDescription>)));
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>List&lt;SubmodelElement&gt;</returns>
        public List<SubmodelElement> GetAllSubmodelElements(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<List<SubmodelElement>> localVarResponse = GetAllSubmodelElementsWithHttpInfo(aasIdentifier, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of List&lt;SubmodelElement&gt;</returns>
        public ApiResponse<List<SubmodelElement>> GetAllSubmodelElementsWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelElements");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelElements");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelElement>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelElement>)));
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of List&lt;SubmodelElement&gt;</returns>
        public async System.Threading.Tasks.Task<List<SubmodelElement>> GetAllSubmodelElementsAsync(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<List<SubmodelElement>> localVarResponse = await GetAllSubmodelElementsAsyncWithHttpInfo(aasIdentifier, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelElement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SubmodelElement>>> GetAllSubmodelElementsAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelElements");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelElements");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelElement>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelElement>)));
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>List&lt;SubmodelElement&gt;</returns>
        public List<SubmodelElement> GetAllSubmodelElementsSubmodelRepo(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<List<SubmodelElement>> localVarResponse = GetAllSubmodelElementsSubmodelRepoWithHttpInfo(submodelIdentifier, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of List&lt;SubmodelElement&gt;</returns>
        public ApiResponse<List<SubmodelElement>> GetAllSubmodelElementsSubmodelRepoWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelElementsSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelElementsSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelElement>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelElement>)));
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of List&lt;SubmodelElement&gt;</returns>
        public async System.Threading.Tasks.Task<List<SubmodelElement>> GetAllSubmodelElementsSubmodelRepoAsync(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<List<SubmodelElement>> localVarResponse = await GetAllSubmodelElementsSubmodelRepoAsyncWithHttpInfo(submodelIdentifier, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelElement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SubmodelElement>>> GetAllSubmodelElementsSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelElementsSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelElementsSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelElement>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelElement>)));
        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>List&lt;Reference&gt;</returns>
        public List<Reference> GetAllSubmodelReferences(string aasIdentifier)
        {
            ApiResponse<List<Reference>> localVarResponse = GetAllSubmodelReferencesWithHttpInfo(aasIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        public ApiResponse<List<Reference>> GetAllSubmodelReferencesWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelReferences");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Reference>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        public async System.Threading.Tasks.Task<List<Reference>> GetAllSubmodelReferencesAsync(string aasIdentifier)
        {
            ApiResponse<List<Reference>> localVarResponse = await GetAllSubmodelReferencesAsyncWithHttpInfo(aasIdentifier);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all submodel references 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Reference>>> GetAllSubmodelReferencesAsyncWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAllSubmodelReferences");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Reference>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// Returns all Submodels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>List&lt;Submodel&gt;</returns>
        public List<Submodel> GetAllSubmodels(string semanticId = null, string idShort = null)
        {
            ApiResponse<List<Submodel>> localVarResponse = GetAllSubmodelsWithHttpInfo(semanticId, idShort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Submodels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>ApiResponse of List&lt;Submodel&gt;</returns>
        public ApiResponse<List<Submodel>> GetAllSubmodelsWithHttpInfo(string semanticId = null, string idShort = null)
        {

            var localVarPath = "/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (semanticId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "semanticId", semanticId)); // query parameter
            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Submodel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Submodel>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Submodel>)));
        }

        /// <summary>
        /// Returns all Submodels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>Task of List&lt;Submodel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Submodel>> GetAllSubmodelsAsync(string semanticId = null, string idShort = null)
        {
            ApiResponse<List<Submodel>> localVarResponse = await GetAllSubmodelsAsyncWithHttpInfo(semanticId, idShort);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all Submodels 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="idShort">The Submodel’s idShort (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Submodel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Submodel>>> GetAllSubmodelsAsyncWithHttpInfo(string semanticId = null, string idShort = null)
        {

            var localVarPath = "/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (semanticId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "semanticId", semanticId)); // query parameter
            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Submodel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Submodel>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Submodel>)));
        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>AssetAdministrationShell</returns>
        public AssetAdministrationShell GetAssetAdministrationShell(string aasIdentifier, string content = null)
        {
            ApiResponse<AssetAdministrationShell> localVarResponse = GetAssetAdministrationShellWithHttpInfo(aasIdentifier, content);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        public ApiResponse<AssetAdministrationShell> GetAssetAdministrationShellWithHttpInfo(string aasIdentifier, string content = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAssetAdministrationShell");

            var localVarPath = "/shells/{aasIdentifier}/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        public async System.Threading.Tasks.Task<AssetAdministrationShell> GetAssetAdministrationShellAsync(string aasIdentifier, string content = null)
        {
            ApiResponse<AssetAdministrationShell> localVarResponse = await GetAssetAdministrationShellAsyncWithHttpInfo(aasIdentifier, content);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> GetAssetAdministrationShellAsyncWithHttpInfo(string aasIdentifier, string content = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAssetAdministrationShell");

            var localVarPath = "/shells/{aasIdentifier}/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>AssetAdministrationShell</returns>
        //public AssetAdministrationShell GetAssetAdministrationShellById (string aasIdentifier)
        public AdminShell.AdministrationShell GetAssetAdministrationShellById(string aasIdentifier)
        {
            //ApiResponse<AssetAdministrationShell> localVarResponse = GetAssetAdministrationShellByIdWithHttpInfo(aasIdentifier);
            ApiResponse<AdminShell.AdministrationShell> localVarResponse = GetAssetAdministrationShellByIdWithHttpInfo(aasIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        //public ApiResponse< AssetAdministrationShell > GetAssetAdministrationShellByIdWithHttpInfo (string aasIdentifier)
        public ApiResponse<AdminShell.AdministrationShell> GetAssetAdministrationShellByIdWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAssetAdministrationShellById");

            var localVarPath = "/shells/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShellById", localVarResponse);
                if (exception != null) throw exception;
            }

            //TODO (jtikekar, 2022-04-04): Change duting V3 upgrade
            //return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (AssetAdministrationShell) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
            return new ApiResponse<AdminShell.AdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminShell.AdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminShell.AdministrationShell)));
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        public async System.Threading.Tasks.Task<AssetAdministrationShell> GetAssetAdministrationShellByIdAsync(string aasIdentifier)
        {
            ApiResponse<AssetAdministrationShell> localVarResponse = await GetAssetAdministrationShellByIdAsyncWithHttpInfo(aasIdentifier);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> GetAssetAdministrationShellByIdAsyncWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAssetAdministrationShellById");

            var localVarPath = "/shells/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShellById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>AssetInformation</returns>
        //TODO (jtikekar, 2022-04-04): Change to V3
        //public AssetInformation GetAssetInformation (string aasIdentifier)
        public AdminShellV30.AssetInformation GetAssetInformation(string aasIdentifier)
        {
            //ApiResponse<AssetInformation> localVarResponse = GetAssetInformationWithHttpInfo(aasIdentifier);
            ApiResponse<AdminShellV30.AssetInformation> localVarResponse = GetAssetInformationWithHttpInfo(aasIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of AssetInformation</returns>
        //TODO (jtikekar, 2022-04-04): Change during v3 upgrade
        //public ApiResponse< AssetInformation > GetAssetInformationWithHttpInfo (string aasIdentifier)
        public ApiResponse<AdminShellV30.AssetInformation> GetAssetInformationWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAssetInformation");

            var localVarPath = "/shells/{aasIdentifier}/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            //return new ApiResponse<AssetInformation>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (AssetInformation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInformation)));

            return new ApiResponse<AdminShellV30.AssetInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminShellV30.AssetInformation)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminShellV30.AssetInformation)));
        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of AssetInformation</returns>
        public async System.Threading.Tasks.Task<AssetInformation> GetAssetInformationAsync(string aasIdentifier)
        {
            ApiResponse<AssetInformation> localVarResponse = await GetAssetInformationAsyncWithHttpInfo(aasIdentifier);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (AssetInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetInformation>> GetAssetInformationAsyncWithHttpInfo(string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAssetInformation");

            var localVarPath = "/shells/{aasIdentifier}/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetInformation)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInformation)));
        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ConceptDescription</returns>
        public ConceptDescription GetConceptDescriptionById(string cdIdentifier)
        {
            ApiResponse<ConceptDescription> localVarResponse = GetConceptDescriptionByIdWithHttpInfo(cdIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        public ApiResponse<ConceptDescription> GetConceptDescriptionByIdWithHttpInfo(string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling AssetAdministrationShellRepositoryApi->GetConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ConceptDescription</returns>
        public async System.Threading.Tasks.Task<ConceptDescription> GetConceptDescriptionByIdAsync(string cdIdentifier)
        {
            ApiResponse<ConceptDescription> localVarResponse = await GetConceptDescriptionByIdAsyncWithHttpInfo(cdIdentifier);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> GetConceptDescriptionByIdAsyncWithHttpInfo(string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling AssetAdministrationShellRepositoryApi->GetConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        public OperationResult GetOperationAsyncResult(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = GetOperationAsyncResultWithHttpInfo(aasIdentifier, submodelIdentifier, idShortPath, handleId, content);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        public ApiResponse<OperationResult> GetOperationAsyncResultWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");
            // verify the required parameter 'handleId' is set
            if (handleId == null)
                throw new ApiException(400, "Missing required parameter 'handleId' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (handleId != null) localVarPathParams.Add("handleId", this.Configuration.ApiClient.ParameterToString(handleId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperationAsyncResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        public async System.Threading.Tasks.Task<OperationResult> GetOperationAsyncResultAsync(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = await GetOperationAsyncResultAsyncWithHttpInfo(aasIdentifier, submodelIdentifier, idShortPath, handleId, content);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResult>> GetOperationAsyncResultAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");
            // verify the required parameter 'handleId' is set
            if (handleId == null)
                throw new ApiException(400, "Missing required parameter 'handleId' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResult");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (handleId != null) localVarPathParams.Add("handleId", this.Configuration.ApiClient.ParameterToString(handleId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperationAsyncResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        public OperationResult GetOperationAsyncResultSubmodelRepo(string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = GetOperationAsyncResultSubmodelRepoWithHttpInfo(submodelIdentifier, idShortPath, handleId, content);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        public ApiResponse<OperationResult> GetOperationAsyncResultSubmodelRepoWithHttpInfo(string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResultSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResultSubmodelRepo");
            // verify the required parameter 'handleId' is set
            if (handleId == null)
                throw new ApiException(400, "Missing required parameter 'handleId' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResultSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (handleId != null) localVarPathParams.Add("handleId", this.Configuration.ApiClient.ParameterToString(handleId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperationAsyncResultSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        public async System.Threading.Tasks.Task<OperationResult> GetOperationAsyncResultSubmodelRepoAsync(string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = await GetOperationAsyncResultSubmodelRepoAsyncWithHttpInfo(submodelIdentifier, idShortPath, handleId, content);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResult>> GetOperationAsyncResultSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string idShortPath, string handleId, string content = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResultSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResultSubmodelRepo");
            // verify the required parameter 'handleId' is set
            if (handleId == null)
                throw new ApiException(400, "Missing required parameter 'handleId' when calling AssetAdministrationShellRepositoryApi->GetOperationAsyncResultSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (handleId != null) localVarPathParams.Add("handleId", this.Configuration.ApiClient.ParameterToString(handleId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperationAsyncResultSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Submodel</returns>
        public Submodel GetSubmodel(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<Submodel> localVarResponse = GetSubmodelWithHttpInfo(aasIdentifier, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Submodel</returns>
        public ApiResponse<Submodel> GetSubmodelWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodel");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodel");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of Submodel</returns>
        public async System.Threading.Tasks.Task<Submodel> GetSubmodelAsync(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<Submodel> localVarResponse = await GetSubmodelAsyncWithHttpInfo(aasIdentifier, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submodel>> GetSubmodelAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodel");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodel");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement GetSubmodelElementByPath(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = GetSubmodelElementByPathWithHttpInfo(aasIdentifier, submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse<SubmodelElement> GetSubmodelElementByPathWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> GetSubmodelElementByPathAsync(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = await GetSubmodelElementByPathAsyncWithHttpInfo(aasIdentifier, submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> GetSubmodelElementByPathAsyncWithHttpInfo(string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement GetSubmodelElementByPathSubmodelRepo(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = GetSubmodelElementByPathSubmodelRepoWithHttpInfo(submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse<SubmodelElement> GetSubmodelElementByPathSubmodelRepoWithHttpInfo(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> GetSubmodelElementByPathSubmodelRepoAsync(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = await GetSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> GetSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->GetSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Submodel</returns>
        public Submodel GetSubmodelSubmodelRepo(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<Submodel> localVarResponse = GetSubmodelSubmodelRepoWithHttpInfo(submodelIdentifier, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Submodel</returns>
        public ApiResponse<Submodel> GetSubmodelSubmodelRepoWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of Submodel</returns>
        public async System.Threading.Tasks.Task<Submodel> GetSubmodelSubmodelRepoAsync(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<Submodel> localVarResponse = await GetSubmodelSubmodelRepoAsyncWithHttpInfo(submodelIdentifier, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submodel>> GetSubmodelSubmodelRepoAsyncWithHttpInfo(string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->GetSubmodelSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        public OperationResult InvokeOperation(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = InvokeOperationWithHttpInfo(body, aasIdentifier, submodelIdentifier, idShortPath, async, content);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        public ApiResponse<OperationResult> InvokeOperationWithHttpInfo(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/invoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvokeOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        public async System.Threading.Tasks.Task<OperationResult> InvokeOperationAsync(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = await InvokeOperationAsyncWithHttpInfo(body, aasIdentifier, submodelIdentifier, idShortPath, async, content);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResult>> InvokeOperationAsyncWithHttpInfo(OperationRequest body, string aasIdentifier, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->InvokeOperation");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/invoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvokeOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        public OperationResult InvokeOperationSubmodelRepo(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = InvokeOperationSubmodelRepoWithHttpInfo(body, submodelIdentifier, idShortPath, async, content);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        public ApiResponse<OperationResult> InvokeOperationSubmodelRepoWithHttpInfo(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->InvokeOperationSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->InvokeOperationSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->InvokeOperationSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/invoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvokeOperationSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        public async System.Threading.Tasks.Task<OperationResult> InvokeOperationSubmodelRepoAsync(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            ApiResponse<OperationResult> localVarResponse = await InvokeOperationSubmodelRepoAsyncWithHttpInfo(body, submodelIdentifier, idShortPath, async, content);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResult>> InvokeOperationSubmodelRepoAsyncWithHttpInfo(OperationRequest body, string submodelIdentifier, string idShortPath, bool? async = null, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->InvokeOperationSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->InvokeOperationSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->InvokeOperationSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/invoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvokeOperationSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Creates a new Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>AssetAdministrationShell</returns>
        public AssetAdministrationShell PostAssetAdministrationShell(AssetAdministrationShell body)
        {
            ApiResponse<AssetAdministrationShell> localVarResponse = PostAssetAdministrationShellWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>ApiResponse of AssetAdministrationShell</returns>
        public ApiResponse<AssetAdministrationShell> PostAssetAdministrationShellWithHttpInfo(AssetAdministrationShell body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostAssetAdministrationShell");

            var localVarPath = "/shells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
        }

        /// <summary>
        /// Creates a new Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>Task of AssetAdministrationShell</returns>
        public async System.Threading.Tasks.Task<AssetAdministrationShell> PostAssetAdministrationShellAsync(AssetAdministrationShell body)
        {
            ApiResponse<AssetAdministrationShell> localVarResponse = await PostAssetAdministrationShellAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShell)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShell>> PostAssetAdministrationShellAsyncWithHttpInfo(AssetAdministrationShell body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostAssetAdministrationShell");

            var localVarPath = "/shells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShell)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ConceptDescription</returns>
        public ConceptDescription PostConceptDescription(ConceptDescription body)
        {
            ApiResponse<ConceptDescription> localVarResponse = PostConceptDescriptionWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        public ApiResponse<ConceptDescription> PostConceptDescriptionWithHttpInfo(ConceptDescription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostConceptDescription");

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConceptDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ConceptDescription</returns>
        public async System.Threading.Tasks.Task<ConceptDescription> PostConceptDescriptionAsync(ConceptDescription body)
        {
            ApiResponse<ConceptDescription> localVarResponse = await PostConceptDescriptionAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> PostConceptDescriptionAsyncWithHttpInfo(ConceptDescription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostConceptDescription");

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConceptDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Creates a new Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>Submodel</returns>
        public Submodel PostSubmodel(Submodel body)
        {
            ApiResponse<Submodel> localVarResponse = PostSubmodelWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>ApiResponse of Submodel</returns>
        public ApiResponse<Submodel> PostSubmodelWithHttpInfo(Submodel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodel");

            var localVarPath = "/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Creates a new Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>Task of Submodel</returns>
        public async System.Threading.Tasks.Task<Submodel> PostSubmodelAsync(Submodel body)
        {
            ApiResponse<Submodel> localVarResponse = await PostSubmodelAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submodel>> PostSubmodelAsyncWithHttpInfo(Submodel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodel");

            var localVarPath = "/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement PostSubmodelElement(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = PostSubmodelElementWithHttpInfo(body, aasIdentifier, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse<SubmodelElement> PostSubmodelElementWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElement");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElement");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElement");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementAsync(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = await PostSubmodelElementAsyncWithHttpInfo(body, aasIdentifier, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementAsyncWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElement");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElement");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElement");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement PostSubmodelElementByPath(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = PostSubmodelElementByPathWithHttpInfo(body, aasIdentifier, submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse<SubmodelElement> PostSubmodelElementByPathWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementByPathAsync(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = await PostSubmodelElementByPathAsyncWithHttpInfo(body, aasIdentifier, submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementByPathAsyncWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement PostSubmodelElementByPathSubmodelRepo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = PostSubmodelElementByPathSubmodelRepoWithHttpInfo(body, submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse<SubmodelElement> PostSubmodelElementByPathSubmodelRepoWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementByPathSubmodelRepoAsync(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = await PostSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(body, submodelIdentifier, idShortPath, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement PostSubmodelElementSubmodelRepo(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = PostSubmodelElementSubmodelRepoWithHttpInfo(body, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse<SubmodelElement> PostSubmodelElementSubmodelRepoWithHttpInfo(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementSubmodelRepoAsync(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            ApiResponse<SubmodelElement> localVarResponse = await PostSubmodelElementSubmodelRepoAsyncWithHttpInfo(body, submodelIdentifier, level, content, extent);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementSubmodelRepoAsyncWithHttpInfo(SubmodelElement body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelElementSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Reference</returns>
        public Reference PostSubmodelReference(Reference body, string aasIdentifier)
        {
            ApiResponse<Reference> localVarResponse = PostSubmodelReferenceWithHttpInfo(body, aasIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Reference</returns>
        public ApiResponse<Reference> PostSubmodelReferenceWithHttpInfo(Reference body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelReference");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelReference");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Reference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Reference)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Reference)));
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of Reference</returns>
        public async System.Threading.Tasks.Task<Reference> PostSubmodelReferenceAsync(Reference body, string aasIdentifier)
        {
            ApiResponse<Reference> localVarResponse = await PostSubmodelReferenceAsyncWithHttpInfo(body, aasIdentifier);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (Reference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Reference>> PostSubmodelReferenceAsyncWithHttpInfo(Reference body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PostSubmodelReference");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PostSubmodelReference");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Reference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Reference)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Reference)));
        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns></returns>
        public void PutAssetAdministrationShell(AssetAdministrationShell body, string aasIdentifier, string content = null)
        {
            PutAssetAdministrationShellWithHttpInfo(body, aasIdentifier, content);
        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAssetAdministrationShellWithHttpInfo(AssetAdministrationShell body, string aasIdentifier, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShell");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShell");

            var localVarPath = "/shells/{aasIdentifier}/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAssetAdministrationShellAsync(AssetAdministrationShell body, string aasIdentifier, string content = null)
        {
            await PutAssetAdministrationShellAsyncWithHttpInfo(body, aasIdentifier, content);

        }

        /// <summary>
        /// Updates the Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellAsyncWithHttpInfo(AssetAdministrationShell body, string aasIdentifier, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShell");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShell");

            var localVarPath = "/shells/{aasIdentifier}/aas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void PutAssetAdministrationShellById(AssetAdministrationShell body, string aasIdentifier)
        {
            PutAssetAdministrationShellByIdWithHttpInfo(body, aasIdentifier);
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAssetAdministrationShellByIdWithHttpInfo(AssetAdministrationShell body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShellById");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShellById");

            var localVarPath = "/shells/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShellById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAssetAdministrationShellByIdAsync(AssetAdministrationShell body, string aasIdentifier)
        {
            await PutAssetAdministrationShellByIdAsyncWithHttpInfo(body, aasIdentifier);

        }

        /// <summary>
        /// Updates an existing Asset Administration Shell 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellByIdAsyncWithHttpInfo(AssetAdministrationShell body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShellById");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutAssetAdministrationShellById");

            var localVarPath = "/shells/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShellById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void PutAssetInformation(AssetInformation body, string aasIdentifier)
        {
            PutAssetInformationWithHttpInfo(body, aasIdentifier);
        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAssetInformationWithHttpInfo(AssetInformation body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutAssetInformation");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutAssetInformation");

            var localVarPath = "/shells/{aasIdentifier}/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAssetInformationAsync(AssetInformation body, string aasIdentifier)
        {
            await PutAssetInformationAsyncWithHttpInfo(body, aasIdentifier);

        }

        /// <summary>
        /// Updates the Asset Information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetInformationAsyncWithHttpInfo(AssetInformation body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutAssetInformation");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutAssetInformation");

            var localVarPath = "/shells/{aasIdentifier}/aas/asset-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void PutConceptDescriptionById(ConceptDescription body, string cdIdentifier)
        {
            PutConceptDescriptionByIdWithHttpInfo(body, cdIdentifier);
        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutConceptDescriptionByIdWithHttpInfo(ConceptDescription body, string cdIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutConceptDescriptionById");
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling AssetAdministrationShellRepositoryApi->PutConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutConceptDescriptionByIdAsync(ConceptDescription body, string cdIdentifier)
        {
            await PutConceptDescriptionByIdAsyncWithHttpInfo(body, cdIdentifier);

        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutConceptDescriptionByIdAsyncWithHttpInfo(ConceptDescription body, string cdIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutConceptDescriptionById");
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling AssetAdministrationShellRepositoryApi->PutConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        public void PutSubmodel(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            PutSubmodelWithHttpInfo(body, aasIdentifier, submodelIdentifier, level, content, extent);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutSubmodelWithHttpInfo(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodel");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodel");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodel");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutSubmodelAsync(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            await PutSubmodelAsyncWithHttpInfo(body, aasIdentifier, submodelIdentifier, level, content, extent);

        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelAsyncWithHttpInfo(Submodel body, string aasIdentifier, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodel");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodel");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodel");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        public void PutSubmodelElementByPath(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            PutSubmodelElementByPathWithHttpInfo(body, aasIdentifier, submodelIdentifier, idShortPath, level, content, extent);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutSubmodelElementByPathWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutSubmodelElementByPathAsync(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            await PutSubmodelElementByPathAsyncWithHttpInfo(body, aasIdentifier, submodelIdentifier, idShortPath, level, content, extent);

        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelElementByPathAsyncWithHttpInfo(SubmodelElement body, string aasIdentifier, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPath");

            var localVarPath = "/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        public void PutSubmodelElementByPathSubmodelRepo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            PutSubmodelElementByPathSubmodelRepoWithHttpInfo(body, submodelIdentifier, idShortPath, level, content, extent);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutSubmodelElementByPathSubmodelRepoWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutSubmodelElementByPathSubmodelRepoAsync(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            await PutSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(body, submodelIdentifier, idShortPath, level, content, extent);

        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelElementByPathSubmodelRepoAsyncWithHttpInfo(SubmodelElement body, string submodelIdentifier, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPathSubmodelRepo");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling AssetAdministrationShellRepositoryApi->PutSubmodelElementByPathSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelElementByPathSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        public void PutSubmodelSubmodelRepo(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            PutSubmodelSubmodelRepoWithHttpInfo(body, submodelIdentifier, level, content, extent);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutSubmodelSubmodelRepoWithHttpInfo(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodelSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutSubmodelSubmodelRepoAsync(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            await PutSubmodelSubmodelRepoAsyncWithHttpInfo(body, submodelIdentifier, level, content, extent);

        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelSubmodelRepoAsyncWithHttpInfo(Submodel body, string submodelIdentifier, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRepositoryApi->PutSubmodelSubmodelRepo");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRepositoryApi->PutSubmodelSubmodelRepo");

            var localVarPath = "/submodels/{submodelIdentifier}/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelSubmodelRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
