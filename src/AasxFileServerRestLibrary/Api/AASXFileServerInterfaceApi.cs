/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using AdminShellNS;
using IO.Swagger.Client;
using IO.Swagger.Model;
using RestSharp;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAASXFileServerInterfaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteAASXByPackageId(string packageId);

        /// <summary>
        /// Deletes a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAASXByPackageIdWithHttpInfo(string packageId);
        /// <summary>
        /// Returns a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>byte[]</returns>
        byte[] GetAASXByPackageId(string packageId);

        /// <summary>
        /// Returns a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetAASXByPackageIdWithHttpInfo(string packageId);
        /// <summary>
        /// Returns a list of available AASX packages at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>List&lt;PackageDescription&gt;</returns>
        List<PackageDescription> GetAllAASXPackageIds(string aasId = null);

        /// <summary>
        /// Returns a list of available AASX packages at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>ApiResponse of List&lt;PackageDescription&gt;</returns>
        ApiResponse<List<PackageDescription>> GetAllAASXPackageIdsWithHttpInfo(string aasId = null);
        /// <summary>
        /// Stores the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>PackageDescription</returns>
        //PackageDescription PostAASXPackage (List<string> aasIds, byte[] file, string fileName);
        int PostAASXPackage(List<string> aasIds, byte[] file, string fileName);

        /// <summary>
        /// Stores the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of PackageDescription</returns>
        //ApiResponse<PackageDescription> PostAASXPackageWithHttpInfo (List<string> aasIds, byte[] file, string fileName);
        ApiResponse<int> PostAASXPackageWithHttpInfo(List<string> aasIds, byte[] file, string fileName);
        /// <summary>
        /// Updates the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void PutAASXByPackageId(List<string> aasIds, byte[] file, string fileName, string packageId);

        /// <summary>
        /// Updates the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAASXByPackageIdWithHttpInfo(List<string> aasIds, byte[] file, string fileName, string packageId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAASXByPackageIdAsync(string packageId);

        /// <summary>
        /// Deletes a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAASXByPackageIdAsyncWithHttpInfo(string packageId);
        /// <summary>
        /// Returns a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetAASXByPackageIdAsync(string packageId);

        /// <summary>
        /// Returns a specific AASX package from the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetAASXByPackageIdAsyncWithHttpInfo(string packageId);
        /// <summary>
        /// Returns a list of available AASX packages at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of List&lt;PackageDescription&gt;</returns>
        System.Threading.Tasks.Task<List<PackageDescription>> GetAllAASXPackageIdsAsync(string aasId = null);

        /// <summary>
        /// Returns a list of available AASX packages at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackageDescription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PackageDescription>>> GetAllAASXPackageIdsAsyncWithHttpInfo(string aasId = null);
        /// <summary>
        /// Stores the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of PackageDescription</returns>
        System.Threading.Tasks.Task<int> PostAASXPackageAsync(List<string> aasIds, FileParameter fileparamter, string fileName);

        /// <summary>
        /// Stores the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse (PackageDescription)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> PostAASXPackageAsyncWithHttpInfo(List<string> aasIds, FileParameter fileparamter, string fileName);
        /// <summary>
        /// Updates the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAASXByPackageIdAsync(List<string> aasIds, byte[] file, string fileName, string packageId);

        /// <summary>
        /// Updates the AASX package at the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAASXByPackageIdAsyncWithHttpInfo(List<string> aasIds, byte[] file, string fileName, string packageId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AASXFileServerInterfaceApi : IAASXFileServerInterfaceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AASXFileServerInterfaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AASXFileServerInterfaceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AASXFileServerInterfaceApi"/> class
        /// </summary>
        /// <returns></returns>
        public AASXFileServerInterfaceApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AASXFileServerInterfaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AASXFileServerInterfaceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            //TODO (jtikekar, 2022-04-04): Change
            return this.Configuration.BasePath;
            //return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteAASXByPackageId(string packageId)
        {
            DeleteAASXByPackageIdWithHttpInfo(packageId);
        }

        /// <summary>
        /// Deletes a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAASXByPackageIdWithHttpInfo(string packageId)
        {
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AASXFileServerInterfaceApi->DeleteAASXByPackageId");

            var localVarPath = "/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAASXByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAASXByPackageIdAsync(string packageId)
        {
            await DeleteAASXByPackageIdAsyncWithHttpInfo(packageId);

        }

        /// <summary>
        /// Deletes a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAASXByPackageIdAsyncWithHttpInfo(string packageId)
        {
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AASXFileServerInterfaceApi->DeleteAASXByPackageId");

            var localVarPath = "/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAASXByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>byte[]</returns>
        public byte[] GetAASXByPackageId(string packageId)
        {
            ApiResponse<byte[]> localVarResponse = GetAASXByPackageIdWithHttpInfo(packageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse<byte[]> GetAASXByPackageIdWithHttpInfo(string packageId)
        {
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AASXFileServerInterfaceApi->GetAASXByPackageId");

            var localVarPath = "/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/asset-administration-shell-package"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAASXByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            var apiResponse = new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[])this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));

            apiResponse.Headers.Add("ContentLength", localVarResponse.ContentLength.ToString());

            //return new ApiResponse<byte[]>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));

            return apiResponse;
        }


        /// <summary>
        /// Returns a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <param name="action">action to be called for advanced response writer</param>
        /// <returns>ApiResponse of byte[]</returns>
        public async Task<ApiResponse<byte[]>> GetAASXByPackageIdWithHttpInfo(string packageId, Action<Stream, IHttpResponse> action)
        {
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AASXFileServerInterfaceApi->GetAASXByPackageId");

            var localVarPath = "/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/asset-administration-shell-package"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsyncWithDelegate(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, action);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAASXByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            var apiResponse = new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[])this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));

            apiResponse.Headers.Add("ContentLength", localVarResponse.ContentLength.ToString());

            //return new ApiResponse<byte[]>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));

            return apiResponse;
        }

        /// <summary>
        /// Returns a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetAASXByPackageIdAsync(string packageId)
        {
            ApiResponse<byte[]> localVarResponse = await GetAASXByPackageIdAsyncWithHttpInfo(packageId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific AASX package from the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="packageId">The package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetAASXByPackageIdAsyncWithHttpInfo(string packageId)
        {
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AASXFileServerInterfaceApi->GetAASXByPackageId");

            var localVarPath = "/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/asset-administration-shell-package"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAASXByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[])this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Returns a list of available AASX packages at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>List&lt;PackageDescription&gt;</returns>
        public List<PackageDescription> GetAllAASXPackageIds(string aasId = null)
        {
            ApiResponse<List<PackageDescription>> localVarResponse = GetAllAASXPackageIdsWithHttpInfo(aasId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of available AASX packages at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>ApiResponse of List&lt;PackageDescription&gt;</returns>
        public ApiResponse<List<PackageDescription>> GetAllAASXPackageIdsWithHttpInfo(string aasId = null)
        {

            var localVarPath = "/packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aasId", aasId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAASXPackageIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackageDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PackageDescription>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackageDescription>)));
        }

        /// <summary>
        /// Returns a list of available AASX packages at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of List&lt;PackageDescription&gt;</returns>
        public async System.Threading.Tasks.Task<List<PackageDescription>> GetAllAASXPackageIdsAsync(string aasId = null)
        {
            ApiResponse<List<PackageDescription>> localVarResponse = await GetAllAASXPackageIdsAsyncWithHttpInfo(aasId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of available AASX packages at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasId">The Asset Administration Shell’s unique id (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackageDescription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PackageDescription>>> GetAllAASXPackageIdsAsyncWithHttpInfo(string aasId = null)
        {

            var localVarPath = "/packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aasId", aasId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAASXPackageIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PackageDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PackageDescription>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PackageDescription>)));
        }

        /// <summary>
        /// Stores the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>PackageDescription</returns>
        //public PackageDescription PostAASXPackage (List<string> aasIds, byte[] file, string fileName)
        public int PostAASXPackage(List<string> aasIds, byte[] file, string fileName)
        {
            //ApiResponse<PackageDescription> localVarResponse = PostAASXPackageWithHttpInfo(aasIds, file, fileName);
            ApiResponse<int> localVarResponse = PostAASXPackageWithHttpInfo(aasIds, file, fileName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stores the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of PackageDescription</returns>
        //public ApiResponse< PackageDescription > PostAASXPackageWithHttpInfo (List<string> aasIds, byte[] file, string fileName)
        public ApiResponse<int> PostAASXPackageWithHttpInfo(List<string> aasIds, byte[] file, string fileName)
        {
            // verify the required parameter 'aasIds' is set
            if (aasIds == null)
                throw new ApiException(400, "Missing required parameter 'aasIds' when calling AASXFileServerInterfaceApi->PostAASXPackage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AASXFileServerInterfaceApi->PostAASXPackage");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling AASXFileServerInterfaceApi->PostAASXPackage");

            var localVarPath = "/packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIds != null) localVarFormParams.Add("aasIds", this.Configuration.ApiClient.ParameterToString(aasIds)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (fileName != null) localVarFormParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAASXPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            //return new ApiResponse<PackageDescription>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (PackageDescription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackageDescription)));

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Stores the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of PackageDescription</returns>
        public async System.Threading.Tasks.Task<int> PostAASXPackageAsync(List<string> aasIds, FileParameter fileparamter, string fileName)
        {
            ApiResponse<int> localVarResponse = await PostAASXPackageAsyncWithHttpInfo(aasIds, fileparamter, fileName);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Stores the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse (PackageDescription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> PostAASXPackageAsyncWithHttpInfo(List<string> aasIds, FileParameter fileparamter, string fileName)
        {
            // verify the required parameter 'aasIds' is set
            if (aasIds == null)
                throw new ApiException(400, "Missing required parameter 'aasIds' when calling AASXFileServerInterfaceApi->PostAASXPackage");
            // verify the required parameter 'file' is set
            if (fileparamter == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AASXFileServerInterfaceApi->PostAASXPackage");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling AASXFileServerInterfaceApi->PostAASXPackage");

            var localVarPath = "/packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIds != null) localVarFormParams.Add("aasIds", this.Configuration.ApiClient.ParameterToString(aasIds)); // form parameter
            //if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (fileparamter != null) localVarFileParams.Add("file", fileparamter);
            if (fileName != null) localVarFormParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAASXPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            //return new ApiResponse<PackageDescription>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (PackageDescription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackageDescription)));

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        /// Updates the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void PutAASXByPackageId(List<string> aasIds, byte[] file, string fileName, string packageId)
        {
            PutAASXByPackageIdWithHttpInfo(aasIds, file, fileName, packageId);
        }

        /// <summary>
        /// Updates the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAASXByPackageIdWithHttpInfo(List<string> aasIds, byte[] file, string fileName, string packageId)
        {
            // verify the required parameter 'aasIds' is set
            if (aasIds == null)
                throw new ApiException(400, "Missing required parameter 'aasIds' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");

            var localVarPath = "/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (aasIds != null) localVarFormParams.Add("aasIds", this.Configuration.ApiClient.ParameterToString(aasIds)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (fileName != null) localVarFormParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAASXByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAASXByPackageIdAsync(List<string> aasIds, byte[] file, string fileName, string packageId)
        {
            await PutAASXByPackageIdAsyncWithHttpInfo(aasIds, file, fileName, packageId);

        }

        /// <summary>
        /// Updates the AASX package at the server 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIds"></param>
        /// <param name="file"></param>
        /// <param name="fileName"></param>
        /// <param name="packageId">The Package Id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAASXByPackageIdAsyncWithHttpInfo(List<string> aasIds, byte[] file, string fileName, string packageId)
        {
            // verify the required parameter 'aasIds' is set
            if (aasIds == null)
                throw new ApiException(400, "Missing required parameter 'aasIds' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");
            // verify the required parameter 'packageId' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AASXFileServerInterfaceApi->PutAASXByPackageId");

            var localVarPath = "/packages/{packageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (packageId != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (aasIds != null) localVarFormParams.Add("aasIds", this.Configuration.ApiClient.ParameterToString(aasIds)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (fileName != null) localVarFormParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAASXByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        public AssetAdministrationShellAndAsset GetAssetAdministrationShellAndAssetByPackageId(string packageId, string aasIdentifier)
        {
            ApiResponse<AssetAdministrationShellAndAsset> localVarResponse = GetAssetAdministrationShellAndAssetByPackageIdWithHttpInfo(packageId, aasIdentifier);
            return localVarResponse.Data;
        }

        private ApiResponse<AssetAdministrationShellAndAsset> GetAssetAdministrationShellAndAssetByPackageIdWithHttpInfo(string packageId, string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (packageId == null)
                throw new ApiException(400, "Missing required parameter 'packageId' when calling AssetAdministrationShellRepositoryApi->GetAssetAdministrationShellByPackageId");

            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRepositoryApi->GetAssetAdministrationShellByPackageId");

            var localVarPath = "/packages/{packageId}/shells/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("packageId", this.Configuration.ApiClient.ParameterToString(packageId)); // path parameter
            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShellByPackageId", localVarResponse);
                if (exception != null) throw exception;
            }

            //TODO (jtikekar, 2022-04-04): Change duting V3 upgrade
            //return new ApiResponse<AssetAdministrationShell>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            //    (AssetAdministrationShell) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShell)));
            return new ApiResponse<AssetAdministrationShellAndAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShellAndAsset)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShellAndAsset)));
        }

    }
}
