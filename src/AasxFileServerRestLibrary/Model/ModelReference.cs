/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModelReference
    /// </summary>
    [DataContract]
    public partial class ModelReference : Reference, IEquatable<ModelReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelReference" /> class.
        /// </summary>
        /// <param name="referredSemanticId">referredSemanticId.</param>
        /// <param name="keys">keys (required).</param>
        public ModelReference(Reference referredSemanticId = default(Reference), List<Key> keys = default(List<Key>)) : base()
        {
            // to ensure "keys" is required (not null)
            if (keys == null)
            {
                throw new InvalidDataException("keys is a required property for ModelReference and cannot be null");
            }
            else
            {
                this.Keys = keys;
            }
            this.ReferredSemanticId = referredSemanticId;
        }

        /// <summary>
        /// Gets or Sets ReferredSemanticId
        /// </summary>
        [DataMember(Name = "referredSemanticId", EmitDefaultValue = false)]
        public Reference ReferredSemanticId { get; set; }

        /// <summary>
        /// Gets or Sets Keys
        /// </summary>
        [DataMember(Name = "keys", EmitDefaultValue = false)]
        public List<Key> Keys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelReference {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ReferredSemanticId: ").Append(ReferredSemanticId).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelReference);
        }

        /// <summary>
        /// Returns true if ModelReference instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelReference input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.ReferredSemanticId == input.ReferredSemanticId ||
                    (this.ReferredSemanticId != null &&
                    this.ReferredSemanticId.Equals(input.ReferredSemanticId))
                ) && base.Equals(input) &&
                (
                    this.Keys == input.Keys ||
                    this.Keys != null &&
                    input.Keys != null &&
                    this.Keys.SequenceEqual(input.Keys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ReferredSemanticId != null)
                    hashCode = hashCode * 59 + this.ReferredSemanticId.GetHashCode();
                if (this.Keys != null)
                    hashCode = hashCode * 59 + this.Keys.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
