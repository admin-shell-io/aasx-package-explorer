/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataSpecificationIEC61360Content
    /// </summary>
    [DataContract]
    public partial class DataSpecificationIEC61360Content : ValueObject, IEquatable<DataSpecificationIEC61360Content>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSpecificationIEC61360Content" /> class.
        /// </summary>
        /// <param name="dataType">dataType.</param>
        /// <param name="definition">definition.</param>
        /// <param name="levelType">levelType.</param>
        /// <param name="preferredName">preferredName (required).</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="sourceOfDefinition">sourceOfDefinition.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="unit">unit.</param>
        /// <param name="unitId">unitId.</param>
        /// <param name="valueFormat">valueFormat.</param>
        /// <param name="valueList">valueList.</param>
        public DataSpecificationIEC61360Content(string dataType = default(string), List<LangString> definition = default(List<LangString>), List<LevelType> levelType = default(List<LevelType>), List<LangString> preferredName = default(List<LangString>), List<LangString> shortName = default(List<LangString>), string sourceOfDefinition = default(string), string symbol = default(string), string unit = default(string), Reference unitId = default(Reference), string valueFormat = default(string), ValueList valueList = default(ValueList), string value = default(string), Reference valueId = default(Reference), ValueTypeEnum valueType = default(ValueTypeEnum)) : base(value, valueId, valueType)
        {
            // to ensure "preferredName" is required (not null)
            if (preferredName == null)
            {
                throw new InvalidDataException("preferredName is a required property for DataSpecificationIEC61360Content and cannot be null");
            }
            else
            {
                this.PreferredName = preferredName;
            }
            this.DataType = dataType;
            this.Definition = definition;
            this.LevelType = levelType;
            this.ShortName = shortName;
            this.SourceOfDefinition = sourceOfDefinition;
            this.Symbol = symbol;
            this.Unit = unit;
            this.UnitId = unitId;
            this.ValueFormat = valueFormat;
            this.ValueList = valueList;
        }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public List<LangString> Definition { get; set; }

        /// <summary>
        /// Gets or Sets LevelType
        /// </summary>
        [DataMember(Name = "levelType", EmitDefaultValue = false)]
        public List<LevelType> LevelType { get; set; }

        /// <summary>
        /// Gets or Sets PreferredName
        /// </summary>
        [DataMember(Name = "preferredName", EmitDefaultValue = false)]
        public List<LangString> PreferredName { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name = "shortName", EmitDefaultValue = false)]
        public List<LangString> ShortName { get; set; }

        /// <summary>
        /// Gets or Sets SourceOfDefinition
        /// </summary>
        [DataMember(Name = "sourceOfDefinition", EmitDefaultValue = false)]
        public string SourceOfDefinition { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name = "unitId", EmitDefaultValue = false)]
        public Reference UnitId { get; set; }

        /// <summary>
        /// Gets or Sets ValueFormat
        /// </summary>
        [DataMember(Name = "valueFormat", EmitDefaultValue = false)]
        public string ValueFormat { get; set; }

        /// <summary>
        /// Gets or Sets ValueList
        /// </summary>
        [DataMember(Name = "valueList", EmitDefaultValue = false)]
        public ValueList ValueList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSpecificationIEC61360Content {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  LevelType: ").Append(LevelType).Append("\n");
            sb.Append("  PreferredName: ").Append(PreferredName).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  SourceOfDefinition: ").Append(SourceOfDefinition).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  ValueFormat: ").Append(ValueFormat).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSpecificationIEC61360Content);
        }

        /// <summary>
        /// Returns true if DataSpecificationIEC61360Content instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSpecificationIEC61360Content to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSpecificationIEC61360Content input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && base.Equals(input) &&
                (
                    this.Definition == input.Definition ||
                    this.Definition != null &&
                    input.Definition != null &&
                    this.Definition.SequenceEqual(input.Definition)
                ) && base.Equals(input) &&
                (
                    this.LevelType == input.LevelType ||
                    this.LevelType != null &&
                    input.LevelType != null &&
                    this.LevelType.SequenceEqual(input.LevelType)
                ) && base.Equals(input) &&
                (
                    this.PreferredName == input.PreferredName ||
                    this.PreferredName != null &&
                    input.PreferredName != null &&
                    this.PreferredName.SequenceEqual(input.PreferredName)
                ) && base.Equals(input) &&
                (
                    this.ShortName == input.ShortName ||
                    this.ShortName != null &&
                    input.ShortName != null &&
                    this.ShortName.SequenceEqual(input.ShortName)
                ) && base.Equals(input) &&
                (
                    this.SourceOfDefinition == input.SourceOfDefinition ||
                    (this.SourceOfDefinition != null &&
                    this.SourceOfDefinition.Equals(input.SourceOfDefinition))
                ) && base.Equals(input) &&
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && base.Equals(input) &&
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && base.Equals(input) &&
                (
                    this.UnitId == input.UnitId ||
                    (this.UnitId != null &&
                    this.UnitId.Equals(input.UnitId))
                ) && base.Equals(input) &&
                (
                    this.ValueFormat == input.ValueFormat ||
                    (this.ValueFormat != null &&
                    this.ValueFormat.Equals(input.ValueFormat))
                ) && base.Equals(input) &&
                (
                    this.ValueList == input.ValueList ||
                    (this.ValueList != null &&
                    this.ValueList.Equals(input.ValueList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.Definition != null)
                    hashCode = hashCode * 59 + this.Definition.GetHashCode();
                if (this.LevelType != null)
                    hashCode = hashCode * 59 + this.LevelType.GetHashCode();
                if (this.PreferredName != null)
                    hashCode = hashCode * 59 + this.PreferredName.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.SourceOfDefinition != null)
                    hashCode = hashCode * 59 + this.SourceOfDefinition.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.UnitId != null)
                    hashCode = hashCode * 59 + this.UnitId.GetHashCode();
                if (this.ValueFormat != null)
                    hashCode = hashCode * 59 + this.ValueFormat.GetHashCode();
                if (this.ValueList != null)
                    hashCode = hashCode * 59 + this.ValueList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
