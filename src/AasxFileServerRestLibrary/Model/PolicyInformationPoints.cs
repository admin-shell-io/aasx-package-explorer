/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PolicyInformationPoints
    /// </summary>
    [DataContract]
    public partial class PolicyInformationPoints : IEquatable<PolicyInformationPoints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyInformationPoints" /> class.
        /// </summary>
        /// <param name="externalInformationPoint">externalInformationPoint (required).</param>
        /// <param name="internalInformationPoint">internalInformationPoint.</param>
        public PolicyInformationPoints(bool? externalInformationPoint = default(bool?), List<Reference> internalInformationPoint = default(List<Reference>))
        {
            // to ensure "externalInformationPoint" is required (not null)
            if (externalInformationPoint == null)
            {
                throw new InvalidDataException("externalInformationPoint is a required property for PolicyInformationPoints and cannot be null");
            }
            else
            {
                this.ExternalInformationPoint = externalInformationPoint;
            }
            this.InternalInformationPoint = internalInformationPoint;
        }

        /// <summary>
        /// Gets or Sets ExternalInformationPoint
        /// </summary>
        [DataMember(Name = "externalInformationPoint", EmitDefaultValue = false)]
        public bool? ExternalInformationPoint { get; set; }

        /// <summary>
        /// Gets or Sets InternalInformationPoint
        /// </summary>
        [DataMember(Name = "internalInformationPoint", EmitDefaultValue = false)]
        public List<Reference> InternalInformationPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyInformationPoints {\n");
            sb.Append("  ExternalInformationPoint: ").Append(ExternalInformationPoint).Append("\n");
            sb.Append("  InternalInformationPoint: ").Append(InternalInformationPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyInformationPoints);
        }

        /// <summary>
        /// Returns true if PolicyInformationPoints instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyInformationPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyInformationPoints input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ExternalInformationPoint == input.ExternalInformationPoint ||
                    (this.ExternalInformationPoint != null &&
                    this.ExternalInformationPoint.Equals(input.ExternalInformationPoint))
                ) &&
                (
                    this.InternalInformationPoint == input.InternalInformationPoint ||
                    this.InternalInformationPoint != null &&
                    input.InternalInformationPoint != null &&
                    this.InternalInformationPoint.SequenceEqual(input.InternalInformationPoint)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalInformationPoint != null)
                    hashCode = hashCode * 59 + this.ExternalInformationPoint.GetHashCode();
                if (this.InternalInformationPoint != null)
                    hashCode = hashCode * 59 + this.InternalInformationPoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
