/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProtocolInformation
    /// </summary>
    [DataContract]
    public partial class ProtocolInformation : IEquatable<ProtocolInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolInformation" /> class.
        /// </summary>
        /// <param name="endpointAddress">endpointAddress (required).</param>
        /// <param name="endpointProtocol">endpointProtocol.</param>
        /// <param name="endpointProtocolVersion">endpointProtocolVersion.</param>
        /// <param name="subprotocol">subprotocol.</param>
        /// <param name="subprotocolBody">subprotocolBody.</param>
        /// <param name="subprotocolBodyEncoding">subprotocolBodyEncoding.</param>
        public ProtocolInformation(string endpointAddress = default(string), string endpointProtocol = default(string), string endpointProtocolVersion = default(string), string subprotocol = default(string), string subprotocolBody = default(string), string subprotocolBodyEncoding = default(string))
        {
            // to ensure "endpointAddress" is required (not null)
            if (endpointAddress == null)
            {
                throw new InvalidDataException("endpointAddress is a required property for ProtocolInformation and cannot be null");
            }
            else
            {
                this.EndpointAddress = endpointAddress;
            }
            this.EndpointProtocol = endpointProtocol;
            this.EndpointProtocolVersion = endpointProtocolVersion;
            this.Subprotocol = subprotocol;
            this.SubprotocolBody = subprotocolBody;
            this.SubprotocolBodyEncoding = subprotocolBodyEncoding;
        }

        /// <summary>
        /// Gets or Sets EndpointAddress
        /// </summary>
        [DataMember(Name = "endpointAddress", EmitDefaultValue = false)]
        public string EndpointAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndpointProtocol
        /// </summary>
        [DataMember(Name = "endpointProtocol", EmitDefaultValue = false)]
        public string EndpointProtocol { get; set; }

        /// <summary>
        /// Gets or Sets EndpointProtocolVersion
        /// </summary>
        [DataMember(Name = "endpointProtocolVersion", EmitDefaultValue = false)]
        public string EndpointProtocolVersion { get; set; }

        /// <summary>
        /// Gets or Sets Subprotocol
        /// </summary>
        [DataMember(Name = "subprotocol", EmitDefaultValue = false)]
        public string Subprotocol { get; set; }

        /// <summary>
        /// Gets or Sets SubprotocolBody
        /// </summary>
        [DataMember(Name = "subprotocolBody", EmitDefaultValue = false)]
        public string SubprotocolBody { get; set; }

        /// <summary>
        /// Gets or Sets SubprotocolBodyEncoding
        /// </summary>
        [DataMember(Name = "subprotocolBodyEncoding", EmitDefaultValue = false)]
        public string SubprotocolBodyEncoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProtocolInformation {\n");
            sb.Append("  EndpointAddress: ").Append(EndpointAddress).Append("\n");
            sb.Append("  EndpointProtocol: ").Append(EndpointProtocol).Append("\n");
            sb.Append("  EndpointProtocolVersion: ").Append(EndpointProtocolVersion).Append("\n");
            sb.Append("  Subprotocol: ").Append(Subprotocol).Append("\n");
            sb.Append("  SubprotocolBody: ").Append(SubprotocolBody).Append("\n");
            sb.Append("  SubprotocolBodyEncoding: ").Append(SubprotocolBodyEncoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProtocolInformation);
        }

        /// <summary>
        /// Returns true if ProtocolInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of ProtocolInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProtocolInformation input)
        {
            if (input == null)
                return false;

            return
                (
                    this.EndpointAddress == input.EndpointAddress ||
                    (this.EndpointAddress != null &&
                    this.EndpointAddress.Equals(input.EndpointAddress))
                ) &&
                (
                    this.EndpointProtocol == input.EndpointProtocol ||
                    (this.EndpointProtocol != null &&
                    this.EndpointProtocol.Equals(input.EndpointProtocol))
                ) &&
                (
                    this.EndpointProtocolVersion == input.EndpointProtocolVersion ||
                    (this.EndpointProtocolVersion != null &&
                    this.EndpointProtocolVersion.Equals(input.EndpointProtocolVersion))
                ) &&
                (
                    this.Subprotocol == input.Subprotocol ||
                    (this.Subprotocol != null &&
                    this.Subprotocol.Equals(input.Subprotocol))
                ) &&
                (
                    this.SubprotocolBody == input.SubprotocolBody ||
                    (this.SubprotocolBody != null &&
                    this.SubprotocolBody.Equals(input.SubprotocolBody))
                ) &&
                (
                    this.SubprotocolBodyEncoding == input.SubprotocolBodyEncoding ||
                    (this.SubprotocolBodyEncoding != null &&
                    this.SubprotocolBodyEncoding.Equals(input.SubprotocolBodyEncoding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndpointAddress != null)
                    hashCode = hashCode * 59 + this.EndpointAddress.GetHashCode();
                if (this.EndpointProtocol != null)
                    hashCode = hashCode * 59 + this.EndpointProtocol.GetHashCode();
                if (this.EndpointProtocolVersion != null)
                    hashCode = hashCode * 59 + this.EndpointProtocolVersion.GetHashCode();
                if (this.Subprotocol != null)
                    hashCode = hashCode * 59 + this.Subprotocol.GetHashCode();
                if (this.SubprotocolBody != null)
                    hashCode = hashCode * 59 + this.SubprotocolBody.GetHashCode();
                if (this.SubprotocolBodyEncoding != null)
                    hashCode = hashCode * 59 + this.SubprotocolBodyEncoding.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
