/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0_RC02;  // renamed
using CodeAnalysis = System.Diagnostics.CodeAnalysis;
using Nodes = System.Text.Json.Nodes;

using System.Collections.Generic;  // can't alias

namespace AasCore.Aas3_0_RC02
{
    /// <summary>
    /// Provide de/serialization of meta-model classes to/from JSON.
    /// </summary>
    /// <remarks>
    /// We can not use one-pass deserialization for JSON since the object
    /// properties do not have fixed order, and hence we can not read
    /// <c>modelType</c> property ahead of the remaining properties.
    /// </remarks>
    public static class Jsonization
    {
        /// <summary>
        /// Implement the deserialization of meta-model classes from JSON nodes.
        /// </summary>
        /// <remarks>
        /// The implementation propagates an <see cref="Reporting.Error" /> instead of relying
        /// on exceptions. Under the assumption that incorrect data is much less
        /// frequent than correct data, this makes the deserialization more
        /// efficient.
        ///
        /// However, we do not want to force the client to deal with
        /// the <see cref="Reporting.Error" /> class as this is not intuitive. Therefore
        /// we distinguish the implementation, realized in
        /// <see cref="DeserializeImplementation" />, and the facade given in
        /// <see cref="Deserialize" /> class.
        /// </remarks>
        internal static class DeserializeImplementation
        {
            /// <summary>Convert <paramref name="node" /> to a boolean.</summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static bool? BoolFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<bool>(out bool result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        "Expected a boolean, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a long 64-bit integer.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static long? LongFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<long>(out long result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        "Expected a 64-bit long integer, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a double-precision 64-bit float.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static double? DoubleFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<double>(out double result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        "Expected a 64-bit double-precision float, " +
                        "but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a string.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static string? StringFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<string>(out string? result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        "Expected a string, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, but got a null");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to bytes.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static byte[]? BytesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<string>(out string? text);
                if (!ok)
                {
                    error = new Reporting.Error(
                        "Expected a string, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                if (text == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, but got a null");
                    return null;
                }
                try
                {
                    return System.Convert.FromBase64String(text);
                }
                catch (System.FormatException exception)
                {
                    error = new Reporting.Error(
                        "Expected Base-64 encoded bytes, but the conversion failed " +
                        $"because: {exception}");
                    return null;
                }
            }

            /// <summary>
            /// Deserialize an instance of IHasSemantics by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasSemantics? IHasSemanticsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "Capability":
                        return CapabilityFrom(
                            node, out error);
                    case "Entity":
                        return EntityFrom(
                            node, out error);
                    case "Extension":
                        return ExtensionFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Operation":
                        return OperationFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Qualifier":
                        return QualifierFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    case "SpecificAssetId":
                        return SpecificAssetIdFrom(
                            node, out error);
                    case "Submodel":
                        return SubmodelFrom(
                            node, out error);
                    case "SubmodelElementCollection":
                        return SubmodelElementCollectionFrom(
                            node, out error);
                    case "SubmodelElementList":
                        return SubmodelElementListFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasSemantics: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasSemantics IHasSemanticsFrom

            /// <summary>
            /// Deserialize an instance of Extension from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Extension? ExtensionFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theName = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                DataTypeDefXsd? theValueType = null;
                string? theValue = null;
                Reference? theRefersTo = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "name":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theName = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "name"));
                                    return null;
                                }
                                if (theName == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theName null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "valueType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueType = DeserializeImplementation.DataTypeDefXsdFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueType"));
                                    return null;
                                }
                                if (theValueType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueType null when error is also null");
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "refersTo":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theRefersTo = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "refersTo"));
                                    return null;
                                }
                                if (theRefersTo == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theRefersTo null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theName == null)
                {
                    error = new Reporting.Error(
                        "Required property \"name\" is missing");
                    return null;
                }

                return new Aas.Extension(
                    theName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theValueType,
                    theValue,
                    theRefersTo);
            }  // internal static ExtensionFrom

            /// <summary>
            /// Deserialize an instance of IHasExtensions by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasExtensions? IHasExtensionsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "AssetAdministrationShell":
                        return AssetAdministrationShellFrom(
                            node, out error);
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "Capability":
                        return CapabilityFrom(
                            node, out error);
                    case "ConceptDescription":
                        return ConceptDescriptionFrom(
                            node, out error);
                    case "Entity":
                        return EntityFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Operation":
                        return OperationFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    case "Submodel":
                        return SubmodelFrom(
                            node, out error);
                    case "SubmodelElementCollection":
                        return SubmodelElementCollectionFrom(
                            node, out error);
                    case "SubmodelElementList":
                        return SubmodelElementListFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasExtensions: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasExtensions IHasExtensionsFrom

            /// <summary>
            /// Deserialize an instance of IReferable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IReferable? IReferableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "AssetAdministrationShell":
                        return AssetAdministrationShellFrom(
                            node, out error);
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "Capability":
                        return CapabilityFrom(
                            node, out error);
                    case "ConceptDescription":
                        return ConceptDescriptionFrom(
                            node, out error);
                    case "Entity":
                        return EntityFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Operation":
                        return OperationFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    case "Submodel":
                        return SubmodelFrom(
                            node, out error);
                    case "SubmodelElementCollection":
                        return SubmodelElementCollectionFrom(
                            node, out error);
                    case "SubmodelElementList":
                        return SubmodelElementListFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IReferable: {modelType}");
                        return null;
                }
            }  // public static Aas.IReferable IReferableFrom

            /// <summary>
            /// Deserialize an instance of IIdentifiable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IIdentifiable? IIdentifiableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "AssetAdministrationShell":
                        return AssetAdministrationShellFrom(
                            node, out error);
                    case "ConceptDescription":
                        return ConceptDescriptionFrom(
                            node, out error);
                    case "Submodel":
                        return SubmodelFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IIdentifiable: {modelType}");
                        return null;
                }
            }  // public static Aas.IIdentifiable IIdentifiableFrom

            /// <summary>
            /// Deserialize the enumeration ModelingKind from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ModelingKind? ModelingKindFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.ModelingKind? result = Stringification.ModelingKindFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of ModelingKind");
                }
                return result;
            }  // internal static ModelingKindFrom

            /// <summary>
            /// Deserialize an instance of IHasKind by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasKind? IHasKindFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "Capability":
                        return CapabilityFrom(
                            node, out error);
                    case "Entity":
                        return EntityFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Operation":
                        return OperationFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    case "Submodel":
                        return SubmodelFrom(
                            node, out error);
                    case "SubmodelElementCollection":
                        return SubmodelElementCollectionFrom(
                            node, out error);
                    case "SubmodelElementList":
                        return SubmodelElementListFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasKind: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasKind IHasKindFrom

            /// <summary>
            /// Deserialize an instance of IHasDataSpecification by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasDataSpecification? IHasDataSpecificationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "AdministrativeInformation":
                        return AdministrativeInformationFrom(
                            node, out error);
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "AssetAdministrationShell":
                        return AssetAdministrationShellFrom(
                            node, out error);
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "Capability":
                        return CapabilityFrom(
                            node, out error);
                    case "ConceptDescription":
                        return ConceptDescriptionFrom(
                            node, out error);
                    case "Entity":
                        return EntityFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Operation":
                        return OperationFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    case "Submodel":
                        return SubmodelFrom(
                            node, out error);
                    case "SubmodelElementCollection":
                        return SubmodelElementCollectionFrom(
                            node, out error);
                    case "SubmodelElementList":
                        return SubmodelElementListFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasDataSpecification: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasDataSpecification IHasDataSpecificationFrom

            /// <summary>
            /// Deserialize an instance of AdministrativeInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AdministrativeInformation? AdministrativeInformationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                string? theVersion = null;
                string? theRevision = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "version":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theVersion = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "version"));
                                    return null;
                                }
                                if (theVersion == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theVersion null when error is also null");
                                }
                                break;
                            }
                        case "revision":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theRevision = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "revision"));
                                    return null;
                                }
                                if (theRevision == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theRevision null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }



                return new Aas.AdministrativeInformation(
                    theEmbeddedDataSpecifications,
                    theVersion,
                    theRevision);
            }  // internal static AdministrativeInformationFrom

            /// <summary>
            /// Deserialize an instance of IQualifiable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IQualifiable? IQualifiableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "Capability":
                        return CapabilityFrom(
                            node, out error);
                    case "Entity":
                        return EntityFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Operation":
                        return OperationFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    case "Submodel":
                        return SubmodelFrom(
                            node, out error);
                    case "SubmodelElementCollection":
                        return SubmodelElementCollectionFrom(
                            node, out error);
                    case "SubmodelElementList":
                        return SubmodelElementListFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IQualifiable: {modelType}");
                        return null;
                }
            }  // public static Aas.IQualifiable IQualifiableFrom

            /// <summary>
            /// Deserialize the enumeration QualifierKind from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.QualifierKind? QualifierKindFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.QualifierKind? result = Stringification.QualifierKindFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of QualifierKind");
                }
                return result;
            }  // internal static QualifierKindFrom

            /// <summary>
            /// Deserialize an instance of Qualifier from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Qualifier? QualifierFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theType = null;
                DataTypeDefXsd? theValueType = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                QualifierKind? theKind = null;
                string? theValue = null;
                Reference? theValueId = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "type":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theType = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "type"));
                                    return null;
                                }
                                if (theType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theType null when error is also null");
                                }
                                break;
                            }
                        case "valueType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueType = DeserializeImplementation.DataTypeDefXsdFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueType"));
                                    return null;
                                }
                                if (theValueType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueType null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.QualifierKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "valueId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueId"));
                                    return null;
                                }
                                if (theValueId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueId null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"type\" is missing");
                    return null;
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueType\" is missing");
                    return null;
                }

                return new Aas.Qualifier(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theKind,
                    theValue,
                    theValueId);
            }  // internal static QualifierFrom

            /// <summary>
            /// Deserialize an instance of AssetAdministrationShell from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AssetAdministrationShell? AssetAdministrationShellFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theId = null;
                AssetInformation? theAssetInformation = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                AdministrativeInformation? theAdministration = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                Reference? theDerivedFrom = null;
                List<Reference>? theSubmodels = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "id":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theId = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "id"));
                                    return null;
                                }
                                if (theId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theId null when error is also null");
                                }
                                break;
                            }
                        case "assetInformation":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theAssetInformation = DeserializeImplementation.AssetInformationFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "assetInformation"));
                                    return null;
                                }
                                if (theAssetInformation == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theAssetInformation null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "administration":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theAdministration = DeserializeImplementation.AdministrativeInformationFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "administration"));
                                    return null;
                                }
                                if (theAdministration == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theAdministration null when error is also null");
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "derivedFrom":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theDerivedFrom = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "derivedFrom"));
                                    return null;
                                }
                                if (theDerivedFrom == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theDerivedFrom null when error is also null");
                                }
                                break;
                            }
                        case "submodels":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySubmodels = keyValue.Value as Nodes.JsonArray;
                                if (arraySubmodels == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "submodels"));
                                    return null;
                                }
                                theSubmodels = new List<Reference>(
                                    arraySubmodels.Count);
                                int indexSubmodels = 0;
                                foreach (Nodes.JsonNode? item in arraySubmodels)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSubmodels));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "submodels"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSubmodels));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "submodels"));
                                        return null;
                                    }
                                    theSubmodels.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSubmodels++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"id\" is missing");
                    return null;
                }

                if (theAssetInformation == null)
                {
                    error = new Reporting.Error(
                        "Required property \"assetInformation\" is missing");
                    return null;
                }

                return new Aas.AssetAdministrationShell(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theAssetInformation
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theAdministration,
                    theEmbeddedDataSpecifications,
                    theDerivedFrom,
                    theSubmodels);
            }  // internal static AssetAdministrationShellFrom

            /// <summary>
            /// Deserialize an instance of AssetInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AssetInformation? AssetInformationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                AssetKind? theAssetKind = null;
                Reference? theGlobalAssetId = null;
                List<SpecificAssetId>? theSpecificAssetIds = null;
                Resource? theDefaultThumbnail = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "assetKind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theAssetKind = DeserializeImplementation.AssetKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "assetKind"));
                                    return null;
                                }
                                if (theAssetKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theAssetKind null when error is also null");
                                }
                                break;
                            }
                        case "globalAssetId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theGlobalAssetId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "globalAssetId"));
                                    return null;
                                }
                                if (theGlobalAssetId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theGlobalAssetId null when error is also null");
                                }
                                break;
                            }
                        case "specificAssetIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySpecificAssetIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySpecificAssetIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "specificAssetIds"));
                                    return null;
                                }
                                theSpecificAssetIds = new List<SpecificAssetId>(
                                    arraySpecificAssetIds.Count);
                                int indexSpecificAssetIds = 0;
                                foreach (Nodes.JsonNode? item in arraySpecificAssetIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSpecificAssetIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "specificAssetIds"));
                                        return null;
                                    }
                                    SpecificAssetId? parsedItem = DeserializeImplementation.SpecificAssetIdFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSpecificAssetIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "specificAssetIds"));
                                        return null;
                                    }
                                    theSpecificAssetIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSpecificAssetIds++;
                                }
                                break;
                            }
                        case "defaultThumbnail":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theDefaultThumbnail = DeserializeImplementation.ResourceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "defaultThumbnail"));
                                    return null;
                                }
                                if (theDefaultThumbnail == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theDefaultThumbnail null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theAssetKind == null)
                {
                    error = new Reporting.Error(
                        "Required property \"assetKind\" is missing");
                    return null;
                }

                return new Aas.AssetInformation(
                    theAssetKind
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theGlobalAssetId,
                    theSpecificAssetIds,
                    theDefaultThumbnail);
            }  // internal static AssetInformationFrom

            /// <summary>
            /// Deserialize an instance of Resource from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Resource? ResourceFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? thePath = null;
                string? theContentType = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "path":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                thePath = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "path"));
                                    return null;
                                }
                                if (thePath == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected thePath null when error is also null");
                                }
                                break;
                            }
                        case "contentType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theContentType = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "contentType"));
                                    return null;
                                }
                                if (theContentType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theContentType null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (thePath == null)
                {
                    error = new Reporting.Error(
                        "Required property \"path\" is missing");
                    return null;
                }

                return new Aas.Resource(
                    thePath
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theContentType);
            }  // internal static ResourceFrom

            /// <summary>
            /// Deserialize the enumeration AssetKind from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AssetKind? AssetKindFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.AssetKind? result = Stringification.AssetKindFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of AssetKind");
                }
                return result;
            }  // internal static AssetKindFrom

            /// <summary>
            /// Deserialize an instance of SpecificAssetId from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.SpecificAssetId? SpecificAssetIdFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theName = null;
                string? theValue = null;
                Reference? theExternalSubjectId = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "name":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theName = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "name"));
                                    return null;
                                }
                                if (theName == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theName null when error is also null");
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "externalSubjectId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theExternalSubjectId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "externalSubjectId"));
                                    return null;
                                }
                                if (theExternalSubjectId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theExternalSubjectId null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theName == null)
                {
                    error = new Reporting.Error(
                        "Required property \"name\" is missing");
                    return null;
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing");
                    return null;
                }

                if (theExternalSubjectId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"externalSubjectId\" is missing");
                    return null;
                }

                return new Aas.SpecificAssetId(
                    theName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExternalSubjectId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theSupplementalSemanticIds);
            }  // internal static SpecificAssetIdFrom

            /// <summary>
            /// Deserialize an instance of Submodel from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Submodel? SubmodelFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theId = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                AdministrativeInformation? theAdministration = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<ISubmodelElement>? theSubmodelElements = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "id":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theId = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "id"));
                                    return null;
                                }
                                if (theId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theId null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "administration":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theAdministration = DeserializeImplementation.AdministrativeInformationFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "administration"));
                                    return null;
                                }
                                if (theAdministration == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theAdministration null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "submodelElements":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySubmodelElements = keyValue.Value as Nodes.JsonArray;
                                if (arraySubmodelElements == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "submodelElements"));
                                    return null;
                                }
                                theSubmodelElements = new List<ISubmodelElement>(
                                    arraySubmodelElements.Count);
                                int indexSubmodelElements = 0;
                                foreach (Nodes.JsonNode? item in arraySubmodelElements)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSubmodelElements));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "submodelElements"));
                                        return null;
                                    }
                                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSubmodelElements));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "submodelElements"));
                                        return null;
                                    }
                                    theSubmodelElements.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSubmodelElements++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"id\" is missing");
                    return null;
                }

                return new Aas.Submodel(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theAdministration,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theSubmodelElements);
            }  // internal static SubmodelFrom

            /// <summary>
            /// Deserialize an instance of ISubmodelElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.ISubmodelElement? ISubmodelElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "Capability":
                        return CapabilityFrom(
                            node, out error);
                    case "Entity":
                        return EntityFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Operation":
                        return OperationFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    case "SubmodelElementCollection":
                        return SubmodelElementCollectionFrom(
                            node, out error);
                    case "SubmodelElementList":
                        return SubmodelElementListFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for ISubmodelElement: {modelType}");
                        return null;
                }
            }  // public static Aas.ISubmodelElement ISubmodelElementFrom

            /// <summary>
            /// Deserialize an instance of IRelationshipElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IRelationshipElement? IRelationshipElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "AnnotatedRelationshipElement":
                        return AnnotatedRelationshipElementFrom(
                            node, out error);
                    case "RelationshipElement":
                        return RelationshipElementFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IRelationshipElement: {modelType}");
                        return null;
                }
            }  // public static Aas.IRelationshipElement IRelationshipElementFrom

            /// <summary>
            /// Deserialize an instance of RelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.RelationshipElement? RelationshipElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Reference? theFirst = null;
                Reference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "first":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theFirst = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "first"));
                                    return null;
                                }
                                if (theFirst == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theFirst null when error is also null");
                                }
                                break;
                            }
                        case "second":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSecond = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "second"));
                                    return null;
                                }
                                if (theSecond == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSecond null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theFirst == null)
                {
                    error = new Reporting.Error(
                        "Required property \"first\" is missing");
                    return null;
                }

                if (theSecond == null)
                {
                    error = new Reporting.Error(
                        "Required property \"second\" is missing");
                    return null;
                }

                return new Aas.RelationshipElement(
                    theFirst
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSecond
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications);
            }  // internal static RelationshipElementFrom

            /// <summary>
            /// Deserialize the enumeration AasSubmodelElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AasSubmodelElements? AasSubmodelElementsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.AasSubmodelElements? result = Stringification.AasSubmodelElementsFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of AasSubmodelElements");
                }
                return result;
            }  // internal static AasSubmodelElementsFrom

            /// <summary>
            /// Deserialize an instance of SubmodelElementList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.SubmodelElementList? SubmodelElementListFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                AasSubmodelElements? theTypeValueListElement = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                bool? theOrderRelevant = null;
                List<ISubmodelElement>? theValue = null;
                Reference? theSemanticIdListElement = null;
                DataTypeDefXsd? theValueTypeListElement = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "typeValueListElement":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theTypeValueListElement = DeserializeImplementation.AasSubmodelElementsFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "typeValueListElement"));
                                    return null;
                                }
                                if (theTypeValueListElement == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theTypeValueListElement null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "orderRelevant":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theOrderRelevant = DeserializeImplementation.BoolFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "orderRelevant"));
                                    return null;
                                }
                                if (theOrderRelevant == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theOrderRelevant null when error is also null");
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayValue = keyValue.Value as Nodes.JsonArray;
                                if (arrayValue == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                theValue = new List<ISubmodelElement>(
                                    arrayValue.Count);
                                int indexValue = 0;
                                foreach (Nodes.JsonNode? item in arrayValue)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValue));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValue));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    theValue.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexValue++;
                                }
                                break;
                            }
                        case "semanticIdListElement":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticIdListElement = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticIdListElement"));
                                    return null;
                                }
                                if (theSemanticIdListElement == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticIdListElement null when error is also null");
                                }
                                break;
                            }
                        case "valueTypeListElement":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueTypeListElement = DeserializeImplementation.DataTypeDefXsdFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueTypeListElement"));
                                    return null;
                                }
                                if (theValueTypeListElement == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueTypeListElement null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theTypeValueListElement == null)
                {
                    error = new Reporting.Error(
                        "Required property \"typeValueListElement\" is missing");
                    return null;
                }

                return new Aas.SubmodelElementList(
                    theTypeValueListElement
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theOrderRelevant,
                    theValue,
                    theSemanticIdListElement,
                    theValueTypeListElement);
            }  // internal static SubmodelElementListFrom

            /// <summary>
            /// Deserialize an instance of SubmodelElementCollection from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.SubmodelElementCollection? SubmodelElementCollectionFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<ISubmodelElement>? theValue = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayValue = keyValue.Value as Nodes.JsonArray;
                                if (arrayValue == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                theValue = new List<ISubmodelElement>(
                                    arrayValue.Count);
                                int indexValue = 0;
                                foreach (Nodes.JsonNode? item in arrayValue)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValue));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValue));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    theValue.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexValue++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }



                return new Aas.SubmodelElementCollection(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static SubmodelElementCollectionFrom

            /// <summary>
            /// Deserialize an instance of IDataElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IDataElement? IDataElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "Blob":
                        return BlobFrom(
                            node, out error);
                    case "File":
                        return FileFrom(
                            node, out error);
                    case "MultiLanguageProperty":
                        return MultiLanguagePropertyFrom(
                            node, out error);
                    case "Property":
                        return PropertyFrom(
                            node, out error);
                    case "Range":
                        return RangeFrom(
                            node, out error);
                    case "ReferenceElement":
                        return ReferenceElementFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IDataElement: {modelType}");
                        return null;
                }
            }  // public static Aas.IDataElement IDataElementFrom

            /// <summary>
            /// Deserialize an instance of Property from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Property? PropertyFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                DataTypeDefXsd? theValueType = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                string? theValue = null;
                Reference? theValueId = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "valueType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueType = DeserializeImplementation.DataTypeDefXsdFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueType"));
                                    return null;
                                }
                                if (theValueType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueType null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "valueId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueId"));
                                    return null;
                                }
                                if (theValueId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueId null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueType\" is missing");
                    return null;
                }

                return new Aas.Property(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static PropertyFrom

            /// <summary>
            /// Deserialize an instance of MultiLanguageProperty from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<LangString>? theValue = null;
                Reference? theValueId = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayValue = keyValue.Value as Nodes.JsonArray;
                                if (arrayValue == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                theValue = new List<LangString>(
                                    arrayValue.Count);
                                int indexValue = 0;
                                foreach (Nodes.JsonNode? item in arrayValue)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValue));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValue));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "value"));
                                        return null;
                                    }
                                    theValue.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexValue++;
                                }
                                break;
                            }
                        case "valueId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueId"));
                                    return null;
                                }
                                if (theValueId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueId null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }



                return new Aas.MultiLanguageProperty(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static MultiLanguagePropertyFrom

            /// <summary>
            /// Deserialize an instance of Range from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Range? RangeFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                DataTypeDefXsd? theValueType = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                string? theMin = null;
                string? theMax = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "valueType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueType = DeserializeImplementation.DataTypeDefXsdFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueType"));
                                    return null;
                                }
                                if (theValueType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueType null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "min":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theMin = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "min"));
                                    return null;
                                }
                                if (theMin == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theMin null when error is also null");
                                }
                                break;
                            }
                        case "max":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theMax = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "max"));
                                    return null;
                                }
                                if (theMax == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theMax null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueType\" is missing");
                    return null;
                }

                return new Aas.Range(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theMin,
                    theMax);
            }  // internal static RangeFrom

            /// <summary>
            /// Deserialize an instance of ReferenceElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ReferenceElement? ReferenceElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                Reference? theValue = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }



                return new Aas.ReferenceElement(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static ReferenceElementFrom

            /// <summary>
            /// Deserialize an instance of Blob from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Blob? BlobFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theContentType = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                byte[]? theValue = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "contentType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theContentType = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "contentType"));
                                    return null;
                                }
                                if (theContentType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theContentType null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.BytesFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theContentType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"contentType\" is missing");
                    return null;
                }

                return new Aas.Blob(
                    theContentType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static BlobFrom

            /// <summary>
            /// Deserialize an instance of File from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.File? FileFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theContentType = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                string? theValue = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "contentType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theContentType = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "contentType"));
                                    return null;
                                }
                                if (theContentType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theContentType null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theContentType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"contentType\" is missing");
                    return null;
                }

                return new Aas.File(
                    theContentType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theValue);
            }  // internal static FileFrom

            /// <summary>
            /// Deserialize an instance of AnnotatedRelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Reference? theFirst = null;
                Reference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<IDataElement>? theAnnotations = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "first":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theFirst = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "first"));
                                    return null;
                                }
                                if (theFirst == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theFirst null when error is also null");
                                }
                                break;
                            }
                        case "second":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSecond = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "second"));
                                    return null;
                                }
                                if (theSecond == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSecond null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "annotations":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayAnnotations = keyValue.Value as Nodes.JsonArray;
                                if (arrayAnnotations == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "annotations"));
                                    return null;
                                }
                                theAnnotations = new List<IDataElement>(
                                    arrayAnnotations.Count);
                                int indexAnnotations = 0;
                                foreach (Nodes.JsonNode? item in arrayAnnotations)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexAnnotations));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "annotations"));
                                        return null;
                                    }
                                    IDataElement? parsedItem = DeserializeImplementation.IDataElementFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexAnnotations));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "annotations"));
                                        return null;
                                    }
                                    theAnnotations.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexAnnotations++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theFirst == null)
                {
                    error = new Reporting.Error(
                        "Required property \"first\" is missing");
                    return null;
                }

                if (theSecond == null)
                {
                    error = new Reporting.Error(
                        "Required property \"second\" is missing");
                    return null;
                }

                return new Aas.AnnotatedRelationshipElement(
                    theFirst
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSecond
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theAnnotations);
            }  // internal static AnnotatedRelationshipElementFrom

            /// <summary>
            /// Deserialize the enumeration EntityType from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.EntityType? EntityTypeFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.EntityType? result = Stringification.EntityTypeFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of EntityType");
                }
                return result;
            }  // internal static EntityTypeFrom

            /// <summary>
            /// Deserialize an instance of Entity from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Entity? EntityFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                EntityType? theEntityType = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<ISubmodelElement>? theStatements = null;
                Reference? theGlobalAssetId = null;
                SpecificAssetId? theSpecificAssetId = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "entityType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theEntityType = DeserializeImplementation.EntityTypeFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "entityType"));
                                    return null;
                                }
                                if (theEntityType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theEntityType null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "statements":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayStatements = keyValue.Value as Nodes.JsonArray;
                                if (arrayStatements == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "statements"));
                                    return null;
                                }
                                theStatements = new List<ISubmodelElement>(
                                    arrayStatements.Count);
                                int indexStatements = 0;
                                foreach (Nodes.JsonNode? item in arrayStatements)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexStatements));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "statements"));
                                        return null;
                                    }
                                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexStatements));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "statements"));
                                        return null;
                                    }
                                    theStatements.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexStatements++;
                                }
                                break;
                            }
                        case "globalAssetId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theGlobalAssetId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "globalAssetId"));
                                    return null;
                                }
                                if (theGlobalAssetId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theGlobalAssetId null when error is also null");
                                }
                                break;
                            }
                        case "specificAssetId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSpecificAssetId = DeserializeImplementation.SpecificAssetIdFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "specificAssetId"));
                                    return null;
                                }
                                if (theSpecificAssetId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSpecificAssetId null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theEntityType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"entityType\" is missing");
                    return null;
                }

                return new Aas.Entity(
                    theEntityType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theStatements,
                    theGlobalAssetId,
                    theSpecificAssetId);
            }  // internal static EntityFrom

            /// <summary>
            /// Deserialize the enumeration Direction from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Direction? DirectionFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.Direction? result = Stringification.DirectionFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of Direction");
                }
                return result;
            }  // internal static DirectionFrom

            /// <summary>
            /// Deserialize the enumeration StateOfEvent from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.StateOfEvent? StateOfEventFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.StateOfEvent? result = Stringification.StateOfEventFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of StateOfEvent");
                }
                return result;
            }  // internal static StateOfEventFrom

            /// <summary>
            /// Deserialize an instance of EventPayload from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.EventPayload? EventPayloadFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Reference? theSource = null;
                Reference? theObservableReference = null;
                string? theTimeStamp = null;
                Reference? theSourceSemanticId = null;
                Reference? theObservableSemanticId = null;
                string? theTopic = null;
                Reference? theSubjectId = null;
                string? thePayload = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "source":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSource = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "source"));
                                    return null;
                                }
                                if (theSource == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSource null when error is also null");
                                }
                                break;
                            }
                        case "observableReference":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theObservableReference = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "observableReference"));
                                    return null;
                                }
                                if (theObservableReference == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theObservableReference null when error is also null");
                                }
                                break;
                            }
                        case "timeStamp":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theTimeStamp = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "timeStamp"));
                                    return null;
                                }
                                if (theTimeStamp == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theTimeStamp null when error is also null");
                                }
                                break;
                            }
                        case "sourceSemanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSourceSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "sourceSemanticId"));
                                    return null;
                                }
                                if (theSourceSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSourceSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "observableSemanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theObservableSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "observableSemanticId"));
                                    return null;
                                }
                                if (theObservableSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theObservableSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "topic":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theTopic = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "topic"));
                                    return null;
                                }
                                if (theTopic == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theTopic null when error is also null");
                                }
                                break;
                            }
                        case "subjectId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSubjectId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "subjectId"));
                                    return null;
                                }
                                if (theSubjectId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSubjectId null when error is also null");
                                }
                                break;
                            }
                        case "payload":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                thePayload = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "payload"));
                                    return null;
                                }
                                if (thePayload == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected thePayload null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theSource == null)
                {
                    error = new Reporting.Error(
                        "Required property \"source\" is missing");
                    return null;
                }

                if (theObservableReference == null)
                {
                    error = new Reporting.Error(
                        "Required property \"observableReference\" is missing");
                    return null;
                }

                if (theTimeStamp == null)
                {
                    error = new Reporting.Error(
                        "Required property \"timeStamp\" is missing");
                    return null;
                }

                return new Aas.EventPayload(
                    theSource
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theObservableReference
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theTimeStamp
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSourceSemanticId,
                    theObservableSemanticId,
                    theTopic,
                    theSubjectId,
                    thePayload);
            }  // internal static EventPayloadFrom

            /// <summary>
            /// Deserialize an instance of IEventElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IEventElement? IEventElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "BasicEventElement":
                        return BasicEventElementFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IEventElement: {modelType}");
                        return null;
                }
            }  // public static Aas.IEventElement IEventElementFrom

            /// <summary>
            /// Deserialize an instance of BasicEventElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.BasicEventElement? BasicEventElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Reference? theObserved = null;
                Direction? theDirection = null;
                StateOfEvent? theState = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                string? theMessageTopic = null;
                Reference? theMessageBroker = null;
                string? theLastUpdate = null;
                string? theMinInterval = null;
                string? theMaxInterval = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "observed":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theObserved = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "observed"));
                                    return null;
                                }
                                if (theObserved == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theObserved null when error is also null");
                                }
                                break;
                            }
                        case "direction":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theDirection = DeserializeImplementation.DirectionFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "direction"));
                                    return null;
                                }
                                if (theDirection == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theDirection null when error is also null");
                                }
                                break;
                            }
                        case "state":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theState = DeserializeImplementation.StateOfEventFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "state"));
                                    return null;
                                }
                                if (theState == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theState null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "messageTopic":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theMessageTopic = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "messageTopic"));
                                    return null;
                                }
                                if (theMessageTopic == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theMessageTopic null when error is also null");
                                }
                                break;
                            }
                        case "messageBroker":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theMessageBroker = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "messageBroker"));
                                    return null;
                                }
                                if (theMessageBroker == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theMessageBroker null when error is also null");
                                }
                                break;
                            }
                        case "lastUpdate":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theLastUpdate = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "lastUpdate"));
                                    return null;
                                }
                                if (theLastUpdate == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theLastUpdate null when error is also null");
                                }
                                break;
                            }
                        case "minInterval":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theMinInterval = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "minInterval"));
                                    return null;
                                }
                                if (theMinInterval == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theMinInterval null when error is also null");
                                }
                                break;
                            }
                        case "maxInterval":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theMaxInterval = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "maxInterval"));
                                    return null;
                                }
                                if (theMaxInterval == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theMaxInterval null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theObserved == null)
                {
                    error = new Reporting.Error(
                        "Required property \"observed\" is missing");
                    return null;
                }

                if (theDirection == null)
                {
                    error = new Reporting.Error(
                        "Required property \"direction\" is missing");
                    return null;
                }

                if (theState == null)
                {
                    error = new Reporting.Error(
                        "Required property \"state\" is missing");
                    return null;
                }

                return new Aas.BasicEventElement(
                    theObserved
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDirection
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theState
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theMessageTopic,
                    theMessageBroker,
                    theLastUpdate,
                    theMinInterval,
                    theMaxInterval);
            }  // internal static BasicEventElementFrom

            /// <summary>
            /// Deserialize an instance of Operation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Operation? OperationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "inputVariables":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayInputVariables = keyValue.Value as Nodes.JsonArray;
                                if (arrayInputVariables == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "inputVariables"));
                                    return null;
                                }
                                theInputVariables = new List<OperationVariable>(
                                    arrayInputVariables.Count);
                                int indexInputVariables = 0;
                                foreach (Nodes.JsonNode? item in arrayInputVariables)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexInputVariables));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "inputVariables"));
                                        return null;
                                    }
                                    OperationVariable? parsedItem = DeserializeImplementation.OperationVariableFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexInputVariables));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "inputVariables"));
                                        return null;
                                    }
                                    theInputVariables.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexInputVariables++;
                                }
                                break;
                            }
                        case "outputVariables":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayOutputVariables = keyValue.Value as Nodes.JsonArray;
                                if (arrayOutputVariables == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "outputVariables"));
                                    return null;
                                }
                                theOutputVariables = new List<OperationVariable>(
                                    arrayOutputVariables.Count);
                                int indexOutputVariables = 0;
                                foreach (Nodes.JsonNode? item in arrayOutputVariables)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexOutputVariables));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "outputVariables"));
                                        return null;
                                    }
                                    OperationVariable? parsedItem = DeserializeImplementation.OperationVariableFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexOutputVariables));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "outputVariables"));
                                        return null;
                                    }
                                    theOutputVariables.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexOutputVariables++;
                                }
                                break;
                            }
                        case "inoutputVariables":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayInoutputVariables = keyValue.Value as Nodes.JsonArray;
                                if (arrayInoutputVariables == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "inoutputVariables"));
                                    return null;
                                }
                                theInoutputVariables = new List<OperationVariable>(
                                    arrayInoutputVariables.Count);
                                int indexInoutputVariables = 0;
                                foreach (Nodes.JsonNode? item in arrayInoutputVariables)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexInoutputVariables));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "inoutputVariables"));
                                        return null;
                                    }
                                    OperationVariable? parsedItem = DeserializeImplementation.OperationVariableFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexInoutputVariables));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "inoutputVariables"));
                                        return null;
                                    }
                                    theInoutputVariables.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexInoutputVariables++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }



                return new Aas.Operation(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications,
                    theInputVariables,
                    theOutputVariables,
                    theInoutputVariables);
            }  // internal static OperationFrom

            /// <summary>
            /// Deserialize an instance of OperationVariable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.OperationVariable? OperationVariableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                ISubmodelElement? theValue = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.ISubmodelElementFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing");
                    return null;
                }

                return new Aas.OperationVariable(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static OperationVariableFrom

            /// <summary>
            /// Deserialize an instance of Capability from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Capability? CapabilityFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                Reference? theSemanticId = null;
                List<Reference>? theSupplementalSemanticIds = null;
                List<Qualifier>? theQualifiers = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "kind":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theKind = DeserializeImplementation.ModelingKindFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "kind"));
                                    return null;
                                }
                                if (theKind == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theKind null when error is also null");
                                }
                                break;
                            }
                        case "semanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "semanticId"));
                                    return null;
                                }
                                if (theSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSemanticId null when error is also null");
                                }
                                break;
                            }
                        case "supplementalSemanticIds":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySupplementalSemanticIds = keyValue.Value as Nodes.JsonArray;
                                if (arraySupplementalSemanticIds == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplementalSemanticIds"));
                                    return null;
                                }
                                theSupplementalSemanticIds = new List<Reference>(
                                    arraySupplementalSemanticIds.Count);
                                int indexSupplementalSemanticIds = 0;
                                foreach (Nodes.JsonNode? item in arraySupplementalSemanticIds)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSupplementalSemanticIds));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "supplementalSemanticIds"));
                                        return null;
                                    }
                                    theSupplementalSemanticIds.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSupplementalSemanticIds++;
                                }
                                break;
                            }
                        case "qualifiers":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayQualifiers = keyValue.Value as Nodes.JsonArray;
                                if (arrayQualifiers == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "qualifiers"));
                                    return null;
                                }
                                theQualifiers = new List<Qualifier>(
                                    arrayQualifiers.Count);
                                int indexQualifiers = 0;
                                foreach (Nodes.JsonNode? item in arrayQualifiers)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    Qualifier? parsedItem = DeserializeImplementation.QualifierFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexQualifiers));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "qualifiers"));
                                        return null;
                                    }
                                    theQualifiers.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexQualifiers++;
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }



                return new Aas.Capability(
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theSupplementalSemanticIds,
                    theQualifiers,
                    theEmbeddedDataSpecifications);
            }  // internal static CapabilityFrom

            /// <summary>
            /// Deserialize an instance of ConceptDescription from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ConceptDescription? ConceptDescriptionFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theId = null;
                List<Extension>? theExtensions = null;
                string? theCategory = null;
                string? theIdShort = null;
                List<LangString>? theDisplayName = null;
                List<LangString>? theDescription = null;
                string? theChecksum = null;
                AdministrativeInformation? theAdministration = null;
                List<EmbeddedDataSpecification>? theEmbeddedDataSpecifications = null;
                List<Reference>? theIsCaseOf = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "id":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theId = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "id"));
                                    return null;
                                }
                                if (theId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theId null when error is also null");
                                }
                                break;
                            }
                        case "extensions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayExtensions = keyValue.Value as Nodes.JsonArray;
                                if (arrayExtensions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "extensions"));
                                    return null;
                                }
                                theExtensions = new List<Extension>(
                                    arrayExtensions.Count);
                                int indexExtensions = 0;
                                foreach (Nodes.JsonNode? item in arrayExtensions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexExtensions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "extensions"));
                                        return null;
                                    }
                                    theExtensions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexExtensions++;
                                }
                                break;
                            }
                        case "category":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theCategory = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "category"));
                                    return null;
                                }
                                if (theCategory == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theCategory null when error is also null");
                                }
                                break;
                            }
                        case "idShort":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theIdShort = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "idShort"));
                                    return null;
                                }
                                if (theIdShort == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theIdShort null when error is also null");
                                }
                                break;
                            }
                        case "displayName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDisplayName = keyValue.Value as Nodes.JsonArray;
                                if (arrayDisplayName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "displayName"));
                                    return null;
                                }
                                theDisplayName = new List<LangString>(
                                    arrayDisplayName.Count);
                                int indexDisplayName = 0;
                                foreach (Nodes.JsonNode? item in arrayDisplayName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDisplayName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "displayName"));
                                        return null;
                                    }
                                    theDisplayName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDisplayName++;
                                }
                                break;
                            }
                        case "description":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDescription = keyValue.Value as Nodes.JsonArray;
                                if (arrayDescription == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "description"));
                                    return null;
                                }
                                theDescription = new List<LangString>(
                                    arrayDescription.Count);
                                int indexDescription = 0;
                                foreach (Nodes.JsonNode? item in arrayDescription)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDescription));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "description"));
                                        return null;
                                    }
                                    theDescription.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDescription++;
                                }
                                break;
                            }
                        case "checksum":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theChecksum = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "checksum"));
                                    return null;
                                }
                                if (theChecksum == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theChecksum null when error is also null");
                                }
                                break;
                            }
                        case "administration":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theAdministration = DeserializeImplementation.AdministrativeInformationFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "administration"));
                                    return null;
                                }
                                if (theAdministration == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theAdministration null when error is also null");
                                }
                                break;
                            }
                        case "embeddedDataSpecifications":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayEmbeddedDataSpecifications = keyValue.Value as Nodes.JsonArray;
                                if (arrayEmbeddedDataSpecifications == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "embeddedDataSpecifications"));
                                    return null;
                                }
                                theEmbeddedDataSpecifications = new List<EmbeddedDataSpecification>(
                                    arrayEmbeddedDataSpecifications.Count);
                                int indexEmbeddedDataSpecifications = 0;
                                foreach (Nodes.JsonNode? item in arrayEmbeddedDataSpecifications)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    EmbeddedDataSpecification? parsedItem = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexEmbeddedDataSpecifications));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "embeddedDataSpecifications"));
                                        return null;
                                    }
                                    theEmbeddedDataSpecifications.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexEmbeddedDataSpecifications++;
                                }
                                break;
                            }
                        case "isCaseOf":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayIsCaseOf = keyValue.Value as Nodes.JsonArray;
                                if (arrayIsCaseOf == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "isCaseOf"));
                                    return null;
                                }
                                theIsCaseOf = new List<Reference>(
                                    arrayIsCaseOf.Count);
                                int indexIsCaseOf = 0;
                                foreach (Nodes.JsonNode? item in arrayIsCaseOf)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexIsCaseOf));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "isCaseOf"));
                                        return null;
                                    }
                                    Reference? parsedItem = DeserializeImplementation.ReferenceFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexIsCaseOf));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "isCaseOf"));
                                        return null;
                                    }
                                    theIsCaseOf.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexIsCaseOf++;
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"id\" is missing");
                    return null;
                }

                return new Aas.ConceptDescription(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theCategory,
                    theIdShort,
                    theDisplayName,
                    theDescription,
                    theChecksum,
                    theAdministration,
                    theEmbeddedDataSpecifications,
                    theIsCaseOf);
            }  // internal static ConceptDescriptionFrom

            /// <summary>
            /// Deserialize the enumeration ReferenceTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ReferenceTypes? ReferenceTypesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.ReferenceTypes? result = Stringification.ReferenceTypesFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of ReferenceTypes");
                }
                return result;
            }  // internal static ReferenceTypesFrom

            /// <summary>
            /// Deserialize an instance of Reference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Reference? ReferenceFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                ReferenceTypes? theType = null;
                List<Key>? theKeys = null;
                Reference? theReferredSemanticId = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "type":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theType = DeserializeImplementation.ReferenceTypesFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "type"));
                                    return null;
                                }
                                if (theType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theType null when error is also null");
                                }
                                break;
                            }
                        case "keys":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayKeys = keyValue.Value as Nodes.JsonArray;
                                if (arrayKeys == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "keys"));
                                    return null;
                                }
                                theKeys = new List<Key>(
                                    arrayKeys.Count);
                                int indexKeys = 0;
                                foreach (Nodes.JsonNode? item in arrayKeys)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexKeys));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "keys"));
                                        return null;
                                    }
                                    Key? parsedItem = DeserializeImplementation.KeyFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexKeys));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "keys"));
                                        return null;
                                    }
                                    theKeys.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexKeys++;
                                }
                                break;
                            }
                        case "referredSemanticId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theReferredSemanticId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "referredSemanticId"));
                                    return null;
                                }
                                if (theReferredSemanticId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theReferredSemanticId null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"type\" is missing");
                    return null;
                }

                if (theKeys == null)
                {
                    error = new Reporting.Error(
                        "Required property \"keys\" is missing");
                    return null;
                }

                return new Aas.Reference(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theKeys
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theReferredSemanticId);
            }  // internal static ReferenceFrom

            /// <summary>
            /// Deserialize an instance of Key from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Key? KeyFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                KeyTypes? theType = null;
                string? theValue = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "type":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theType = DeserializeImplementation.KeyTypesFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "type"));
                                    return null;
                                }
                                if (theType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theType null when error is also null");
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"type\" is missing");
                    return null;
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing");
                    return null;
                }

                return new Aas.Key(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static KeyFrom

            /// <summary>
            /// Deserialize the enumeration KeyTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.KeyTypes? KeyTypesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.KeyTypes? result = Stringification.KeyTypesFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of KeyTypes");
                }
                return result;
            }  // internal static KeyTypesFrom

            /// <summary>
            /// Deserialize the enumeration DataTypeDefXsd from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataTypeDefXsd? DataTypeDefXsdFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.DataTypeDefXsd? result = Stringification.DataTypeDefXsdFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of DataTypeDefXsd");
                }
                return result;
            }  // internal static DataTypeDefXsdFrom

            /// <summary>
            /// Deserialize an instance of LangString from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.LangString? LangStringFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theLanguage = null;
                string? theText = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "language":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theLanguage = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "language"));
                                    return null;
                                }
                                if (theLanguage == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theLanguage null when error is also null");
                                }
                                break;
                            }
                        case "text":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theText = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "text"));
                                    return null;
                                }
                                if (theText == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theText null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theLanguage == null)
                {
                    error = new Reporting.Error(
                        "Required property \"language\" is missing");
                    return null;
                }

                if (theText == null)
                {
                    error = new Reporting.Error(
                        "Required property \"text\" is missing");
                    return null;
                }

                return new Aas.LangString(
                    theLanguage
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theText
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static LangStringFrom

            /// <summary>
            /// Deserialize an instance of Environment from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Environment? EnvironmentFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<AssetAdministrationShell>? theAssetAdministrationShells = null;
                List<Submodel>? theSubmodels = null;
                List<ConceptDescription>? theConceptDescriptions = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "assetAdministrationShells":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayAssetAdministrationShells = keyValue.Value as Nodes.JsonArray;
                                if (arrayAssetAdministrationShells == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "assetAdministrationShells"));
                                    return null;
                                }
                                theAssetAdministrationShells = new List<AssetAdministrationShell>(
                                    arrayAssetAdministrationShells.Count);
                                int indexAssetAdministrationShells = 0;
                                foreach (Nodes.JsonNode? item in arrayAssetAdministrationShells)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexAssetAdministrationShells));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "assetAdministrationShells"));
                                        return null;
                                    }
                                    AssetAdministrationShell? parsedItem = DeserializeImplementation.AssetAdministrationShellFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexAssetAdministrationShells));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "assetAdministrationShells"));
                                        return null;
                                    }
                                    theAssetAdministrationShells.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexAssetAdministrationShells++;
                                }
                                break;
                            }
                        case "submodels":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arraySubmodels = keyValue.Value as Nodes.JsonArray;
                                if (arraySubmodels == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "submodels"));
                                    return null;
                                }
                                theSubmodels = new List<Submodel>(
                                    arraySubmodels.Count);
                                int indexSubmodels = 0;
                                foreach (Nodes.JsonNode? item in arraySubmodels)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSubmodels));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "submodels"));
                                        return null;
                                    }
                                    Submodel? parsedItem = DeserializeImplementation.SubmodelFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexSubmodels));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "submodels"));
                                        return null;
                                    }
                                    theSubmodels.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexSubmodels++;
                                }
                                break;
                            }
                        case "conceptDescriptions":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayConceptDescriptions = keyValue.Value as Nodes.JsonArray;
                                if (arrayConceptDescriptions == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "conceptDescriptions"));
                                    return null;
                                }
                                theConceptDescriptions = new List<ConceptDescription>(
                                    arrayConceptDescriptions.Count);
                                int indexConceptDescriptions = 0;
                                foreach (Nodes.JsonNode? item in arrayConceptDescriptions)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexConceptDescriptions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "conceptDescriptions"));
                                        return null;
                                    }
                                    ConceptDescription? parsedItem = DeserializeImplementation.ConceptDescriptionFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexConceptDescriptions));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "conceptDescriptions"));
                                        return null;
                                    }
                                    theConceptDescriptions.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexConceptDescriptions++;
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }



                return new Aas.Environment(
                    theAssetAdministrationShells,
                    theSubmodels,
                    theConceptDescriptions);
            }  // internal static EnvironmentFrom

            /// <summary>
            /// Deserialize an instance of IDataSpecificationContent by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IDataSpecificationContent? IDataSpecificationContentFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                    case "DataSpecificationIEC61360":
                        return DataSpecificationIec61360From(
                            node, out error);
                    case "DataSpecificationPhysicalUnit":
                        return DataSpecificationPhysicalUnitFrom(
                            node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IDataSpecificationContent: {modelType}");
                        return null;
                }
            }  // public static Aas.IDataSpecificationContent IDataSpecificationContentFrom

            /// <summary>
            /// Deserialize an instance of EmbeddedDataSpecification from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.EmbeddedDataSpecification? EmbeddedDataSpecificationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Reference? theDataSpecification = null;
                IDataSpecificationContent? theDataSpecificationContent = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "dataSpecification":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theDataSpecification = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "dataSpecification"));
                                    return null;
                                }
                                if (theDataSpecification == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theDataSpecification null when error is also null");
                                }
                                break;
                            }
                        case "dataSpecificationContent":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theDataSpecificationContent = DeserializeImplementation.IDataSpecificationContentFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "dataSpecificationContent"));
                                    return null;
                                }
                                if (theDataSpecificationContent == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theDataSpecificationContent null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theDataSpecification == null)
                {
                    error = new Reporting.Error(
                        "Required property \"dataSpecification\" is missing");
                    return null;
                }

                if (theDataSpecificationContent == null)
                {
                    error = new Reporting.Error(
                        "Required property \"dataSpecificationContent\" is missing");
                    return null;
                }

                return new Aas.EmbeddedDataSpecification(
                    theDataSpecification
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecificationContent
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static EmbeddedDataSpecificationFrom

            /// <summary>
            /// Deserialize the enumeration DataTypeIec61360 from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataTypeIec61360? DataTypeIec61360From(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.DataTypeIec61360? result = Stringification.DataTypeIec61360FromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of DataTypeIec61360");
                }
                return result;
            }  // internal static DataTypeIec61360From

            /// <summary>
            /// Deserialize the enumeration LevelType from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.LevelType? LevelTypeFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.LevelType? result = Stringification.LevelTypeFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of LevelType");
                }
                return result;
            }  // internal static LevelTypeFrom

            /// <summary>
            /// Deserialize an instance of ValueReferencePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ValueReferencePair? ValueReferencePairFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theValue = null;
                Reference? theValueId = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "valueId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueId"));
                                    return null;
                                }
                                if (theValueId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueId null when error is also null");
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing");
                    return null;
                }

                if (theValueId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueId\" is missing");
                    return null;
                }

                return new Aas.ValueReferencePair(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValueId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static ValueReferencePairFrom

            /// <summary>
            /// Deserialize an instance of ValueList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ValueList? ValueListFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<ValueReferencePair>? theValueReferencePairs = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "valueReferencePairs":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayValueReferencePairs = keyValue.Value as Nodes.JsonArray;
                                if (arrayValueReferencePairs == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueReferencePairs"));
                                    return null;
                                }
                                theValueReferencePairs = new List<ValueReferencePair>(
                                    arrayValueReferencePairs.Count);
                                int indexValueReferencePairs = 0;
                                foreach (Nodes.JsonNode? item in arrayValueReferencePairs)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValueReferencePairs));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueReferencePairs"));
                                        return null;
                                    }
                                    ValueReferencePair? parsedItem = DeserializeImplementation.ValueReferencePairFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexValueReferencePairs));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "valueReferencePairs"));
                                        return null;
                                    }
                                    theValueReferencePairs.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexValueReferencePairs++;
                                }
                                break;
                            }
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theValueReferencePairs == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueReferencePairs\" is missing");
                    return null;
                }

                return new Aas.ValueList(
                    theValueReferencePairs
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static ValueListFrom

            /// <summary>
            /// Deserialize an instance of DataSpecificationIec61360 from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataSpecificationIec61360? DataSpecificationIec61360From(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                List<LangString>? thePreferredName = null;
                List<LangString>? theShortName = null;
                string? theUnit = null;
                Reference? theUnitId = null;
                string? theSourceOfDefinition = null;
                string? theSymbol = null;
                DataTypeIec61360? theDataType = null;
                List<LangString>? theDefinition = null;
                string? theValueFormat = null;
                ValueList? theValueList = null;
                string? theValue = null;
                LevelType? theLevelType = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "preferredName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayPreferredName = keyValue.Value as Nodes.JsonArray;
                                if (arrayPreferredName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "preferredName"));
                                    return null;
                                }
                                thePreferredName = new List<LangString>(
                                    arrayPreferredName.Count);
                                int indexPreferredName = 0;
                                foreach (Nodes.JsonNode? item in arrayPreferredName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexPreferredName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "preferredName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexPreferredName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "preferredName"));
                                        return null;
                                    }
                                    thePreferredName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexPreferredName++;
                                }
                                break;
                            }
                        case "shortName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayShortName = keyValue.Value as Nodes.JsonArray;
                                if (arrayShortName == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "shortName"));
                                    return null;
                                }
                                theShortName = new List<LangString>(
                                    arrayShortName.Count);
                                int indexShortName = 0;
                                foreach (Nodes.JsonNode? item in arrayShortName)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexShortName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "shortName"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexShortName));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "shortName"));
                                        return null;
                                    }
                                    theShortName.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexShortName++;
                                }
                                break;
                            }
                        case "unit":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theUnit = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "unit"));
                                    return null;
                                }
                                if (theUnit == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theUnit null when error is also null");
                                }
                                break;
                            }
                        case "unitId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theUnitId = DeserializeImplementation.ReferenceFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "unitId"));
                                    return null;
                                }
                                if (theUnitId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theUnitId null when error is also null");
                                }
                                break;
                            }
                        case "sourceOfDefinition":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSourceOfDefinition = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "sourceOfDefinition"));
                                    return null;
                                }
                                if (theSourceOfDefinition == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSourceOfDefinition null when error is also null");
                                }
                                break;
                            }
                        case "symbol":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSymbol = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "symbol"));
                                    return null;
                                }
                                if (theSymbol == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSymbol null when error is also null");
                                }
                                break;
                            }
                        case "dataType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theDataType = DeserializeImplementation.DataTypeIec61360From(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "dataType"));
                                    return null;
                                }
                                if (theDataType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theDataType null when error is also null");
                                }
                                break;
                            }
                        case "definition":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDefinition = keyValue.Value as Nodes.JsonArray;
                                if (arrayDefinition == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "definition"));
                                    return null;
                                }
                                theDefinition = new List<LangString>(
                                    arrayDefinition.Count);
                                int indexDefinition = 0;
                                foreach (Nodes.JsonNode? item in arrayDefinition)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDefinition));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "definition"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDefinition));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "definition"));
                                        return null;
                                    }
                                    theDefinition.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDefinition++;
                                }
                                break;
                            }
                        case "valueFormat":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueFormat = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueFormat"));
                                    return null;
                                }
                                if (theValueFormat == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueFormat null when error is also null");
                                }
                                break;
                            }
                        case "valueList":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValueList = DeserializeImplementation.ValueListFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "valueList"));
                                    return null;
                                }
                                if (theValueList == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValueList null when error is also null");
                                }
                                break;
                            }
                        case "value":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theValue = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "value"));
                                    return null;
                                }
                                if (theValue == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theValue null when error is also null");
                                }
                                break;
                            }
                        case "levelType":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theLevelType = DeserializeImplementation.LevelTypeFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "levelType"));
                                    return null;
                                }
                                if (theLevelType == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theLevelType null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (thePreferredName == null)
                {
                    error = new Reporting.Error(
                        "Required property \"preferredName\" is missing");
                    return null;
                }

                return new Aas.DataSpecificationIec61360(
                    thePreferredName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theShortName,
                    theUnit,
                    theUnitId,
                    theSourceOfDefinition,
                    theSymbol,
                    theDataType,
                    theDefinition,
                    theValueFormat,
                    theValueList,
                    theValue,
                    theLevelType);
            }  // internal static DataSpecificationIec61360From

            /// <summary>
            /// Deserialize an instance of DataSpecificationPhysicalUnit from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataSpecificationPhysicalUnit? DataSpecificationPhysicalUnitFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                string? theUnitName = null;
                string? theUnitSymbol = null;
                List<LangString>? theDefinition = null;
                string? theSiNotation = null;
                string? theSiName = null;
                string? theDinNotation = null;
                string? theEceName = null;
                string? theEceCode = null;
                string? theNistName = null;
                string? theSourceOfDefinition = null;
                string? theConversionFactor = null;
                string? theRegistrationAuthorityId = null;
                string? theSupplier = null;

                foreach (var keyValue in obj)
                {
                    switch (keyValue.Key)
                    {
                        case "unitName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theUnitName = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "unitName"));
                                    return null;
                                }
                                if (theUnitName == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theUnitName null when error is also null");
                                }
                                break;
                            }
                        case "unitSymbol":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theUnitSymbol = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "unitSymbol"));
                                    return null;
                                }
                                if (theUnitSymbol == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theUnitSymbol null when error is also null");
                                }
                                break;
                            }
                        case "definition":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                Nodes.JsonArray? arrayDefinition = keyValue.Value as Nodes.JsonArray;
                                if (arrayDefinition == null)
                                {
                                    error = new Reporting.Error(
                                        $"Expected a JsonArray, but got {keyValue.Value.GetType()}");
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "definition"));
                                    return null;
                                }
                                theDefinition = new List<LangString>(
                                    arrayDefinition.Count);
                                int indexDefinition = 0;
                                foreach (Nodes.JsonNode? item in arrayDefinition)
                                {
                                    if (item == null)
                                    {
                                        error = new Reporting.Error(
                                            "Expected a non-null item, but got a null");
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDefinition));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "definition"));
                                        return null;
                                    }
                                    LangString? parsedItem = DeserializeImplementation.LangStringFrom(
                                        item ?? throw new System.InvalidOperationException(),
                                        out error);
                                    if (error != null)
                                    {
                                        error.PrependSegment(
                                            new Reporting.IndexSegment(
                                                indexDefinition));
                                        error.PrependSegment(
                                            new Reporting.NameSegment(
                                                "definition"));
                                        return null;
                                    }
                                    theDefinition.Add(
                                        parsedItem
                                            ?? throw new System.InvalidOperationException(
                                                "Unexpected result null when error is null"));
                                    indexDefinition++;
                                }
                                break;
                            }
                        case "siNotation":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSiNotation = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "siNotation"));
                                    return null;
                                }
                                if (theSiNotation == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSiNotation null when error is also null");
                                }
                                break;
                            }
                        case "siName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSiName = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "siName"));
                                    return null;
                                }
                                if (theSiName == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSiName null when error is also null");
                                }
                                break;
                            }
                        case "dinNotation":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theDinNotation = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "dinNotation"));
                                    return null;
                                }
                                if (theDinNotation == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theDinNotation null when error is also null");
                                }
                                break;
                            }
                        case "eceName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theEceName = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "eceName"));
                                    return null;
                                }
                                if (theEceName == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theEceName null when error is also null");
                                }
                                break;
                            }
                        case "eceCode":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theEceCode = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "eceCode"));
                                    return null;
                                }
                                if (theEceCode == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theEceCode null when error is also null");
                                }
                                break;
                            }
                        case "nistName":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theNistName = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "nistName"));
                                    return null;
                                }
                                if (theNistName == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theNistName null when error is also null");
                                }
                                break;
                            }
                        case "sourceOfDefinition":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSourceOfDefinition = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "sourceOfDefinition"));
                                    return null;
                                }
                                if (theSourceOfDefinition == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSourceOfDefinition null when error is also null");
                                }
                                break;
                            }
                        case "conversionFactor":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theConversionFactor = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "conversionFactor"));
                                    return null;
                                }
                                if (theConversionFactor == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theConversionFactor null when error is also null");
                                }
                                break;
                            }
                        case "registrationAuthorityId":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theRegistrationAuthorityId = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "registrationAuthorityId"));
                                    return null;
                                }
                                if (theRegistrationAuthorityId == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theRegistrationAuthorityId null when error is also null");
                                }
                                break;
                            }
                        case "supplier":
                            {
                                if (keyValue.Value == null)
                                {
                                    continue;
                                }

                                theSupplier = DeserializeImplementation.StringFrom(
                                    keyValue.Value,
                                    out error);
                                if (error != null)
                                {
                                    error.PrependSegment(
                                        new Reporting.NameSegment(
                                            "supplier"));
                                    return null;
                                }
                                if (theSupplier == null)
                                {
                                    throw new System.InvalidOperationException(
                                        "Unexpected theSupplier null when error is also null");
                                }
                                break;
                            }
                        case "modelType":
                            continue;
                        default:
                            error = new Reporting.Error(
                                $"Unexpected property: {keyValue.Key}");
                            return null;
                    }
                }

                if (theUnitName == null)
                {
                    error = new Reporting.Error(
                        "Required property \"unitName\" is missing");
                    return null;
                }

                if (theUnitSymbol == null)
                {
                    error = new Reporting.Error(
                        "Required property \"unitSymbol\" is missing");
                    return null;
                }

                if (theDefinition == null)
                {
                    error = new Reporting.Error(
                        "Required property \"definition\" is missing");
                    return null;
                }

                return new Aas.DataSpecificationPhysicalUnit(
                    theUnitName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theUnitSymbol
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDefinition
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSiNotation,
                    theSiName,
                    theDinNotation,
                    theEceName,
                    theEceCode,
                    theNistName,
                    theSourceOfDefinition,
                    theConversionFactor,
                    theRegistrationAuthorityId,
                    theSupplier);
            }  // internal static DataSpecificationPhysicalUnitFrom
        }  // public static class DeserializeImplementation

        /// <summary>
        /// Represent a critical error during the deserialization.
        /// </summary>
        public class Exception : System.Exception
        {
            public readonly string Path;
            public readonly string Cause;
            public Exception(string path, string cause)
                : base($"{cause} at: {path}")
            {
                Path = path;
                Cause = cause;
            }
        }

        /// <summary>
        /// Deserialize instances of meta-model classes from JSON nodes.
        /// </summary>
        /// <example>
        /// Here is an example how to parse an instance of IHasSemantics:
        /// <code>
        /// string someString = "... some JSON ...";
        /// var node = System.Text.Json.Nodes.JsonNode.Parse(someString);
        /// Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom(
        ///     node);
        /// </code>
        /// </example>
        public static class Deserialize
        {
            /// <summary>
            /// Deserialize an instance of IHasSemantics from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasSemantics.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasSemantics IHasSemanticsFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasSemantics? result = DeserializeImplementation.IHasSemanticsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Extension from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Extension.
            /// </exception>
            public static Aas.Extension ExtensionFrom(
                Nodes.JsonNode node)
            {
                Aas.Extension? result = DeserializeImplementation.ExtensionFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasExtensions from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasExtensions.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasExtensions IHasExtensionsFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasExtensions? result = DeserializeImplementation.IHasExtensionsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IReferable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IReferable.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IReferable IReferableFrom(
                Nodes.JsonNode node)
            {
                Aas.IReferable? result = DeserializeImplementation.IReferableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IIdentifiable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IIdentifiable.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IIdentifiable IIdentifiableFrom(
                Nodes.JsonNode node)
            {
                Aas.IIdentifiable? result = DeserializeImplementation.IIdentifiableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ModelingKind from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ModelingKind.
            /// </exception>
            public static Aas.ModelingKind ModelingKindFrom(
                Nodes.JsonNode node)
            {
                Aas.ModelingKind? result = DeserializeImplementation.ModelingKindFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasKind from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasKind.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasKind IHasKindFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasKind? result = DeserializeImplementation.IHasKindFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasDataSpecification from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasDataSpecification.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IHasDataSpecification IHasDataSpecificationFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasDataSpecification? result = DeserializeImplementation.IHasDataSpecificationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AdministrativeInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AdministrativeInformation.
            /// </exception>
            public static Aas.AdministrativeInformation AdministrativeInformationFrom(
                Nodes.JsonNode node)
            {
                Aas.AdministrativeInformation? result = DeserializeImplementation.AdministrativeInformationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IQualifiable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IQualifiable.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IQualifiable IQualifiableFrom(
                Nodes.JsonNode node)
            {
                Aas.IQualifiable? result = DeserializeImplementation.IQualifiableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of QualifierKind from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of QualifierKind.
            /// </exception>
            public static Aas.QualifierKind QualifierKindFrom(
                Nodes.JsonNode node)
            {
                Aas.QualifierKind? result = DeserializeImplementation.QualifierKindFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Qualifier from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Qualifier.
            /// </exception>
            public static Aas.Qualifier QualifierFrom(
                Nodes.JsonNode node)
            {
                Aas.Qualifier? result = DeserializeImplementation.QualifierFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetAdministrationShell from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AssetAdministrationShell.
            /// </exception>
            public static Aas.AssetAdministrationShell AssetAdministrationShellFrom(
                Nodes.JsonNode node)
            {
                Aas.AssetAdministrationShell? result = DeserializeImplementation.AssetAdministrationShellFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AssetInformation.
            /// </exception>
            public static Aas.AssetInformation AssetInformationFrom(
                Nodes.JsonNode node)
            {
                Aas.AssetInformation? result = DeserializeImplementation.AssetInformationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Resource from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Resource.
            /// </exception>
            public static Aas.Resource ResourceFrom(
                Nodes.JsonNode node)
            {
                Aas.Resource? result = DeserializeImplementation.ResourceFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetKind from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AssetKind.
            /// </exception>
            public static Aas.AssetKind AssetKindFrom(
                Nodes.JsonNode node)
            {
                Aas.AssetKind? result = DeserializeImplementation.AssetKindFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SpecificAssetId from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of SpecificAssetId.
            /// </exception>
            public static Aas.SpecificAssetId SpecificAssetIdFrom(
                Nodes.JsonNode node)
            {
                Aas.SpecificAssetId? result = DeserializeImplementation.SpecificAssetIdFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Submodel from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Submodel.
            /// </exception>
            public static Aas.Submodel SubmodelFrom(
                Nodes.JsonNode node)
            {
                Aas.Submodel? result = DeserializeImplementation.SubmodelFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ISubmodelElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ISubmodelElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.ISubmodelElement ISubmodelElementFrom(
                Nodes.JsonNode node)
            {
                Aas.ISubmodelElement? result = DeserializeImplementation.ISubmodelElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IRelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IRelationshipElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IRelationshipElement IRelationshipElementFrom(
                Nodes.JsonNode node)
            {
                Aas.IRelationshipElement? result = DeserializeImplementation.IRelationshipElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of RelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of RelationshipElement.
            /// </exception>
            public static Aas.RelationshipElement RelationshipElementFrom(
                Nodes.JsonNode node)
            {
                Aas.RelationshipElement? result = DeserializeImplementation.RelationshipElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AasSubmodelElements from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AasSubmodelElements.
            /// </exception>
            public static Aas.AasSubmodelElements AasSubmodelElementsFrom(
                Nodes.JsonNode node)
            {
                Aas.AasSubmodelElements? result = DeserializeImplementation.AasSubmodelElementsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SubmodelElementList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of SubmodelElementList.
            /// </exception>
            public static Aas.SubmodelElementList SubmodelElementListFrom(
                Nodes.JsonNode node)
            {
                Aas.SubmodelElementList? result = DeserializeImplementation.SubmodelElementListFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SubmodelElementCollection from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of SubmodelElementCollection.
            /// </exception>
            public static Aas.SubmodelElementCollection SubmodelElementCollectionFrom(
                Nodes.JsonNode node)
            {
                Aas.SubmodelElementCollection? result = DeserializeImplementation.SubmodelElementCollectionFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IDataElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IDataElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IDataElement IDataElementFrom(
                Nodes.JsonNode node)
            {
                Aas.IDataElement? result = DeserializeImplementation.IDataElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Property from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Property.
            /// </exception>
            public static Aas.Property PropertyFrom(
                Nodes.JsonNode node)
            {
                Aas.Property? result = DeserializeImplementation.PropertyFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of MultiLanguageProperty from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of MultiLanguageProperty.
            /// </exception>
            public static Aas.MultiLanguageProperty MultiLanguagePropertyFrom(
                Nodes.JsonNode node)
            {
                Aas.MultiLanguageProperty? result = DeserializeImplementation.MultiLanguagePropertyFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Range from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Range.
            /// </exception>
            public static Aas.Range RangeFrom(
                Nodes.JsonNode node)
            {
                Aas.Range? result = DeserializeImplementation.RangeFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ReferenceElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ReferenceElement.
            /// </exception>
            public static Aas.ReferenceElement ReferenceElementFrom(
                Nodes.JsonNode node)
            {
                Aas.ReferenceElement? result = DeserializeImplementation.ReferenceElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Blob from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Blob.
            /// </exception>
            public static Aas.Blob BlobFrom(
                Nodes.JsonNode node)
            {
                Aas.Blob? result = DeserializeImplementation.BlobFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of File from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of File.
            /// </exception>
            public static Aas.File FileFrom(
                Nodes.JsonNode node)
            {
                Aas.File? result = DeserializeImplementation.FileFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AnnotatedRelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AnnotatedRelationshipElement.
            /// </exception>
            public static Aas.AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(
                Nodes.JsonNode node)
            {
                Aas.AnnotatedRelationshipElement? result = DeserializeImplementation.AnnotatedRelationshipElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of EntityType from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of EntityType.
            /// </exception>
            public static Aas.EntityType EntityTypeFrom(
                Nodes.JsonNode node)
            {
                Aas.EntityType? result = DeserializeImplementation.EntityTypeFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Entity from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Entity.
            /// </exception>
            public static Aas.Entity EntityFrom(
                Nodes.JsonNode node)
            {
                Aas.Entity? result = DeserializeImplementation.EntityFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Direction from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Direction.
            /// </exception>
            public static Aas.Direction DirectionFrom(
                Nodes.JsonNode node)
            {
                Aas.Direction? result = DeserializeImplementation.DirectionFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of StateOfEvent from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of StateOfEvent.
            /// </exception>
            public static Aas.StateOfEvent StateOfEventFrom(
                Nodes.JsonNode node)
            {
                Aas.StateOfEvent? result = DeserializeImplementation.StateOfEventFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of EventPayload from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of EventPayload.
            /// </exception>
            public static Aas.EventPayload EventPayloadFrom(
                Nodes.JsonNode node)
            {
                Aas.EventPayload? result = DeserializeImplementation.EventPayloadFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IEventElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IEventElement.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IEventElement IEventElementFrom(
                Nodes.JsonNode node)
            {
                Aas.IEventElement? result = DeserializeImplementation.IEventElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of BasicEventElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of BasicEventElement.
            /// </exception>
            public static Aas.BasicEventElement BasicEventElementFrom(
                Nodes.JsonNode node)
            {
                Aas.BasicEventElement? result = DeserializeImplementation.BasicEventElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Operation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Operation.
            /// </exception>
            public static Aas.Operation OperationFrom(
                Nodes.JsonNode node)
            {
                Aas.Operation? result = DeserializeImplementation.OperationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of OperationVariable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of OperationVariable.
            /// </exception>
            public static Aas.OperationVariable OperationVariableFrom(
                Nodes.JsonNode node)
            {
                Aas.OperationVariable? result = DeserializeImplementation.OperationVariableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Capability from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Capability.
            /// </exception>
            public static Aas.Capability CapabilityFrom(
                Nodes.JsonNode node)
            {
                Aas.Capability? result = DeserializeImplementation.CapabilityFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ConceptDescription from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ConceptDescription.
            /// </exception>
            public static Aas.ConceptDescription ConceptDescriptionFrom(
                Nodes.JsonNode node)
            {
                Aas.ConceptDescription? result = DeserializeImplementation.ConceptDescriptionFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ReferenceTypes from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ReferenceTypes.
            /// </exception>
            public static Aas.ReferenceTypes ReferenceTypesFrom(
                Nodes.JsonNode node)
            {
                Aas.ReferenceTypes? result = DeserializeImplementation.ReferenceTypesFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Reference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Reference.
            /// </exception>
            public static Aas.Reference ReferenceFrom(
                Nodes.JsonNode node)
            {
                Aas.Reference? result = DeserializeImplementation.ReferenceFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Key from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Key.
            /// </exception>
            public static Aas.Key KeyFrom(
                Nodes.JsonNode node)
            {
                Aas.Key? result = DeserializeImplementation.KeyFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of KeyTypes from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of KeyTypes.
            /// </exception>
            public static Aas.KeyTypes KeyTypesFrom(
                Nodes.JsonNode node)
            {
                Aas.KeyTypes? result = DeserializeImplementation.KeyTypesFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataTypeDefXsd from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataTypeDefXsd.
            /// </exception>
            public static Aas.DataTypeDefXsd DataTypeDefXsdFrom(
                Nodes.JsonNode node)
            {
                Aas.DataTypeDefXsd? result = DeserializeImplementation.DataTypeDefXsdFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LangString from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of LangString.
            /// </exception>
            public static Aas.LangString LangStringFrom(
                Nodes.JsonNode node)
            {
                Aas.LangString? result = DeserializeImplementation.LangStringFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Environment from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Environment.
            /// </exception>
            public static Aas.Environment EnvironmentFrom(
                Nodes.JsonNode node)
            {
                Aas.Environment? result = DeserializeImplementation.EnvironmentFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IDataSpecificationContent from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IDataSpecificationContent.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "InconsistentNaming")]
            public static Aas.IDataSpecificationContent IDataSpecificationContentFrom(
                Nodes.JsonNode node)
            {
                Aas.IDataSpecificationContent? result = DeserializeImplementation.IDataSpecificationContentFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of EmbeddedDataSpecification from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of EmbeddedDataSpecification.
            /// </exception>
            public static Aas.EmbeddedDataSpecification EmbeddedDataSpecificationFrom(
                Nodes.JsonNode node)
            {
                Aas.EmbeddedDataSpecification? result = DeserializeImplementation.EmbeddedDataSpecificationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataTypeIec61360 from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataTypeIec61360.
            /// </exception>
            public static Aas.DataTypeIec61360 DataTypeIec61360From(
                Nodes.JsonNode node)
            {
                Aas.DataTypeIec61360? result = DeserializeImplementation.DataTypeIec61360From(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LevelType from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of LevelType.
            /// </exception>
            public static Aas.LevelType LevelTypeFrom(
                Nodes.JsonNode node)
            {
                Aas.LevelType? result = DeserializeImplementation.LevelTypeFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ValueReferencePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ValueReferencePair.
            /// </exception>
            public static Aas.ValueReferencePair ValueReferencePairFrom(
                Nodes.JsonNode node)
            {
                Aas.ValueReferencePair? result = DeserializeImplementation.ValueReferencePairFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ValueList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ValueList.
            /// </exception>
            public static Aas.ValueList ValueListFrom(
                Nodes.JsonNode node)
            {
                Aas.ValueList? result = DeserializeImplementation.ValueListFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataSpecificationIec61360 from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataSpecificationIec61360.
            /// </exception>
            public static Aas.DataSpecificationIec61360 DataSpecificationIec61360From(
                Nodes.JsonNode node)
            {
                Aas.DataSpecificationIec61360? result = DeserializeImplementation.DataSpecificationIec61360From(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataSpecificationPhysicalUnit from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataSpecificationPhysicalUnit.
            /// </exception>
            public static Aas.DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom(
                Nodes.JsonNode node)
            {
                Aas.DataSpecificationPhysicalUnit? result = DeserializeImplementation.DataSpecificationPhysicalUnitFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }
        }  // public static class Deserialize

        internal class Transformer
            : Visitation.AbstractTransformer<Nodes.JsonObject>
        {
            /// <summary>
            /// Convert <paramref name="that" /> 64-bit long integer to a JSON value.
            /// </summary>
            /// <param name="that">value to be converted</param>
            /// <exception name="System.ArgumentException">
            /// Thrown if <paramref name="that" /> is not within the range where it
            /// can be losslessly converted to a double floating number.
            /// </exception>
            [CodeAnalysis.SuppressMessage("ReSharper", "UnusedMember.Local")]
            private static Nodes.JsonValue ToJsonValue(long that)
            {
                // We need to check that we can perform a lossless conversion.
                if ((long)((double)that) != that)
                {
                    throw new System.ArgumentException(
                        $"The number can not be losslessly represented in JSON: {that}");
                }
                return Nodes.JsonValue.Create(that);
            }

            public override Nodes.JsonObject Transform(Aas.Extension that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                result["name"] = Nodes.JsonValue.Create(
                    that.Name);

                if (that.ValueType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDefXsd value = that.ValueType
                        ?? throw new System.InvalidOperationException();
                    result["valueType"] = Serialize.DataTypeDefXsdToJsonValue(
                        value);
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.RefersTo != null)
                {
                    result["refersTo"] = Transform(
                        that.RefersTo);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AdministrativeInformation that)
            {
                var result = new Nodes.JsonObject();

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.Version != null)
                {
                    result["version"] = Nodes.JsonValue.Create(
                        that.Version);
                }

                if (that.Revision != null)
                {
                    result["revision"] = Nodes.JsonValue.Create(
                        that.Revision);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Qualifier that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.QualifierKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.QualifierKindToJsonValue(
                        value);
                }

                result["type"] = Nodes.JsonValue.Create(
                    that.Type);

                result["valueType"] = Serialize.DataTypeDefXsdToJsonValue(
                    that.ValueType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AssetAdministrationShell that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.DerivedFrom != null)
                {
                    result["derivedFrom"] = Transform(
                        that.DerivedFrom);
                }

                result["assetInformation"] = Transform(
                    that.AssetInformation);

                if (that.Submodels != null)
                {
                    var arraySubmodels = new Nodes.JsonArray();
                    foreach (Reference item in that.Submodels)
                    {
                        arraySubmodels.Add(
                            Transform(
                                item));
                    }
                    result["submodels"] = arraySubmodels;
                }

                result["modelType"] = "AssetAdministrationShell";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AssetInformation that)
            {
                var result = new Nodes.JsonObject();

                result["assetKind"] = Serialize.AssetKindToJsonValue(
                    that.AssetKind);

                if (that.GlobalAssetId != null)
                {
                    result["globalAssetId"] = Transform(
                        that.GlobalAssetId);
                }

                if (that.SpecificAssetIds != null)
                {
                    var arraySpecificAssetIds = new Nodes.JsonArray();
                    foreach (SpecificAssetId item in that.SpecificAssetIds)
                    {
                        arraySpecificAssetIds.Add(
                            Transform(
                                item));
                    }
                    result["specificAssetIds"] = arraySpecificAssetIds;
                }

                if (that.DefaultThumbnail != null)
                {
                    result["defaultThumbnail"] = Transform(
                        that.DefaultThumbnail);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Resource that)
            {
                var result = new Nodes.JsonObject();

                result["path"] = Nodes.JsonValue.Create(
                    that.Path);

                if (that.ContentType != null)
                {
                    result["contentType"] = Nodes.JsonValue.Create(
                        that.ContentType);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.SpecificAssetId that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                result["name"] = Nodes.JsonValue.Create(
                    that.Name);

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                result["externalSubjectId"] = Transform(
                    that.ExternalSubjectId);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Submodel that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.SubmodelElements != null)
                {
                    var arraySubmodelElements = new Nodes.JsonArray();
                    foreach (ISubmodelElement item in that.SubmodelElements)
                    {
                        arraySubmodelElements.Add(
                            Transform(
                                item));
                    }
                    result["submodelElements"] = arraySubmodelElements;
                }

                result["modelType"] = "Submodel";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.RelationshipElement that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                result["first"] = Transform(
                    that.First);

                result["second"] = Transform(
                    that.Second);

                result["modelType"] = "RelationshipElement";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.SubmodelElementList that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.OrderRelevant != null)
                {
                    result["orderRelevant"] = Nodes.JsonValue.Create(
                        that.OrderRelevant);
                }

                if (that.Value != null)
                {
                    var arrayValue = new Nodes.JsonArray();
                    foreach (ISubmodelElement item in that.Value)
                    {
                        arrayValue.Add(
                            Transform(
                                item));
                    }
                    result["value"] = arrayValue;
                }

                if (that.SemanticIdListElement != null)
                {
                    result["semanticIdListElement"] = Transform(
                        that.SemanticIdListElement);
                }

                result["typeValueListElement"] = Serialize.AasSubmodelElementsToJsonValue(
                    that.TypeValueListElement);

                if (that.ValueTypeListElement != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDefXsd value = that.ValueTypeListElement
                        ?? throw new System.InvalidOperationException();
                    result["valueTypeListElement"] = Serialize.DataTypeDefXsdToJsonValue(
                        value);
                }

                result["modelType"] = "SubmodelElementList";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.SubmodelElementCollection that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.Value != null)
                {
                    var arrayValue = new Nodes.JsonArray();
                    foreach (ISubmodelElement item in that.Value)
                    {
                        arrayValue.Add(
                            Transform(
                                item));
                    }
                    result["value"] = arrayValue;
                }

                result["modelType"] = "SubmodelElementCollection";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Property that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                result["valueType"] = Serialize.DataTypeDefXsdToJsonValue(
                    that.ValueType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                result["modelType"] = "Property";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.MultiLanguageProperty that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.Value != null)
                {
                    var arrayValue = new Nodes.JsonArray();
                    foreach (LangString item in that.Value)
                    {
                        arrayValue.Add(
                            Transform(
                                item));
                    }
                    result["value"] = arrayValue;
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                result["modelType"] = "MultiLanguageProperty";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Range that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                result["valueType"] = Serialize.DataTypeDefXsdToJsonValue(
                    that.ValueType);

                if (that.Min != null)
                {
                    result["min"] = Nodes.JsonValue.Create(
                        that.Min);
                }

                if (that.Max != null)
                {
                    result["max"] = Nodes.JsonValue.Create(
                        that.Max);
                }

                result["modelType"] = "Range";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ReferenceElement that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.Value != null)
                {
                    result["value"] = Transform(
                        that.Value);
                }

                result["modelType"] = "ReferenceElement";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Blob that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        System.Convert.ToBase64String(
                            that.Value));
                }

                result["contentType"] = Nodes.JsonValue.Create(
                    that.ContentType);

                result["modelType"] = "Blob";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.File that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                result["contentType"] = Nodes.JsonValue.Create(
                    that.ContentType);

                result["modelType"] = "File";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AnnotatedRelationshipElement that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                result["first"] = Transform(
                    that.First);

                result["second"] = Transform(
                    that.Second);

                if (that.Annotations != null)
                {
                    var arrayAnnotations = new Nodes.JsonArray();
                    foreach (IDataElement item in that.Annotations)
                    {
                        arrayAnnotations.Add(
                            Transform(
                                item));
                    }
                    result["annotations"] = arrayAnnotations;
                }

                result["modelType"] = "AnnotatedRelationshipElement";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Entity that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.Statements != null)
                {
                    var arrayStatements = new Nodes.JsonArray();
                    foreach (ISubmodelElement item in that.Statements)
                    {
                        arrayStatements.Add(
                            Transform(
                                item));
                    }
                    result["statements"] = arrayStatements;
                }

                result["entityType"] = Serialize.EntityTypeToJsonValue(
                    that.EntityType);

                if (that.GlobalAssetId != null)
                {
                    result["globalAssetId"] = Transform(
                        that.GlobalAssetId);
                }

                if (that.SpecificAssetId != null)
                {
                    result["specificAssetId"] = Transform(
                        that.SpecificAssetId);
                }

                result["modelType"] = "Entity";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.EventPayload that)
            {
                var result = new Nodes.JsonObject();

                result["source"] = Transform(
                    that.Source);

                if (that.SourceSemanticId != null)
                {
                    result["sourceSemanticId"] = Transform(
                        that.SourceSemanticId);
                }

                result["observableReference"] = Transform(
                    that.ObservableReference);

                if (that.ObservableSemanticId != null)
                {
                    result["observableSemanticId"] = Transform(
                        that.ObservableSemanticId);
                }

                if (that.Topic != null)
                {
                    result["topic"] = Nodes.JsonValue.Create(
                        that.Topic);
                }

                if (that.SubjectId != null)
                {
                    result["subjectId"] = Transform(
                        that.SubjectId);
                }

                result["timeStamp"] = Nodes.JsonValue.Create(
                    that.TimeStamp);

                if (that.Payload != null)
                {
                    result["payload"] = Nodes.JsonValue.Create(
                        that.Payload);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.BasicEventElement that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                result["observed"] = Transform(
                    that.Observed);

                result["direction"] = Serialize.DirectionToJsonValue(
                    that.Direction);

                result["state"] = Serialize.StateOfEventToJsonValue(
                    that.State);

                if (that.MessageTopic != null)
                {
                    result["messageTopic"] = Nodes.JsonValue.Create(
                        that.MessageTopic);
                }

                if (that.MessageBroker != null)
                {
                    result["messageBroker"] = Transform(
                        that.MessageBroker);
                }

                if (that.LastUpdate != null)
                {
                    result["lastUpdate"] = Nodes.JsonValue.Create(
                        that.LastUpdate);
                }

                if (that.MinInterval != null)
                {
                    result["minInterval"] = Nodes.JsonValue.Create(
                        that.MinInterval);
                }

                if (that.MaxInterval != null)
                {
                    result["maxInterval"] = Nodes.JsonValue.Create(
                        that.MaxInterval);
                }

                result["modelType"] = "BasicEventElement";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Operation that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.InputVariables != null)
                {
                    var arrayInputVariables = new Nodes.JsonArray();
                    foreach (OperationVariable item in that.InputVariables)
                    {
                        arrayInputVariables.Add(
                            Transform(
                                item));
                    }
                    result["inputVariables"] = arrayInputVariables;
                }

                if (that.OutputVariables != null)
                {
                    var arrayOutputVariables = new Nodes.JsonArray();
                    foreach (OperationVariable item in that.OutputVariables)
                    {
                        arrayOutputVariables.Add(
                            Transform(
                                item));
                    }
                    result["outputVariables"] = arrayOutputVariables;
                }

                if (that.InoutputVariables != null)
                {
                    var arrayInoutputVariables = new Nodes.JsonArray();
                    foreach (OperationVariable item in that.InoutputVariables)
                    {
                        arrayInoutputVariables.Add(
                            Transform(
                                item));
                    }
                    result["inoutputVariables"] = arrayInoutputVariables;
                }

                result["modelType"] = "Operation";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.OperationVariable that)
            {
                var result = new Nodes.JsonObject();

                result["value"] = Transform(
                    that.Value);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Capability that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.SupplementalSemanticIds != null)
                {
                    var arraySupplementalSemanticIds = new Nodes.JsonArray();
                    foreach (Reference item in that.SupplementalSemanticIds)
                    {
                        arraySupplementalSemanticIds.Add(
                            Transform(
                                item));
                    }
                    result["supplementalSemanticIds"] = arraySupplementalSemanticIds;
                }

                if (that.Qualifiers != null)
                {
                    var arrayQualifiers = new Nodes.JsonArray();
                    foreach (Qualifier item in that.Qualifiers)
                    {
                        arrayQualifiers.Add(
                            Transform(
                                item));
                    }
                    result["qualifiers"] = arrayQualifiers;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                result["modelType"] = "Capability";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ConceptDescription that)
            {
                var result = new Nodes.JsonObject();

                if (that.Extensions != null)
                {
                    var arrayExtensions = new Nodes.JsonArray();
                    foreach (Extension item in that.Extensions)
                    {
                        arrayExtensions.Add(
                            Transform(
                                item));
                    }
                    result["extensions"] = arrayExtensions;
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    var arrayDisplayName = new Nodes.JsonArray();
                    foreach (LangString item in that.DisplayName)
                    {
                        arrayDisplayName.Add(
                            Transform(
                                item));
                    }
                    result["displayName"] = arrayDisplayName;
                }

                if (that.Description != null)
                {
                    var arrayDescription = new Nodes.JsonArray();
                    foreach (LangString item in that.Description)
                    {
                        arrayDescription.Add(
                            Transform(
                                item));
                    }
                    result["description"] = arrayDescription;
                }

                if (that.Checksum != null)
                {
                    result["checksum"] = Nodes.JsonValue.Create(
                        that.Checksum);
                }

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.EmbeddedDataSpecifications != null)
                {
                    var arrayEmbeddedDataSpecifications = new Nodes.JsonArray();
                    foreach (EmbeddedDataSpecification item in that.EmbeddedDataSpecifications)
                    {
                        arrayEmbeddedDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["embeddedDataSpecifications"] = arrayEmbeddedDataSpecifications;
                }

                if (that.IsCaseOf != null)
                {
                    var arrayIsCaseOf = new Nodes.JsonArray();
                    foreach (Reference item in that.IsCaseOf)
                    {
                        arrayIsCaseOf.Add(
                            Transform(
                                item));
                    }
                    result["isCaseOf"] = arrayIsCaseOf;
                }

                result["modelType"] = "ConceptDescription";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Reference that)
            {
                var result = new Nodes.JsonObject();

                result["type"] = Serialize.ReferenceTypesToJsonValue(
                    that.Type);

                if (that.ReferredSemanticId != null)
                {
                    result["referredSemanticId"] = Transform(
                        that.ReferredSemanticId);
                }

                var arrayKeys = new Nodes.JsonArray();
                foreach (Key item in that.Keys)
                {
                    arrayKeys.Add(
                        Transform(
                            item));
                }
                result["keys"] = arrayKeys;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Key that)
            {
                var result = new Nodes.JsonObject();

                result["type"] = Serialize.KeyTypesToJsonValue(
                    that.Type);

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.LangString that)
            {
                var result = new Nodes.JsonObject();

                result["language"] = Nodes.JsonValue.Create(
                    that.Language);

                result["text"] = Nodes.JsonValue.Create(
                    that.Text);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Environment that)
            {
                var result = new Nodes.JsonObject();

                if (that.AssetAdministrationShells != null)
                {
                    var arrayAssetAdministrationShells = new Nodes.JsonArray();
                    foreach (AssetAdministrationShell item in that.AssetAdministrationShells)
                    {
                        arrayAssetAdministrationShells.Add(
                            Transform(
                                item));
                    }
                    result["assetAdministrationShells"] = arrayAssetAdministrationShells;
                }

                if (that.Submodels != null)
                {
                    var arraySubmodels = new Nodes.JsonArray();
                    foreach (Submodel item in that.Submodels)
                    {
                        arraySubmodels.Add(
                            Transform(
                                item));
                    }
                    result["submodels"] = arraySubmodels;
                }

                if (that.ConceptDescriptions != null)
                {
                    var arrayConceptDescriptions = new Nodes.JsonArray();
                    foreach (ConceptDescription item in that.ConceptDescriptions)
                    {
                        arrayConceptDescriptions.Add(
                            Transform(
                                item));
                    }
                    result["conceptDescriptions"] = arrayConceptDescriptions;
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.EmbeddedDataSpecification that)
            {
                var result = new Nodes.JsonObject();

                result["dataSpecification"] = Transform(
                    that.DataSpecification);

                result["dataSpecificationContent"] = Transform(
                    that.DataSpecificationContent);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ValueReferencePair that)
            {
                var result = new Nodes.JsonObject();

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                result["valueId"] = Transform(
                    that.ValueId);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ValueList that)
            {
                var result = new Nodes.JsonObject();

                var arrayValueReferencePairs = new Nodes.JsonArray();
                foreach (ValueReferencePair item in that.ValueReferencePairs)
                {
                    arrayValueReferencePairs.Add(
                        Transform(
                            item));
                }
                result["valueReferencePairs"] = arrayValueReferencePairs;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.DataSpecificationIec61360 that)
            {
                var result = new Nodes.JsonObject();

                var arrayPreferredName = new Nodes.JsonArray();
                foreach (LangString item in that.PreferredName)
                {
                    arrayPreferredName.Add(
                        Transform(
                            item));
                }
                result["preferredName"] = arrayPreferredName;

                if (that.ShortName != null)
                {
                    var arrayShortName = new Nodes.JsonArray();
                    foreach (LangString item in that.ShortName)
                    {
                        arrayShortName.Add(
                            Transform(
                                item));
                    }
                    result["shortName"] = arrayShortName;
                }

                if (that.Unit != null)
                {
                    result["unit"] = Nodes.JsonValue.Create(
                        that.Unit);
                }

                if (that.UnitId != null)
                {
                    result["unitId"] = Transform(
                        that.UnitId);
                }

                if (that.SourceOfDefinition != null)
                {
                    result["sourceOfDefinition"] = Nodes.JsonValue.Create(
                        that.SourceOfDefinition);
                }

                if (that.Symbol != null)
                {
                    result["symbol"] = Nodes.JsonValue.Create(
                        that.Symbol);
                }

                if (that.DataType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeIec61360 value = that.DataType
                        ?? throw new System.InvalidOperationException();
                    result["dataType"] = Serialize.DataTypeIec61360ToJsonValue(
                        value);
                }

                if (that.Definition != null)
                {
                    var arrayDefinition = new Nodes.JsonArray();
                    foreach (LangString item in that.Definition)
                    {
                        arrayDefinition.Add(
                            Transform(
                                item));
                    }
                    result["definition"] = arrayDefinition;
                }

                if (that.ValueFormat != null)
                {
                    result["valueFormat"] = Nodes.JsonValue.Create(
                        that.ValueFormat);
                }

                if (that.ValueList != null)
                {
                    result["valueList"] = Transform(
                        that.ValueList);
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.LevelType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.LevelType value = that.LevelType
                        ?? throw new System.InvalidOperationException();
                    result["levelType"] = Serialize.LevelTypeToJsonValue(
                        value);
                }

                result["modelType"] = "DataSpecificationIEC61360";

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.DataSpecificationPhysicalUnit that)
            {
                var result = new Nodes.JsonObject();

                result["unitName"] = Nodes.JsonValue.Create(
                    that.UnitName);

                result["unitSymbol"] = Nodes.JsonValue.Create(
                    that.UnitSymbol);

                var arrayDefinition = new Nodes.JsonArray();
                foreach (LangString item in that.Definition)
                {
                    arrayDefinition.Add(
                        Transform(
                            item));
                }
                result["definition"] = arrayDefinition;

                if (that.SiNotation != null)
                {
                    result["siNotation"] = Nodes.JsonValue.Create(
                        that.SiNotation);
                }

                if (that.SiName != null)
                {
                    result["siName"] = Nodes.JsonValue.Create(
                        that.SiName);
                }

                if (that.DinNotation != null)
                {
                    result["dinNotation"] = Nodes.JsonValue.Create(
                        that.DinNotation);
                }

                if (that.EceName != null)
                {
                    result["eceName"] = Nodes.JsonValue.Create(
                        that.EceName);
                }

                if (that.EceCode != null)
                {
                    result["eceCode"] = Nodes.JsonValue.Create(
                        that.EceCode);
                }

                if (that.NistName != null)
                {
                    result["nistName"] = Nodes.JsonValue.Create(
                        that.NistName);
                }

                if (that.SourceOfDefinition != null)
                {
                    result["sourceOfDefinition"] = Nodes.JsonValue.Create(
                        that.SourceOfDefinition);
                }

                if (that.ConversionFactor != null)
                {
                    result["conversionFactor"] = Nodes.JsonValue.Create(
                        that.ConversionFactor);
                }

                if (that.RegistrationAuthorityId != null)
                {
                    result["registrationAuthorityId"] = Nodes.JsonValue.Create(
                        that.RegistrationAuthorityId);
                }

                if (that.Supplier != null)
                {
                    result["supplier"] = Nodes.JsonValue.Create(
                        that.Supplier);
                }

                result["modelType"] = "DataSpecificationPhysicalUnit";

                return result;
            }
        }  // internal class Transformer

        /// <summary>
        /// Serialize instances of meta-model classes to JSON elements.
        /// </summary>
        /// <example>
        /// Here is an example how to serialize an instance of IHasSemantics:
        /// <code>
        /// var anInstance = new Aas.IHasSemantics(
        ///     // ... some constructor arguments ...
        /// );
        /// System.Text.Json.Nodes.JsonObject element = (
        ///     Serialize.ToJsonObject(
        ///         anInstance));
        /// </code>
        /// </example>
        public static class Serialize
        {
            private static readonly Transformer Transformer = new Transformer();

            /// <summary>
            /// Serialize an instance of the meta-model into a JSON object.
            /// </summary>
            public static Nodes.JsonObject ToJsonObject(Aas.IClass that)
            {
                return Serialize.Transformer.Transform(that);
            }

            /// <summary>
            /// Serialize a literal of ModelingKind into a JSON string.
            /// </summary>
            public static Nodes.JsonValue ModelingKindToJsonValue(Aas.ModelingKind that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid ModelingKind: {that}");
            }

            /// <summary>
            /// Serialize a literal of QualifierKind into a JSON string.
            /// </summary>
            public static Nodes.JsonValue QualifierKindToJsonValue(Aas.QualifierKind that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid QualifierKind: {that}");
            }

            /// <summary>
            /// Serialize a literal of AssetKind into a JSON string.
            /// </summary>
            public static Nodes.JsonValue AssetKindToJsonValue(Aas.AssetKind that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid AssetKind: {that}");
            }

            /// <summary>
            /// Serialize a literal of AasSubmodelElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue AasSubmodelElementsToJsonValue(Aas.AasSubmodelElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid AasSubmodelElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of EntityType into a JSON string.
            /// </summary>
            public static Nodes.JsonValue EntityTypeToJsonValue(Aas.EntityType that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid EntityType: {that}");
            }

            /// <summary>
            /// Serialize a literal of Direction into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DirectionToJsonValue(Aas.Direction that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid Direction: {that}");
            }

            /// <summary>
            /// Serialize a literal of StateOfEvent into a JSON string.
            /// </summary>
            public static Nodes.JsonValue StateOfEventToJsonValue(Aas.StateOfEvent that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid StateOfEvent: {that}");
            }

            /// <summary>
            /// Serialize a literal of ReferenceTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue ReferenceTypesToJsonValue(Aas.ReferenceTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid ReferenceTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of KeyTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue KeyTypesToJsonValue(Aas.KeyTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid KeyTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of DataTypeDefXsd into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DataTypeDefXsdToJsonValue(Aas.DataTypeDefXsd that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DataTypeDefXsd: {that}");
            }

            /// <summary>
            /// Serialize a literal of DataTypeIec61360 into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DataTypeIec61360ToJsonValue(Aas.DataTypeIec61360 that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DataTypeIec61360: {that}");
            }

            /// <summary>
            /// Serialize a literal of LevelType into a JSON string.
            /// </summary>
            public static Nodes.JsonValue LevelTypeToJsonValue(Aas.LevelType that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid LevelType: {that}");
            }
        }  // public static class Serialize
    }  // public static class Jsonization
}  // namespace AasCore.Aas3_0_RC02

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
