/*
/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0_RC02;  // renamed
using EnumMemberAttribute = System.Runtime.Serialization.EnumMemberAttribute;

using System.Collections.Generic;  // can't alias

using Newtonsoft.Json;
using AdminShellNS.DiaryData;
using System;

namespace AasCore.Aas3_0_RC02
{

    /// <summary>
    /// Represent a general class of an AAS model.
    /// </summary>
    public interface IClass
    {
        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce();

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend();

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor);

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context);

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer);

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context);
    }

    /// <summary>
    /// Element that can have a semantic definition plus some supplemental semantic
    /// definitions.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-118:
    ///     If there are ID <see cref="Aas.IHasSemantics.SupplementalSemanticIds" /> defined
    ///     then there shall be also a main semantic ID <see cref="Aas.IHasSemantics.SemanticId" />.
    ///   </li>
    /// </ul>
    /// </remarks>
    public interface IHasSemantics : IClass
    {
        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }
    }

    /// <summary>
    /// Single extension of an element.
    /// </summary>
    public class Extension : IHasSemantics
    {
        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Name of the extension.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-077:
        ///     The name of an extension within <see cref="Aas.IHasExtensions" /> needs to be unique.
        ///   </li>
        /// </ul>
        /// </remarks>
        public string Name { get; set; }

        /// <summary>
        /// Type of the value of the extension.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.DataTypeDefXsd.String" />
        /// </remarks>
        public DataTypeDefXsd? ValueType { get; set; }

        /// <summary>
        /// Value of the extension
        /// </summary>
        public string? Value { get; set; }

        /// <summary>
        /// Reference to an element the extension refers to.
        /// </summary>
        public Reference? RefersTo { get; set; }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Return the <see cref="Extension.ValueType" /> or the default value
        /// if it has not been set.
        /// </summary>
        public DataTypeDefXsd ValueTypeOrDefault()
        {
            return ValueType ?? DataTypeDefXsd.String;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (RefersTo != null)
            {
                yield return RefersTo;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (RefersTo != null)
            {
                yield return RefersTo;

                // Recurse
                foreach (var anItem in RefersTo.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Extension(
            string name,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            DataTypeDefXsd? valueType = null,
            string? value = null,
            Reference? refersTo = null)
        {
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Name = name;
            ValueType = valueType;
            Value = value;
            RefersTo = refersTo;
        }
    }

    /// <summary>
    /// Element that can be extended by proprietary extensions.
    /// </summary>
    /// <remarks>
    /// Extensions are proprietary, i.e. they do not support global interoperability.
    /// </remarks>
    public interface IHasExtensions : IClass
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }
    }

    /// <summary>
    /// An element that is referable by its <see cref="Aas.IReferable.IdShort" />.
    /// </summary>
    /// <remarks>
    /// This ID is not globally unique.
    /// This ID is unique within the name space of the element.
    /// </remarks>
    public interface IReferable : IHasExtensions, IDiaryData
    {
        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        #region Parent
        [JsonIgnore]
        public IClass Parent { get; set; }
        #endregion

        #region TimeStamp
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        #endregion
    }

    /// <summary>
    /// An element that has a globally unique identifier.
    /// </summary>
    public interface IIdentifiable : IReferable
    {
        /// <summary>
        /// Administrative information of an identifiable element.
        /// </summary>
        /// <remarks>
        /// Some of the administrative information like the version number might need to
        /// be part of the identification.
        /// </remarks>
        public AdministrativeInformation? Administration { get; set; }

        /// <summary>
        /// The globally unique identification of the element.
        /// </summary>
        public string Id { get; set; }
    }

    /// <summary>
    /// Enumeration for denoting whether an element is a template or an instance.
    /// </summary>
    public enum ModelingKind
    {
        /// <summary>
        /// Software element which specifies the common attributes shared by all instances of
        /// the template.
        /// </summary>
        /// <remarks>
        /// [SOURCE: IEC TR 62390:2005-01, 3.1.25] modified
        /// </remarks>
        [EnumMember(Value = "Template")]
        Template,

        /// <summary>
        /// Concrete, clearly identifiable component of a certain template.
        /// </summary>
        /// <remarks>
        /// <para>
        /// It becomes an individual entity of a template, for example a
        /// device model, by defining specific property values.
        /// </para>
        /// <para>
        /// In an object oriented view, an instance denotes an object of a
        /// template (class).
        /// </para>
        /// <para>
        /// [SOURCE: IEC 62890:2016, 3.1.16 65/617/CDV] modified
        /// </para>
        /// </remarks>
        [EnumMember(Value = "Instance")]
        Instance
    }

    /// <summary>
    /// An element with a kind is an element that can either represent a template or an
    /// instance.
    /// </summary>
    /// <remarks>
    /// Default for an element is that it is representing an instance.
    /// </remarks>
    public interface IHasKind : IClass
    {
        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        public ModelingKind KindOrDefault();
    }

    /// <summary>
    /// Element that can be extended by using data specification templates.
    /// </summary>
    /// <remarks>
    /// A data specification template defines a named set of additional attributes an
    /// element may or shall have. The data specifications used are explicitly specified
    /// with their global ID.
    /// </remarks>
    public interface IHasDataSpecification : IClass
    {
        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }
    }

    /// <summary>
    /// Administrative meta-information for an element like version
    /// information.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-005:
    ///     If <see cref="Aas.AdministrativeInformation.Version" /> is not specified then also <see cref="Aas.AdministrativeInformation.Revision" /> shall be
    ///     unspecified. This means, a revision requires a version. If there is no version
    ///     there is no revision neither. Revision is optional.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class AdministrativeInformation : IHasDataSpecification
    {
        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Version of the element.
        /// </summary>
        public string? Version { get; set; }

        /// <summary>
        /// Revision of the element.
        /// </summary>
        public string? Revision { get; set; }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public AdministrativeInformation(
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            string? version = null,
            string? revision = null)
        {
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            Version = version;
            Revision = revision;
        }
    }

    /// <summary>
    /// The value of a qualifiable element may be further qualified by one or more
    /// qualifiers.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-119:
    ///     If any <see cref="Aas.Qualifier.Kind" /> value of <see cref="Aas.IQualifiable.Qualifiers" /> is
    ///     equal to <see cref="Aas.QualifierKind.TemplateQualifier" /> and the qualified element
    ///     inherits from <see cref="Aas.IHasKind" /> then the qualified element shall be of
    ///     kind Template (<see cref="Aas.IHasKind.Kind" /> = <see cref="Aas.ModelingKind.Template" />).
    ///   </li>
    /// </ul>
    /// </remarks>
    public interface IQualifiable : IClass
    {
        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }
    }

    /// <summary>
    /// Enumeration for kinds of qualifiers.
    /// </summary>
    public enum QualifierKind
    {
        /// <summary>
        /// qualifies the value of the element and can change during run-time.
        /// </summary>
        /// <remarks>
        /// Value qualifiers are only applicable to elements with kind
        /// <see cref="Aas.ModelingKind.Instance" />.
        /// </remarks>
        [EnumMember(Value = "ValueQualifier")]
        ValueQualifier,

        /// <summary>
        /// qualifies the semantic definition the element is referring to
        /// (<see cref="Aas.IHasSemantics.SemanticId" />)
        /// </summary>
        [EnumMember(Value = "ConceptQualifier")]
        ConceptQualifier,

        /// <summary>
        /// qualifies the elements within a specific submodel on concept level.
        /// </summary>
        /// <remarks>
        /// Template qualifiers are only applicable to elements with kind
        /// <see cref="Aas.ModelingKind.Template" />.
        /// </remarks>
        [EnumMember(Value = "TemplateQualifier")]
        TemplateQualifier
    }

    /// <summary>
    /// A qualifier is a type-value-pair that makes additional statements w.r.t. the value
    /// of the element.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-006:
    ///     If both the <see cref="Aas.Qualifier.Value" /> and the <see cref="Aas.Qualifier.ValueId" /> of
    ///     a <see cref="Aas.Qualifier" /> are present then the <see cref="Aas.Qualifier.Value" /> needs
    ///     to be identical to the value of the referenced coded value
    ///     in <see cref="Aas.Qualifier.ValueId" />.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-020:
    ///     The value of <see cref="Aas.Qualifier.Value" /> shall be consistent to the data type as
    ///     defined in <see cref="Aas.Qualifier.ValueType" />.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class Qualifier : IHasSemantics
    {
        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// The qualifier kind describes the kind of the qualifier that is applied to the
        /// element.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.QualifierKind.ConceptQualifier" />
        /// </remarks>
        public QualifierKind? Kind { get; set; }

        /// <summary>
        /// The qualifier <em>type</em> describes the type of the qualifier that is applied to
        /// the element.
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Data type of the qualifier value.
        /// </summary>
        public DataTypeDefXsd ValueType { get; set; }

        /// <summary>
        /// The qualifier value is the value of the qualifier.
        /// </summary>
        public string? Value { get; set; }

        /// <summary>
        /// Reference to the global unique ID of a coded value.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? ValueId { get; set; }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Return the <see cref="Qualifier.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public QualifierKind KindOrDefault()
        {
            return Kind ?? QualifierKind.ConceptQualifier;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (ValueId != null)
            {
                yield return ValueId;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (ValueId != null)
            {
                yield return ValueId;

                // Recurse
                foreach (var anItem in ValueId.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Qualifier(
            string type,
            DataTypeDefXsd valueType,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            QualifierKind? kind = null,
            string? value = null,
            Reference? valueId = null)
        {
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Type = type;
            ValueType = valueType;
            Kind = kind;
            Value = value;
            ValueId = valueId;
        }
    }

    /// <summary>
    /// An asset administration shell.
    /// </summary>
    public class AssetAdministrationShell :
            IIdentifiable,
            IHasDataSpecification
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Administrative information of an identifiable element.
        /// </summary>
        /// <remarks>
        /// Some of the administrative information like the version number might need to
        /// be part of the identification.
        /// </remarks>
        public AdministrativeInformation? Administration { get; set; }

        /// <summary>
        /// The globally unique identification of the element.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// The reference to the AAS the AAS was derived from.
        /// </summary>
        public Reference? DerivedFrom { get; set; }

        /// <summary>
        /// Meta-information about the asset the AAS is representing.
        /// </summary>
        public AssetInformation AssetInformation { get; set; }

        /// <summary>
        /// References to submodels of the AAS.
        /// </summary>
        /// <remarks>
        /// <para>
        /// A submodel is a description of an aspect of the asset the AAS is representing.
        /// </para>
        /// <para>
        /// The asset of an AAS is typically described by one or more submodels.
        /// </para>
        /// <para>
        /// Temporarily no submodel might be assigned to the AAS.
        /// </para>
        /// </remarks>
        public List<Reference>? Submodels { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        [JsonIgnore]
        private DiaryDataDef _diaryData = new DiaryDataDef();

        [JsonIgnore]
        public DiaryDataDef DiaryData { get { return _diaryData; } }
        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over Submodels, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSubmodelsOrEmpty()
        {
            return Submodels
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (Administration != null)
            {
                yield return Administration;
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (DerivedFrom != null)
            {
                yield return DerivedFrom;
            }

            yield return AssetInformation;

            if (Submodels != null)
            {
                foreach (var anItem in Submodels)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Administration != null)
            {
                yield return Administration;

                // Recurse
                foreach (var anItem in Administration.Descend())
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DerivedFrom != null)
            {
                yield return DerivedFrom;

                // Recurse
                foreach (var anItem in DerivedFrom.Descend())
                {
                    yield return anItem;
                }
            }

            yield return AssetInformation;

            // Recurse
            foreach (var anItem in AssetInformation.Descend())
            {
                yield return anItem;
            }

            if (Submodels != null)
            {
                foreach (var anItem in Submodels)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public AssetAdministrationShell(
            string id,
            AssetInformation assetInformation,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            AdministrativeInformation? administration = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            Reference? derivedFrom = null,
            List<Reference>? submodels = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Id = id;
            Administration = administration;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            DerivedFrom = derivedFrom;
            AssetInformation = assetInformation;
            Submodels = submodels;
        }
    }

    /// <summary>
    /// In <see cref="Aas.AssetInformation" /> identifying meta data of the asset that is
    /// represented by an AAS is defined.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The asset may either represent an asset type or an asset instance.
    /// </para>
    /// <para>
    /// The asset has a globally unique identifier plus – if needed – additional domain
    /// specific (proprietary) identifiers. However, to support the corner case of very
    /// first phase of lifecycle where a stabilised/constant_set global asset identifier does
    /// not already exist, the corresponding attribute <see cref="Aas.AssetInformation.GlobalAssetId" /> is optional.
    /// </para>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-116:
    ///     <c>globalAssetId</c> (case-insensitive) is a reserved key. If used as value for
    ///     <see cref="Aas.SpecificAssetId.Name" /> then <see cref="Aas.SpecificAssetId.Value" /> shall be
    ///     identical to <see cref="Aas.AssetInformation.GlobalAssetId" />.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class AssetInformation : IClass
    {
        /// <summary>
        /// Denotes whether the Asset is of kind <see cref="Aas.AssetKind.Type" /> or
        /// <see cref="Aas.AssetKind.Instance" />.
        /// </summary>
        public AssetKind AssetKind { get; set; }

        /// <summary>
        /// Global identifier of the asset the AAS is representing.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This attribute is required as soon as the AAS is exchanged via partners in the life
        /// cycle of the asset. In a first phase of the life cycle the asset might not yet have
        /// a global ID but already an internal identifier. The internal identifier would be
        /// modelled via <see cref="Aas.AssetInformation.SpecificAssetIds" />.
        /// </para>
        /// <para>
        /// This is a global reference.
        /// </para>
        /// </remarks>
        public Reference? GlobalAssetId { get; set; }

        /// <summary>
        /// Additional domain-specific, typically proprietary identifier for the asset like
        /// e.g., serial number etc.
        /// </summary>
        public List<SpecificAssetId>? SpecificAssetIds { get; set; }

        /// <summary>
        /// Thumbnail of the asset represented by the Asset Administration Shell.
        /// </summary>
        /// <remarks>
        /// Used as default.
        /// </remarks>
        public Resource? DefaultThumbnail { get; set; }

        /// <summary>
        /// Iterate over SpecificAssetIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<SpecificAssetId> OverSpecificAssetIdsOrEmpty()
        {
            return SpecificAssetIds
                ?? System.Linq.Enumerable.Empty<SpecificAssetId>();
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (GlobalAssetId != null)
            {
                yield return GlobalAssetId;
            }

            if (SpecificAssetIds != null)
            {
                foreach (var anItem in SpecificAssetIds)
                {
                    yield return anItem;
                }
            }

            if (DefaultThumbnail != null)
            {
                yield return DefaultThumbnail;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (GlobalAssetId != null)
            {
                yield return GlobalAssetId;

                // Recurse
                foreach (var anItem in GlobalAssetId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SpecificAssetIds != null)
            {
                foreach (var anItem in SpecificAssetIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DefaultThumbnail != null)
            {
                yield return DefaultThumbnail;

                // Recurse
                foreach (var anItem in DefaultThumbnail.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public AssetInformation(
            AssetKind assetKind,
            Reference? globalAssetId = null,
            List<SpecificAssetId>? specificAssetIds = null,
            Resource? defaultThumbnail = null)
        {
            AssetKind = assetKind;
            GlobalAssetId = globalAssetId;
            SpecificAssetIds = specificAssetIds;
            DefaultThumbnail = defaultThumbnail;
        }
    }

    /// <summary>
    /// Resource represents an address to a file (a locator). The value is an URI that
    /// can represent an absolute or relative path
    /// </summary>
    public class Resource : IClass
    {
        /// <summary>
        /// Path and name of the resource (with file extension).
        /// </summary>
        /// <remarks>
        /// The path can be absolute or relative.
        /// </remarks>
        public string Path { get; set; }

        /// <summary>
        /// Content type of the content of the file.
        /// </summary>
        /// <remarks>
        /// The content type states which file extensions the file can have.
        /// </remarks>
        public string? ContentType { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            // No descendable properties
            yield break;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            // No descendable properties
            yield break;
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Resource(
            string path,
            string? contentType = null)
        {
            Path = path;
            ContentType = contentType;
        }
    }

    /// <summary>
    /// Enumeration for denoting whether an asset is a type asset or an instance asset.
    /// </summary>
    public enum AssetKind
    {
        /// <summary>
        /// hardware or software element which specifies the common attributes shared by all
        /// instances of the type
        /// </summary>
        /// <remarks>
        /// [SOURCE: IEC TR 62390:2005-01, 3.1.25]
        /// </remarks>
        [EnumMember(Value = "Type")]
        Type,

        /// <summary>
        /// concrete, clearly identifiable component of a certain type
        /// </summary>
        /// <remarks>
        /// <para>
        /// It becomes an individual entity of a type, for example a device, by defining
        /// specific property values.
        /// </para>
        /// <para>
        /// In an object oriented view, an instance denotes an object of a class
        /// (of a type).
        /// </para>
        /// <para>
        /// [SOURCE: IEC 62890:2016, 3.1.16] 65/617/CDV
        /// </para>
        /// </remarks>
        [EnumMember(Value = "Instance")]
        Instance
    }

    /// <summary>
    /// A specific asset ID describes a generic supplementary identifying attribute of the
    /// asset.
    /// </summary>
    /// <remarks>
    /// The specific asset ID is not necessarily globally unique.
    /// </remarks>
    public class SpecificAssetId : IHasSemantics
    {
        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Name of the identifier
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The value of the specific asset identifier with the corresponding name.
        /// </summary>
        public string Value { get; set; }

        /// <summary>
        /// The (external) subject the key belongs to or has meaning to.
        /// </summary>
        /// <remarks>
        /// This is a global reference.
        /// </remarks>
        public Reference ExternalSubjectId { get; set; }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            yield return ExternalSubjectId;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            yield return ExternalSubjectId;

            // Recurse
            foreach (var anItem in ExternalSubjectId.Descend())
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public SpecificAssetId(
            string name,
            string value,
            Reference externalSubjectId,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null)
        {
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Name = name;
            Value = value;
            ExternalSubjectId = externalSubjectId;
        }
    }

    /// <summary>
    /// A submodel defines a specific aspect of the asset represented by the AAS.
    /// </summary>
    /// <remarks>
    /// A submodel is used to structure the digital representation and technical
    /// functionality of an Administration Shell into distinguishable parts. Each submodel
    /// refers to a well-defined domain or subject matter. Submodels can become
    /// standardized and, thus, become submodels templates.
    /// </remarks>
    public class Submodel :
            IIdentifiable,
            IHasKind,
            IHasSemantics,
            IQualifiable,
            IHasDataSpecification
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Administrative information of an identifiable element.
        /// </summary>
        /// <remarks>
        /// Some of the administrative information like the version number might need to
        /// be part of the identification.
        /// </remarks>
        public AdministrativeInformation? Administration { get; set; }

        /// <summary>
        /// The globally unique identification of the element.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// A submodel consists of zero or more submodel elements.
        /// </summary>
        public List<ISubmodelElement>? SubmodelElements { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over SubmodelElements, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<ISubmodelElement> OverSubmodelElementsOrEmpty()
        {
            return SubmodelElements
                ?? System.Linq.Enumerable.Empty<ISubmodelElement>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (Administration != null)
            {
                yield return Administration;
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (SubmodelElements != null)
            {
                foreach (var anItem in SubmodelElements)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Administration != null)
            {
                yield return Administration;

                // Recurse
                foreach (var anItem in Administration.Descend())
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SubmodelElements != null)
            {
                foreach (var anItem in SubmodelElements)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Submodel(
            string id,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            AdministrativeInformation? administration = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            List<ISubmodelElement>? submodelElements = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Id = id;
            Administration = administration;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            SubmodelElements = submodelElements;
        }
    }

    /// <summary>
    /// A submodel element is an element suitable for the description and differentiation of
    /// assets.
    /// </summary>
    /// <remarks>
    /// It is recommended to add a <see cref="Aas.IHasSemantics.SemanticId" /> to a submodel element.
    /// </remarks>
    public interface ISubmodelElement :
            IReferable,
            IHasKind,
            IHasSemantics,
            IQualifiable,
            IHasDataSpecification
    {
        // Intentionally empty.
    }

    /// <summary>
    /// A relationship element is used to define a relationship between two elements
    /// being either referable (model reference) or external (global reference).
    /// </summary>
    public interface IRelationshipElement : ISubmodelElement
    {
        /// <summary>
        /// Reference to the first element in the relationship taking the role of the subject.
        /// </summary>
        public Reference First { get; set; }

        /// <summary>
        /// Reference to the second element in the relationship taking the role of the object.
        /// </summary>
        public Reference Second { get; set; }
    }

    /// <summary>
    /// A relationship element is used to define a relationship between two elements
    /// being either referable (model reference) or external (global reference).
    /// </summary>
    public class RelationshipElement : IRelationshipElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Reference to the first element in the relationship taking the role of the subject.
        /// </summary>
        public Reference First { get; set; }

        /// <summary>
        /// Reference to the second element in the relationship taking the role of the object.
        /// </summary>
        public Reference Second { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            yield return First;

            yield return Second;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            yield return First;

            // Recurse
            foreach (var anItem in First.Descend())
            {
                yield return anItem;
            }

            yield return Second;

            // Recurse
            foreach (var anItem in Second.Descend())
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public RelationshipElement(
            Reference first,
            Reference second,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            First = first;
            Second = second;
        }
    }

    /// <summary>
    /// Enumeration of all possible elements of a <see cref="Aas.SubmodelElementList" />.
    /// </summary>
    public enum AasSubmodelElements
    {
        [EnumMember(Value = "AnnotatedRelationshipElement")]
        AnnotatedRelationshipElement,

        [EnumMember(Value = "BasicEventElement")]
        BasicEventElement,

        [EnumMember(Value = "Blob")]
        Blob,

        [EnumMember(Value = "Capability")]
        Capability,

        [EnumMember(Value = "DataElement")]
        DataElement,

        [EnumMember(Value = "Entity")]
        Entity,

        [EnumMember(Value = "EventElement")]
        EventElement,

        [EnumMember(Value = "File")]
        File,

        [EnumMember(Value = "MultiLanguageProperty")]
        MultiLanguageProperty,

        [EnumMember(Value = "Operation")]
        Operation,

        [EnumMember(Value = "Property")]
        Property,

        [EnumMember(Value = "Range")]
        Range,

        [EnumMember(Value = "ReferenceElement")]
        ReferenceElement,

        [EnumMember(Value = "RelationshipElement")]
        RelationshipElement,

        [EnumMember(Value = "SubmodelElement")]
        SubmodelElement,

        [EnumMember(Value = "SubmodelElementList")]
        SubmodelElementList,

        [EnumMember(Value = "SubmodelElementCollection")]
        SubmodelElementCollection
    }

    /// <summary>
    /// A submodel element list is an ordered list of submodel elements.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The numbering starts with zero (0).
    /// </para>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-107:
    ///     If a first level child element in a <see cref="Aas.SubmodelElementList" /> has
    ///     a <see cref="Aas.IHasSemantics.SemanticId" /> it
    ///     shall be identical to <see cref="Aas.SubmodelElementList.SemanticIdListElement" />.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-114:
    ///     If two first level child elements in a <see cref="Aas.SubmodelElementList" /> have
    ///     a <see cref="Aas.IHasSemantics.SemanticId" /> then they shall be identical.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-115:
    ///     If a first level child element in a <see cref="Aas.SubmodelElementList" /> does not
    ///     specify a <see cref="Aas.IHasSemantics.SemanticId" /> then the value is assumed to be
    ///     identical to <see cref="Aas.SubmodelElementList.SemanticIdListElement" />.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-108:
    ///     All first level child elements in a <see cref="Aas.SubmodelElementList" /> shall have
    ///     the same submodel element type as specified in <see cref="Aas.SubmodelElementList.TypeValueListElement" />.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-109:
    ///     If <see cref="Aas.SubmodelElementList.TypeValueListElement" /> is equal to
    ///     <see cref="Aas.AasSubmodelElements.Property" /> or
    ///     <see cref="Aas.AasSubmodelElements.Range" />
    ///     <see cref="Aas.SubmodelElementList.ValueTypeListElement" /> shall be set and all first
    ///     level child elements in the <see cref="Aas.SubmodelElementList" /> shall have
    ///     the value type as specified in <see cref="Aas.SubmodelElementList.ValueTypeListElement" />.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class SubmodelElementList : ISubmodelElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Defines whether order in list is relevant. If <see cref="Aas.SubmodelElementList.OrderRelevant" /> = <c>False</c>
        /// then the list is representing a set or a bag.
        /// </summary>
        /// <remarks>
        /// Default: <c>True</c>
        /// </remarks>
        public bool? OrderRelevant { get; set; }

        /// <summary>
        /// Submodel element contained in the list.
        /// </summary>
        /// <remarks>
        /// The list is ordered.
        /// </remarks>
        public List<ISubmodelElement>? Value { get; set; }

        /// <summary>
        /// Semantic ID the submodel elements contained in the list match to.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticIdListElement { get; set; }

        /// <summary>
        /// The submodel element type of the submodel elements contained in the list.
        /// </summary>
        public AasSubmodelElements TypeValueListElement { get; set; }

        /// <summary>
        /// The value type of the submodel element contained in the list.
        /// </summary>
        public DataTypeDefXsd? ValueTypeListElement { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over Value, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<ISubmodelElement> OverValueOrEmpty()
        {
            return Value
                ?? System.Linq.Enumerable.Empty<ISubmodelElement>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Return the <see cref="SubmodelElementList.OrderRelevant" /> or the default value
        /// if it has not been set.
        /// </summary>
        public bool OrderRelevantOrDefault()
        {
            return OrderRelevant ?? true;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (Value != null)
            {
                foreach (var anItem in Value)
                {
                    yield return anItem;
                }
            }

            if (SemanticIdListElement != null)
            {
                yield return SemanticIdListElement;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Value != null)
            {
                foreach (var anItem in Value)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticIdListElement != null)
            {
                yield return SemanticIdListElement;

                // Recurse
                foreach (var anItem in SemanticIdListElement.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public SubmodelElementList(
            AasSubmodelElements typeValueListElement,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            bool? orderRelevant = null,
            List<ISubmodelElement>? value = null,
            Reference? semanticIdListElement = null,
            DataTypeDefXsd? valueTypeListElement = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            TypeValueListElement = typeValueListElement;
            OrderRelevant = orderRelevant;
            Value = value;
            SemanticIdListElement = semanticIdListElement;
            ValueTypeListElement = valueTypeListElement;
        }
    }

    /// <summary>
    /// A submodel element collection is a kind of struct, i.e. a a logical encapsulation
    /// of multiple named values. It has a fixed number of submodel elements.
    /// </summary>
    public class SubmodelElementCollection : ISubmodelElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Submodel element contained in the collection.
        /// </summary>
        public List<ISubmodelElement>? Value { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over Value, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<ISubmodelElement> OverValueOrEmpty()
        {
            return Value
                ?? System.Linq.Enumerable.Empty<ISubmodelElement>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (Value != null)
            {
                foreach (var anItem in Value)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Value != null)
            {
                foreach (var anItem in Value)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public SubmodelElementCollection(
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            List<ISubmodelElement>? value = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            Value = value;
        }
    }

    /// <summary>
    /// A data element is a submodel element that is not further composed out of
    /// other submodel elements.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A data element is a submodel element that has a value. The type of value differs
    /// for different subtypes of data elements.
    /// </para>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     <para>
    ///     Constraint AASd-090:
    ///     For data elements <see cref="Aas.IDataElement.Category" /> shall be one of the following
    ///     values: <c>CONSTANT</c>, <c>PARAMETER</c> or <c>VARIABLE</c>.
    ///     </para>
    ///     <para>
    ///     Default: <c>VARIABLE</c>
    ///     </para>
    ///   </li>
    /// </ul>
    /// </remarks>
    public interface IDataElement : ISubmodelElement
    {
        public string CategoryOrDefault();
    }

    /// <summary>
    /// A property is a data element that has a single value.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-007:
    ///     If both, the <see cref="Aas.Property.Value" /> and the <see cref="Aas.Property.ValueId" /> are
    ///     present then the value of <see cref="Aas.Property.Value" /> needs to be identical to
    ///     the value of the referenced coded value in <see cref="Aas.Property.ValueId" />.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class Property : IDataElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Data type of the value
        /// </summary>
        public DataTypeDefXsd ValueType { get; set; }

        /// <summary>
        /// The value of the property instance.
        /// </summary>
        public string? Value { get; set; }

        /// <summary>
        /// Reference to the global unique ID of a coded value.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? ValueId { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Return the <see cref="IReferable.Category" /> or the default value
        /// if it has not been set.
        /// </summary>
        public string CategoryOrDefault()
        {
            string result = Category ?? "VARIABLE";

#if DEBUG
            if (!Constants.ValidCategoriesForDataElement.Contains(
                    result))
            {
                throw new System.InvalidOperationException(
                    $"Unexpected default category: {result}"
                );
            }
#endif

            return result;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (ValueId != null)
            {
                yield return ValueId;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (ValueId != null)
            {
                yield return ValueId;

                // Recurse
                foreach (var anItem in ValueId.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Property(
            DataTypeDefXsd valueType,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            string? value = null,
            Reference? valueId = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            ValueType = valueType;
            Value = value;
            ValueId = valueId;
        }
    }

    /// <summary>
    /// A property is a data element that has a multi-language value.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-012:
    ///     If both the <see cref="Aas.MultiLanguageProperty.Value" /> and the <see cref="Aas.MultiLanguageProperty.ValueId" /> are present then for each
    ///     string in a specific language the meaning must be the same as specified in
    ///     <see cref="Aas.MultiLanguageProperty.ValueId" />.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class MultiLanguageProperty : IDataElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// The value of the property instance.
        /// </summary>
        public List<LangString>? Value { get; set; }

        /// <summary>
        /// Reference to the global unique ID of a coded value.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? ValueId { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over Value, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverValueOrEmpty()
        {
            return Value
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Return the <see cref="IReferable.Category" /> or the default value
        /// if it has not been set.
        /// </summary>
        public string CategoryOrDefault()
        {
            string result = Category ?? "VARIABLE";

#if DEBUG
            if (!Constants.ValidCategoriesForDataElement.Contains(
                    result))
            {
                throw new System.InvalidOperationException(
                    $"Unexpected default category: {result}"
                );
            }
#endif

            return result;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (Value != null)
            {
                foreach (var anItem in Value)
                {
                    yield return anItem;
                }
            }

            if (ValueId != null)
            {
                yield return ValueId;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Value != null)
            {
                foreach (var anItem in Value)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (ValueId != null)
            {
                yield return ValueId;

                // Recurse
                foreach (var anItem in ValueId.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public MultiLanguageProperty(
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            List<LangString>? value = null,
            Reference? valueId = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            Value = value;
            ValueId = valueId;
        }
    }

    /// <summary>
    /// A range data element is a data element that defines a range with min and max.
    /// </summary>
    public class Range : IDataElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Data type of the min und max
        /// </summary>
        public DataTypeDefXsd ValueType { get; set; }

        /// <summary>
        /// The minimum value of the range.
        /// </summary>
        /// <remarks>
        /// If the min value is missing, then the value is assumed to be negative infinite.
        /// </remarks>
        public string? Min { get; set; }

        /// <summary>
        /// The maximum value of the range.
        /// </summary>
        /// <remarks>
        /// If the max value is missing, then the value is assumed to be positive infinite.
        /// </remarks>
        public string? Max { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Return the <see cref="IReferable.Category" /> or the default value
        /// if it has not been set.
        /// </summary>
        public string CategoryOrDefault()
        {
            string result = Category ?? "VARIABLE";

#if DEBUG
            if (!Constants.ValidCategoriesForDataElement.Contains(
                    result))
            {
                throw new System.InvalidOperationException(
                    $"Unexpected default category: {result}"
                );
            }
#endif

            return result;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Range(
            DataTypeDefXsd valueType,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            string? min = null,
            string? max = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            ValueType = valueType;
            Min = min;
            Max = max;
        }
    }

    /// <summary>
    /// A reference element is a data element that defines a logical reference to another
    /// element within the same or another AAS or a reference to an external object or
    /// entity.
    /// </summary>
    public class ReferenceElement : IDataElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Global reference to an external object or entity or a logical reference to
        /// another element within the same or another AAS (i.e. a model reference to
        /// a Referable).
        /// </summary>
        public Reference? Value { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Return the <see cref="IReferable.Category" /> or the default value
        /// if it has not been set.
        /// </summary>
        public string CategoryOrDefault()
        {
            string result = Category ?? "VARIABLE";

#if DEBUG
            if (!Constants.ValidCategoriesForDataElement.Contains(
                    result))
            {
                throw new System.InvalidOperationException(
                    $"Unexpected default category: {result}"
                );
            }
#endif

            return result;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (Value != null)
            {
                yield return Value;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Value != null)
            {
                yield return Value;

                // Recurse
                foreach (var anItem in Value.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public ReferenceElement(
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            Reference? value = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            Value = value;
        }
    }

    /// <summary>
    /// A <see cref="Aas.Blob" /> is a data element that represents a file that is contained with its
    /// source code in the value attribute.
    /// </summary>
    public class Blob : IDataElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// The value of the <see cref="Aas.Blob" /> instance of a blob data element.
        /// </summary>
        /// <remarks>
        /// In contrast to the file property the file content is stored directly as value
        /// in the <see cref="Aas.Blob" /> data element.
        /// </remarks>
        public byte[]? Value { get; set; }

        /// <summary>
        /// Content type of the content of the <see cref="Aas.Blob" />.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The content type (MIME type) states which file extensions the file can have.
        /// </para>
        /// <para>
        /// Valid values are content types like e.g. <c>application/json</c>, <c>application/xls</c>,
        /// <c>image/jpg</c>.
        /// </para>
        /// <para>
        /// The allowed values are defined as in RFC2046.
        /// </para>
        /// </remarks>
        public string ContentType { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Return the <see cref="IReferable.Category" /> or the default value
        /// if it has not been set.
        /// </summary>
        public string CategoryOrDefault()
        {
            string result = Category ?? "VARIABLE";

#if DEBUG
            if (!Constants.ValidCategoriesForDataElement.Contains(
                    result))
            {
                throw new System.InvalidOperationException(
                    $"Unexpected default category: {result}"
                );
            }
#endif

            return result;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Blob(
            string contentType,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            byte[]? value = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            ContentType = contentType;
            Value = value;
        }
    }

    /// <summary>
    /// A File is a data element that represents an address to a file (a locator).
    /// </summary>
    /// <remarks>
    /// The value is an URI that can represent an absolute or relative path.
    /// </remarks>
    public class File : IDataElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Path and name of the referenced file (with file extension).
        /// </summary>
        /// <remarks>
        /// The path can be absolute or relative.
        /// </remarks>
        public string? Value { get; set; }

        /// <summary>
        /// Content type of the content of the file.
        /// </summary>
        /// <remarks>
        /// The content type states which file extensions the file can have.
        /// </remarks>
        public string ContentType { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Return the <see cref="IReferable.Category" /> or the default value
        /// if it has not been set.
        /// </summary>
        public string CategoryOrDefault()
        {
            string result = Category ?? "VARIABLE";

#if DEBUG
            if (!Constants.ValidCategoriesForDataElement.Contains(
                    result))
            {
                throw new System.InvalidOperationException(
                    $"Unexpected default category: {result}"
                );
            }
#endif

            return result;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public File(
            string contentType,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            string? value = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            ContentType = contentType;
            Value = value;
        }
    }

    /// <summary>
    /// An annotated relationship element is a relationship element that can be annotated
    /// with additional data elements.
    /// </summary>
    public class AnnotatedRelationshipElement : IRelationshipElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Reference to the first element in the relationship taking the role of the subject.
        /// </summary>
        public Reference First { get; set; }

        /// <summary>
        /// Reference to the second element in the relationship taking the role of the object.
        /// </summary>
        public Reference Second { get; set; }

        /// <summary>
        /// A data element that represents an annotation that holds for the relationship
        /// between the two elements
        /// </summary>
        public List<IDataElement>? Annotations { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over Annotations, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<IDataElement> OverAnnotationsOrEmpty()
        {
            return Annotations
                ?? System.Linq.Enumerable.Empty<IDataElement>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            yield return First;

            yield return Second;

            if (Annotations != null)
            {
                foreach (var anItem in Annotations)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            yield return First;

            // Recurse
            foreach (var anItem in First.Descend())
            {
                yield return anItem;
            }

            yield return Second;

            // Recurse
            foreach (var anItem in Second.Descend())
            {
                yield return anItem;
            }

            if (Annotations != null)
            {
                foreach (var anItem in Annotations)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public AnnotatedRelationshipElement(
            Reference first,
            Reference second,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            List<IDataElement>? annotations = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            First = first;
            Second = second;
            Annotations = annotations;
        }
    }

    /// <summary>
    /// Enumeration for denoting whether an entity is a self-managed entity or a co-managed
    /// entity.
    /// </summary>
    public enum EntityType
    {
        /// <summary>
        /// For co-managed entities there is no separate AAS. Co-managed entities need to be
        /// part of a self-managed entity.
        /// </summary>
        [EnumMember(Value = "CoManagedEntity")]
        CoManagedEntity,

        /// <summary>
        /// Self-Managed Entities have their own AAS but can be part of the bill of material of
        /// a composite self-managed entity.
        /// </summary>
        /// <remarks>
        /// The asset of an I4.0 Component is a self-managed entity per definition."
        /// </remarks>
        [EnumMember(Value = "SelfManagedEntity")]
        SelfManagedEntity
    }

    /// <summary>
    /// An entity is a submodel element that is used to model entities.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-014:
    ///     Either the attribute <see cref="Aas.Entity.GlobalAssetId" /> or <see cref="Aas.Entity.SpecificAssetId" />
    ///     of an <see cref="Aas.Entity" /> must be set if <see cref="Aas.Entity.EntityType" /> is set to
    ///     <see cref="Aas.EntityType.SelfManagedEntity" />. They are not existing otherwise.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class Entity : ISubmodelElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Describes statements applicable to the entity by a set of submodel elements,
        /// typically with a qualified value.
        /// </summary>
        public List<ISubmodelElement>? Statements { get; set; }

        /// <summary>
        /// Describes whether the entity is a co-managed entity or a self-managed entity.
        /// </summary>
        public EntityType EntityType { get; set; }

        /// <summary>
        /// Global identifier of the asset the entity is representing.
        /// </summary>
        /// <remarks>
        /// This is a global reference.
        /// </remarks>
        public Reference? GlobalAssetId { get; set; }

        /// <summary>
        /// Reference to a specific asset ID representing a supplementary identifier
        /// of the asset represented by the Asset Administration Shell.
        /// </summary>
        public SpecificAssetId? SpecificAssetId { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over Statements, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<ISubmodelElement> OverStatementsOrEmpty()
        {
            return Statements
                ?? System.Linq.Enumerable.Empty<ISubmodelElement>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (Statements != null)
            {
                foreach (var anItem in Statements)
                {
                    yield return anItem;
                }
            }

            if (GlobalAssetId != null)
            {
                yield return GlobalAssetId;
            }

            if (SpecificAssetId != null)
            {
                yield return SpecificAssetId;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Statements != null)
            {
                foreach (var anItem in Statements)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (GlobalAssetId != null)
            {
                yield return GlobalAssetId;

                // Recurse
                foreach (var anItem in GlobalAssetId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SpecificAssetId != null)
            {
                yield return SpecificAssetId;

                // Recurse
                foreach (var anItem in SpecificAssetId.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Entity(
            EntityType entityType,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            List<ISubmodelElement>? statements = null,
            Reference? globalAssetId = null,
            SpecificAssetId? specificAssetId = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            Statements = statements;
            EntityType = entityType;
            GlobalAssetId = globalAssetId;
            SpecificAssetId = specificAssetId;
        }
    }

    /// <summary>
    /// Direction
    /// </summary>
    public enum Direction
    {
        /// <summary>
        /// Input direction.
        /// </summary>
        [EnumMember(Value = "input")]
        Input,

        /// <summary>
        /// Output direction
        /// </summary>
        [EnumMember(Value = "output")]
        Output
    }

    /// <summary>
    /// State of an event
    /// </summary>
    public enum StateOfEvent
    {
        /// <summary>
        /// Event is on
        /// </summary>
        [EnumMember(Value = "on")]
        On,

        /// <summary>
        /// Event is off.
        /// </summary>
        [EnumMember(Value = "off")]
        Off
    }

    /// <summary>
    /// Defines the necessary information of an event instance sent out or received.
    /// </summary>
    public class EventPayload : IClass
    {
        /// <summary>
        /// Reference to the source event element, including identification of
        /// <see cref="Aas.AssetAdministrationShell" />, <see cref="Aas.Submodel" />,
        /// <see cref="Aas.ISubmodelElement" />'s.
        /// </summary>
        public Reference Source { get; set; }

        /// <summary>
        /// <see cref="Aas.IHasSemantics.SemanticId" /> of the source event element, if available
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SourceSemanticId { get; set; }

        /// <summary>
        /// Reference to the referable, which defines the scope of the event.
        /// </summary>
        /// <remarks>
        /// Can be <see cref="Aas.AssetAdministrationShell" />, <see cref="Aas.Submodel" /> or
        /// <see cref="Aas.ISubmodelElement" />.
        /// </remarks>
        public Reference ObservableReference { get; set; }

        /// <summary>
        /// <see cref="Aas.IHasSemantics.SemanticId" /> of the referable which defines the scope of
        /// the event, if available.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? ObservableSemanticId { get; set; }

        /// <summary>
        /// Information for the outer message infrastructure for scheduling the event to
        /// the respective communication channel.
        /// </summary>
        public string? Topic { get; set; }

        /// <summary>
        /// Subject, who/which initiated the creation.
        /// </summary>
        /// <remarks>
        /// This is a global reference.
        /// </remarks>
        public Reference? SubjectId { get; set; }

        /// <summary>
        /// Timestamp in UTC, when this event was triggered.
        /// </summary>
        public string TimeStamp { get; set; }

        /// <summary>
        /// Event specific payload.
        /// </summary>
        public string? Payload { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            yield return Source;

            if (SourceSemanticId != null)
            {
                yield return SourceSemanticId;
            }

            yield return ObservableReference;

            if (ObservableSemanticId != null)
            {
                yield return ObservableSemanticId;
            }

            if (SubjectId != null)
            {
                yield return SubjectId;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            yield return Source;

            // Recurse
            foreach (var anItem in Source.Descend())
            {
                yield return anItem;
            }

            if (SourceSemanticId != null)
            {
                yield return SourceSemanticId;

                // Recurse
                foreach (var anItem in SourceSemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            yield return ObservableReference;

            // Recurse
            foreach (var anItem in ObservableReference.Descend())
            {
                yield return anItem;
            }

            if (ObservableSemanticId != null)
            {
                yield return ObservableSemanticId;

                // Recurse
                foreach (var anItem in ObservableSemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SubjectId != null)
            {
                yield return SubjectId;

                // Recurse
                foreach (var anItem in SubjectId.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public EventPayload(
            Reference source,
            Reference observableReference,
            string timeStamp,
            Reference? sourceSemanticId = null,
            Reference? observableSemanticId = null,
            string? topic = null,
            Reference? subjectId = null,
            string? payload = null)
        {
            Source = source;
            ObservableReference = observableReference;
            TimeStamp = timeStamp;
            SourceSemanticId = sourceSemanticId;
            ObservableSemanticId = observableSemanticId;
            Topic = topic;
            SubjectId = subjectId;
            Payload = payload;
        }
    }

    /// <summary>
    /// An event element.
    /// </summary>
    public interface IEventElement : ISubmodelElement
    {
        // Intentionally empty.
    }

    /// <summary>
    /// A basic event element.
    /// </summary>
    public class BasicEventElement : IEventElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Reference to the <see cref="Aas.IReferable" />, which defines the scope of the event.
        /// Can be <see cref="Aas.AssetAdministrationShell" />, <see cref="Aas.Submodel" />, or
        /// <see cref="Aas.ISubmodelElement" />.
        /// </summary>
        /// <remarks>
        /// Reference to a referable, e.g., a data element or
        /// a submodel, that is being observed.
        /// </remarks>
        public Reference Observed { get; set; }

        /// <summary>
        /// Direction of event.
        /// </summary>
        /// <remarks>
        /// Can be <c>{ Input, Output }</c>.
        /// </remarks>
        public Direction Direction { get; set; }

        /// <summary>
        /// State of event.
        /// </summary>
        /// <remarks>
        /// Can be <c>{ On, Off }</c>.
        /// </remarks>
        public StateOfEvent State { get; set; }

        /// <summary>
        /// Information for the outer message infrastructure for scheduling the event to the
        /// respective communication channel.
        /// </summary>
        public string? MessageTopic { get; set; }

        /// <summary>
        /// Information, which outer message infrastructure shall handle messages for
        /// the <see cref="Aas.IEventElement" />. Refers to a <see cref="Aas.Submodel" />,
        /// <see cref="Aas.SubmodelElementList" />, <see cref="Aas.SubmodelElementCollection" /> or
        /// <see cref="Aas.Entity" />, which contains <see cref="Aas.IDataElement" />'s describing
        /// the proprietary specification for the message broker.
        /// </summary>
        /// <remarks>
        /// For different message infrastructure, e.g., OPC UA or MQTT or AMQP, this
        /// proprietary specification could be standardized by having respective Submodels.
        /// </remarks>
        public Reference? MessageBroker { get; set; }

        /// <summary>
        /// Timestamp in UTC, when the last event was received (input direction) or sent
        /// (output direction).
        /// </summary>
        public string? LastUpdate { get; set; }

        /// <summary>
        /// For input direction, reports on the maximum frequency, the software entity behind
        /// the respective Referable can handle input events.
        /// </summary>
        /// <remarks>
        /// <para>
        /// For output events, specifies the maximum frequency of outputting this event to
        /// an outer infrastructure.
        /// </para>
        /// <para>
        /// Might be not specified, that is, there is no minimum interval.
        /// </para>
        /// </remarks>
        public string? MinInterval { get; set; }

        /// <summary>
        /// For input direction: not applicable.
        /// </summary>
        /// <remarks>
        /// <para>
        /// For output direction: maximum interval in time, the respective Referable shall send
        /// an update of the status of the event, even if no other trigger condition for
        /// the event was not met.
        /// </para>
        /// <para>
        /// Might be not specified, that is, there is no maximum interval
        /// </para>
        /// </remarks>
        public string? MaxInterval { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            yield return Observed;

            if (MessageBroker != null)
            {
                yield return MessageBroker;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            yield return Observed;

            // Recurse
            foreach (var anItem in Observed.Descend())
            {
                yield return anItem;
            }

            if (MessageBroker != null)
            {
                yield return MessageBroker;

                // Recurse
                foreach (var anItem in MessageBroker.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public BasicEventElement(
            Reference observed,
            Direction direction,
            StateOfEvent state,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            string? messageTopic = null,
            Reference? messageBroker = null,
            string? lastUpdate = null,
            string? minInterval = null,
            string? maxInterval = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            Observed = observed;
            Direction = direction;
            State = state;
            MessageTopic = messageTopic;
            MessageBroker = messageBroker;
            LastUpdate = lastUpdate;
            MinInterval = minInterval;
            MaxInterval = maxInterval;
        }
    }

    /// <summary>
    /// An operation is a submodel element with input and output variables.
    /// </summary>
    public class Operation : ISubmodelElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Input parameter of the operation.
        /// </summary>
        public List<OperationVariable>? InputVariables { get; set; }

        /// <summary>
        /// Output parameter of the operation.
        /// </summary>
        public List<OperationVariable>? OutputVariables { get; set; }

        /// <summary>
        /// Parameter that is input and output of the operation.
        /// </summary>
        public List<OperationVariable>? InoutputVariables { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over InputVariables, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<OperationVariable> OverInputVariablesOrEmpty()
        {
            return InputVariables
                ?? System.Linq.Enumerable.Empty<OperationVariable>();
        }

        /// <summary>
        /// Iterate over OutputVariables, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<OperationVariable> OverOutputVariablesOrEmpty()
        {
            return OutputVariables
                ?? System.Linq.Enumerable.Empty<OperationVariable>();
        }

        /// <summary>
        /// Iterate over InoutputVariables, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<OperationVariable> OverInoutputVariablesOrEmpty()
        {
            return InoutputVariables
                ?? System.Linq.Enumerable.Empty<OperationVariable>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (InputVariables != null)
            {
                foreach (var anItem in InputVariables)
                {
                    yield return anItem;
                }
            }

            if (OutputVariables != null)
            {
                foreach (var anItem in OutputVariables)
                {
                    yield return anItem;
                }
            }

            if (InoutputVariables != null)
            {
                foreach (var anItem in InoutputVariables)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (InputVariables != null)
            {
                foreach (var anItem in InputVariables)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (OutputVariables != null)
            {
                foreach (var anItem in OutputVariables)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (InoutputVariables != null)
            {
                foreach (var anItem in InoutputVariables)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Operation(
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            List<OperationVariable>? inputVariables = null,
            List<OperationVariable>? outputVariables = null,
            List<OperationVariable>? inoutputVariables = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            InputVariables = inputVariables;
            OutputVariables = outputVariables;
            InoutputVariables = inoutputVariables;
        }
    }

    /// <summary>
    /// The value of an operation variable is a submodel element that is used as input
    /// and/or output variable of an operation.
    /// </summary>
    public class OperationVariable : IClass
    {
        /// <summary>
        /// Describes an argument or result of an operation via a submodel element
        /// </summary>
        public ISubmodelElement Value { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            yield return Value;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            yield return Value;

            // Recurse
            foreach (var anItem in Value.Descend())
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public OperationVariable(ISubmodelElement value)
        {
            Value = value;
        }
    }

    /// <summary>
    /// A capability is the implementation-independent description of the potential of an
    /// asset to achieve a certain effect in the physical or virtual world.
    /// </summary>
    /// <remarks>
    /// The <see cref="Aas.Capability.SemanticId" /> of a capability is typically an ontology.
    /// Thus, reasoning on capabilities is enabled.
    /// </remarks>
    public class Capability : ISubmodelElement
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Kind of the element: either type or instance.
        /// </summary>
        /// <remarks>
        /// Default: <see cref="Aas.ModelingKind.Instance" />
        /// </remarks>
        public ModelingKind? Kind { get; set; }

        /// <summary>
        /// Identifier of the semantic definition of the element. It is called semantic ID
        /// of the element or also main semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference? SemanticId { get; set; }

        /// <summary>
        /// Identifier of a supplemental semantic definition of the element.
        /// It is called supplemental semantic ID of the element.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public List<Reference>? SupplementalSemanticIds { get; set; }

        /// <summary>
        /// Additional qualification of a qualifiable element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASd-021:
        ///     Every qualifiable can only have one qualifier with the same
        ///     <see cref="Aas.Qualifier.Type" />.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<Qualifier>? Qualifiers { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over SupplementalSemanticIds, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverSupplementalSemanticIdsOrEmpty()
        {
            return SupplementalSemanticIds
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Iterate over Qualifiers, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Qualifier> OverQualifiersOrEmpty()
        {
            return Qualifiers
                ?? System.Linq.Enumerable.Empty<Qualifier>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Return the <see cref="IHasKind.Kind" /> or the default value
        /// if it has not been set.
        /// </summary>
        public ModelingKind KindOrDefault()
        {
            return Kind ?? ModelingKind.Instance;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (SemanticId != null)
            {
                yield return SemanticId;

                // Recurse
                foreach (var anItem in SemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            if (SupplementalSemanticIds != null)
            {
                foreach (var anItem in SupplementalSemanticIds)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Qualifiers != null)
            {
                foreach (var anItem in Qualifiers)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Capability(
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            ModelingKind? kind = null,
            Reference? semanticId = null,
            List<Reference>? supplementalSemanticIds = null,
            List<Qualifier>? qualifiers = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Kind = kind;
            SemanticId = semanticId;
            SupplementalSemanticIds = supplementalSemanticIds;
            Qualifiers = qualifiers;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
        }
    }

    /// <summary>
    /// The semantics of a property or other elements that may have a semantic description
    /// is defined by a concept description.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The description of the concept should follow a standardized schema (realized as
    /// data specification template).
    /// </para>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     <para>
    ///     Constraint AASd-051:
    ///     A <see cref="Aas.ConceptDescription" /> shall have one of the following categories
    ///     <c>VALUE</c>, <c>PROPERTY</c>, <c>REFERENCE</c>, <c>DOCUMENT</c>, <c>CAPABILITY</c>,
    ///     <c>RELATIONSHIP</c>, <c>COLLECTION</c>, <c>FUNCTION</c>, <c>EVENT</c>, <c>ENTITY</c>,
    ///     <c>APPLICATION_CLASS</c>, <c>QUALIFIER</c>, <c>VIEW</c>.
    ///     </para>
    ///     <para>
    ///     Default: <c>PROPERTY</c>.
    ///     </para>
    ///   </li>
    ///   <li>
    ///     Constraint AASc-004:
    ///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.Category" /> <c>PROPERTY</c> or
    ///     <c>VALUE</c> using data specification IEC61360,
    ///     the <see cref="Aas.DataSpecificationIec61360.DataType" /> is mandatory and shall be
    ///     one of: <c>DATE</c>, <c>STRING</c>, <c>STRING_TRANSLATABLE</c>, <c>INTEGER_MEASURE</c>,
    ///     <c>INTEGER_COUNT</c>, <c>INTEGER_CURRENCY</c>, <c>REAL_MEASURE</c>, <c>REAL_COUNT</c>,
    ///     <c>REAL_CURRENCY</c>, <c>BOOLEAN</c>, <c>RATIONAL</c>, <c>RATIONAL_MEASURE</c>,
    ///     <c>TIME</c>, <c>TIMESTAMP</c>.
    ///   </li>
    ///   <li>
    ///     Constraint AASc-005:
    ///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.Category" /> <c>REFERENCE</c>
    ///     using data specification IEC61360,
    ///     the <see cref="Aas.DataSpecificationIec61360.DataType" /> is mandatory and shall be
    ///     one of: <c>STRING</c>, <c>IRI</c>, <c>IRDI</c>.
    ///   </li>
    ///   <li>
    ///     Constraint AASc-006:
    ///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.Category" /> <c>DOCUMENT</c>
    ///     using data specification IEC61360,
    ///     the <see cref="Aas.DataSpecificationIec61360.DataType" /> is mandatory and shall be
    ///     defined.
    ///   </li>
    ///   <li>
    ///     Constraint AASc-007:
    ///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.Category" /> <c>QUALIFIER_TYPE</c>
    ///     using data specification IEC61360,
    ///     the <see cref="Aas.DataSpecificationIec61360.DataType" /> is mandatory and shall be
    ///   </li>
    ///   <li>
    ///     Constraint AASc-008:
    ///     For all <see cref="Aas.ConceptDescription" />'s with a category except
    ///     <see cref="Aas.ConceptDescription.Category" /> <c>VALUE</c> using data specification IEC61360,
    ///     <see cref="Aas.DataSpecificationIec61360.Definition" /> is mandatory and shall be
    ///     defined at least in English.
    ///   </li>
    ///   <li>
    ///     Constraint AASc-003:
    ///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.Category" /> <c>VALUE</c>
    ///     using data specification IEC61360,
    ///     the <see cref="Aas.DataSpecificationIec61360.Value" /> shall be set.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class ConceptDescription :
            IIdentifiable,
            IHasDataSpecification
    {
        /// <summary>
        /// An extension of the element.
        /// </summary>
        public List<Extension>? Extensions { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        /// <remarks>
        /// The category is not identical to the semantic definition
        /// (<see cref="Aas.IHasSemantics" />) of an element. The category e.g. could denote that
        /// the element is a measurement value whereas the semantic definition of
        /// the element would denote that it is the measured temperature.
        /// </remarks>
        public string? Category { get; set; }

        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this ID is an identifying string of the element within
        /// its name space.
        /// </summary>
        /// <remarks>
        /// In case the element is a property and the property has a semantic definition
        /// (<see cref="Aas.IHasSemantics.SemanticId" />) conformant to IEC61360
        /// the <see cref="Aas.IReferable.IdShort" /> is typically identical to the short name in English.
        /// </remarks>
        public string? IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:
        /// </para>
        /// <ul>
        ///   <li>
        ///     the preferred name in the requested language of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     If there is a default language list defined in the application,
        ///     then the corresponding preferred name in the language is chosen
        ///     according to this order.
        ///   </li>
        ///   <li>
        ///     the English preferred name of the concept description defining
        ///     the semantics of the element
        ///   </li>
        ///   <li>
        ///     the short name of the concept description
        ///   </li>
        ///   <li>
        ///     the <see cref="Aas.IReferable.IdShort" /> of the element
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString>? DisplayName { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The description can be provided in several languages.
        /// </para>
        /// <para>
        /// If no description is defined, then the definition of the concept
        /// description that defines the semantics of the element is used.
        /// </para>
        /// <para>
        /// Additional information can be provided, e.g., if the element is
        /// qualified and which qualifier types can be expected in which
        /// context or which additional data specification templates are
        /// provided.
        /// </para>
        /// </remarks>
        public List<LangString>? Description { get; set; }

        /// <summary>
        /// Checksum to be used to determine if an Referable (including its
        /// aggregated child elements) has changed.
        /// </summary>
        /// <remarks>
        /// The checksum is calculated by the user's tool environment.
        /// The checksum has no semantic meaning for an asset administration
        /// shell model and there is no requirement for asset administration
        /// shell tools to manage the checksum
        /// </remarks>
        public string? Checksum { get; set; }

        /// <summary>
        /// Administrative information of an identifiable element.
        /// </summary>
        /// <remarks>
        /// Some of the administrative information like the version number might need to
        /// be part of the identification.
        /// </remarks>
        public AdministrativeInformation? Administration { get; set; }

        /// <summary>
        /// The globally unique identification of the element.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// Embedded data specification.
        /// </summary>
        public List<EmbeddedDataSpecification>? EmbeddedDataSpecifications { get; set; }

        /// <summary>
        /// Reference to an external definition the concept is compatible to or was derived
        /// from.
        /// </summary>
        /// <remarks>
        /// <para>
        /// It is recommended to use a global reference.
        /// </para>
        /// <para>
        /// Compare to is-case-of relationship in ISO 13584-32 &amp; IEC EN 61360"
        /// </para>
        /// </remarks>
        public List<Reference>? IsCaseOf { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over Extensions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Extension> OverExtensionsOrEmpty()
        {
            return Extensions
                ?? System.Linq.Enumerable.Empty<Extension>();
        }

        /// <summary>
        /// Iterate over DisplayName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDisplayNameOrEmpty()
        {
            return DisplayName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Description, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDescriptionOrEmpty()
        {
            return Description
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over EmbeddedDataSpecifications, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<EmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
        {
            return EmbeddedDataSpecifications
                ?? System.Linq.Enumerable.Empty<EmbeddedDataSpecification>();
        }

        /// <summary>
        /// Iterate over IsCaseOf, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Reference> OverIsCaseOfOrEmpty()
        {
            return IsCaseOf
                ?? System.Linq.Enumerable.Empty<Reference>();
        }

        /// <summary>
        /// Return the <see cref="ConceptDescription.Category" /> or the default value
        /// if it has not been set.
        /// </summary>
        public string CategoryOrDefault()
        {
            string result = Category ?? "PROPERTY";

#if DEBUG
            if (!Constants.ValidCategoriesForConceptDescription.Contains(
                    result))
            {
                throw new System.InvalidOperationException(
                    $"Unexpected default category: {result}"
                );
            }
#endif

            return result;
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;
                }
            }

            if (Administration != null)
            {
                yield return Administration;
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;
                }
            }

            if (IsCaseOf != null)
            {
                foreach (var anItem in IsCaseOf)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (Extensions != null)
            {
                foreach (var anItem in Extensions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (DisplayName != null)
            {
                foreach (var anItem in DisplayName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Description != null)
            {
                foreach (var anItem in Description)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Administration != null)
            {
                yield return Administration;

                // Recurse
                foreach (var anItem in Administration.Descend())
                {
                    yield return anItem;
                }
            }

            if (EmbeddedDataSpecifications != null)
            {
                foreach (var anItem in EmbeddedDataSpecifications)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (IsCaseOf != null)
            {
                foreach (var anItem in IsCaseOf)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public ConceptDescription(
            string id,
            List<Extension>? extensions = null,
            string? category = null,
            string? idShort = null,
            List<LangString>? displayName = null,
            List<LangString>? description = null,
            string? checksum = null,
            AdministrativeInformation? administration = null,
            List<EmbeddedDataSpecification>? embeddedDataSpecifications = null,
            List<Reference>? isCaseOf = null)
        {
            Extensions = extensions;
            IdShort = idShort;
            DisplayName = displayName;
            Category = category;
            Description = description;
            Checksum = checksum;
            Id = id;
            Administration = administration;
            EmbeddedDataSpecifications = embeddedDataSpecifications;
            IsCaseOf = isCaseOf;
        }
    }

    /// <summary>
    /// ReferenceTypes
    /// </summary>
    public enum ReferenceTypes
    {
        /// <summary>
        /// GlobalReference.
        /// </summary>
        [EnumMember(Value = "GlobalReference")]
        GlobalReference,

        /// <summary>
        /// ModelReference
        /// </summary>
        [EnumMember(Value = "ModelReference")]
        ModelReference
    }

    /// <summary>
    /// Reference to either a model element of the same or another AAS or to an external
    /// entity.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A reference is an ordered list of keys.
    /// </para>
    /// <para>
    /// A model reference is an ordered list of keys, each key referencing an element. The
    /// complete list of keys may for example be concatenated to a path that then gives
    /// unique access to an element.
    /// </para>
    /// <para>
    /// A global reference is a reference to an external entity.
    /// </para>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASd-121:
    ///     For <see cref="Aas.Reference" />'s the <see cref="Aas.Key.Type" /> of the first key of
    ///     <see cref="Aas.Reference.Keys" /> shall be one of <see cref="Aas.Constants.GloballyIdentifiables" />.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-122:
    ///     For global references, i.e. <see cref="Aas.Reference" />'s with
    ///     <see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.GlobalReference" />, the type
    ///     of the first key of <see cref="Aas.Reference.Keys" /> shall be one of
    ///     <see cref="Aas.Constants.GenericGloballyIdentifiables" />.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-123:
    ///     For model references, i.e. <see cref="Aas.Reference" />'s with
    ///     <see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.ModelReference" />, the type
    ///     of the first key of <see cref="Aas.Reference.Keys" /> shall be one of
    ///     <see cref="Aas.Constants.AasIdentifiables" />.
    ///   </li>
    ///   <li>
    ///     Constraint AASd-124:
    ///     For global references, i.e. <see cref="Aas.Reference" />'s with
    ///     <see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.GlobalReference" />, the last
    ///     key of <see cref="Aas.Reference.Keys" /> shall be either one of
    ///     <see cref="Aas.Constants.GenericGloballyIdentifiables" /> or one of
    ///     <see cref="Aas.Constants.GenericFragmentKeys" />.
    ///   </li>
    ///   <li>
    ///     <para>
    ///     Constraint AASd-125:
    ///     For model references, i.e. <see cref="Aas.Reference" />'s with
    ///     <see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.ModelReference" />, with more
    ///     than one key in <see cref="Aas.Reference.Keys" /> the type of the keys following the first
    ///     key of <see cref="Aas.Reference.Keys" /> shall be one of <see cref="Aas.Constants.FragmentKeys" />.
    ///     </para>
    ///     <para>
    ///     Constraint AASd-125 ensures that the shortest path is used.
    ///     </para>
    ///   </li>
    ///   <li>
    ///     Constraint AASd-126:
    ///     For model references, i.e. <see cref="Aas.Reference" />'s with
    ///     <see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.ModelReference" />, with more
    ///     than one key in <see cref="Aas.Reference.Keys" /> the type of the last key in the
    ///     reference key chain may be one of <see cref="Aas.Constants.GenericFragmentKeys" /> or no key
    ///     at all shall have a value out of <see cref="Aas.Constants.GenericFragmentKeys" />.
    ///   </li>
    ///   <li>
    ///     <para>
    ///     Constraint AASd-127:
    ///     For model references, i.e. <see cref="Aas.Reference" />'s with
    ///     <see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.ModelReference" />, with more
    ///     than one key in <see cref="Aas.Reference.Keys" /> a key with <see cref="Aas.Key.Type" />
    ///     <see cref="Aas.KeyTypes.FragmentReference" /> shall be preceded by a key with
    ///     <see cref="Aas.Key.Type" /> <see cref="Aas.KeyTypes.File" /> or <see cref="Aas.KeyTypes.Blob" />. All other
    ///     AAS fragments, i.e. type values out of <see cref="Aas.Constants.AasSubmodelElementsAsKeys" />,
    ///     do not support fragments.
    ///     </para>
    ///     <para>
    ///     Which kind of fragments are supported depends on the content type and the
    ///     specification of allowed fragment identifiers for the corresponding resource
    ///     being referenced via the reference.
    ///     </para>
    ///   </li>
    ///   <li>
    ///     Constraint AASd-128:
    ///     For model references, i.e. <see cref="Aas.Reference" />'s with
    ///     <see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.ModelReference" />, the
    ///     <see cref="Aas.Key.Value" /> of a <see cref="Aas.Key" /> preceded by a <see cref="Aas.Key" /> with
    ///     <see cref="Aas.Key.Type" /> = <see cref="Aas.KeyTypes.SubmodelElementList" /> is an integer
    ///     number denoting the position in the array of the submodel element list.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class Reference : IClass
    {
        /// <summary>
        /// Type of the reference.
        /// </summary>
        /// <remarks>
        /// Denotes, whether reference is a global reference or a model reference.
        /// </remarks>
        public ReferenceTypes Type { get; set; }

        /// <summary>
        /// <see cref="Aas.IHasSemantics.SemanticId" /> of the referenced model element
        /// (<see cref="Aas.Reference.Type" /> = <see cref="Aas.ReferenceTypes.ModelReference" />).
        /// </summary>
        /// <remarks>
        /// <para>
        /// For global references there typically is no semantic ID.
        /// </para>
        /// <para>
        /// It is recommended to use a global reference.
        /// </para>
        /// </remarks>
        public Reference? ReferredSemanticId { get; set; }

        /// <summary>
        /// Unique references in their name space.
        /// </summary>
        public List<Key> Keys { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (ReferredSemanticId != null)
            {
                yield return ReferredSemanticId;
            }

            foreach (var anItem in Keys)
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (ReferredSemanticId != null)
            {
                yield return ReferredSemanticId;

                // Recurse
                foreach (var anItem in ReferredSemanticId.Descend())
                {
                    yield return anItem;
                }
            }

            foreach (var anItem in Keys)
            {
                yield return anItem;

                // Recurse
                foreach (var anotherItem in anItem.Descend())
                {
                    yield return anotherItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Reference(
            ReferenceTypes type,
            List<Key> keys,
            Reference? referredSemanticId = null)
        {
            Type = type;
            Keys = keys;
            ReferredSemanticId = referredSemanticId;
        }
    }

    /// <summary>
    /// A key is a reference to an element by its ID.
    /// </summary>
    public class Key : IClass
    {
        /// <summary>
        /// Denotes which kind of entity is referenced.
        /// </summary>
        /// <remarks>
        /// <para>
        /// In case <see cref="Aas.Key.Type" /> = <see cref="Aas.KeyTypes.FragmentReference" /> the key represents
        /// a bookmark or a similar local identifier within its parent element as specified
        /// by the key that precedes this key.
        /// </para>
        /// <para>
        /// In all other cases the key references a model element of the same or of another AAS.
        /// The name of the model element is explicitly listed.
        /// </para>
        /// </remarks>
        public KeyTypes Type { get; set; }

        /// <summary>
        /// The key value, for example an IRDI or an URI
        /// </summary>
        public string Value { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            // No descendable properties
            yield break;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            // No descendable properties
            yield break;
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Key(
            KeyTypes type,
            string value)
        {
            Type = type;
            Value = value;
        }
    }

    /// <summary>
    /// Enumeration of different key value types within a key.
    /// </summary>
    public enum KeyTypes
    {
        /// <summary>
        /// Bookmark or a similar local identifier of a subordinate part of
        /// a primary resource
        /// </summary>
        [EnumMember(Value = "FragmentReference")]
        FragmentReference,

        [EnumMember(Value = "GlobalReference")]
        GlobalReference,

        [EnumMember(Value = "AnnotatedRelationshipElement")]
        AnnotatedRelationshipElement,

        [EnumMember(Value = "AssetAdministrationShell")]
        AssetAdministrationShell,

        [EnumMember(Value = "BasicEventElement")]
        BasicEventElement,

        [EnumMember(Value = "Blob")]
        Blob,

        [EnumMember(Value = "Capability")]
        Capability,

        [EnumMember(Value = "ConceptDescription")]
        ConceptDescription,

        /// <summary>
        /// Identifiable.
        /// </summary>
        /// <remarks>
        /// Identifiable is abstract, i.e. if a key uses “Identifiable” the reference
        /// may be an Asset Administration Shell, a Submodel or a Concept Description.
        /// </remarks>
        [EnumMember(Value = "Identifiable")]
        Identifiable,

        /// <summary>
        /// Data element.
        /// </summary>
        /// <remarks>
        /// Data Element is abstract, <em>i.e.</em> if a key uses <see cref="Aas.KeyTypes.DataElement" />
        /// the reference may be a Property, a File etc.
        /// </remarks>
        [EnumMember(Value = "DataElement")]
        DataElement,

        [EnumMember(Value = "Entity")]
        Entity,

        /// <summary>
        /// Event.
        /// </summary>
        /// <remarks>
        /// <see cref="Aas.IEventElement" /> is abstract.
        /// </remarks>
        [EnumMember(Value = "EventElement")]
        EventElement,

        [EnumMember(Value = "File")]
        File,

        /// <summary>
        /// Property with a value that can be provided in multiple languages
        /// </summary>
        [EnumMember(Value = "MultiLanguageProperty")]
        MultiLanguageProperty,

        [EnumMember(Value = "Operation")]
        Operation,

        [EnumMember(Value = "Property")]
        Property,

        /// <summary>
        /// Range with min and max
        /// </summary>
        [EnumMember(Value = "Range")]
        Range,

        /// <summary>
        /// Reference
        /// </summary>
        [EnumMember(Value = "ReferenceElement")]
        ReferenceElement,

        [EnumMember(Value = "Referable")]
        Referable,

        /// <summary>
        /// Relationship
        /// </summary>
        [EnumMember(Value = "RelationshipElement")]
        RelationshipElement,

        [EnumMember(Value = "Submodel")]
        Submodel,

        /// <summary>
        /// Submodel Element
        /// </summary>
        /// <remarks>
        /// Submodel Element is abstract, <em>i.e.</em> if a key uses <see cref="Aas.KeyTypes.SubmodelElement" />
        /// the reference may be a <see cref="Aas.Property" />, an <see cref="Aas.Operation" /> etc.
        /// </remarks>
        [EnumMember(Value = "SubmodelElement")]
        SubmodelElement,

        /// <summary>
        /// List of Submodel Elements
        /// </summary>
        [EnumMember(Value = "SubmodelElementList")]
        SubmodelElementList,

        /// <summary>
        /// Struct of Submodel Elements
        /// </summary>
        [EnumMember(Value = "SubmodelElementCollection")]
        SubmodelElementCollection
    }

    /// <summary>
    /// Enumeration listing all xsd anySimpleTypes
    /// </summary>
    public enum DataTypeDefXsd
    {
        [EnumMember(Value = "xs:anyURI")]
        AnyUri,

        [EnumMember(Value = "xs:base64Binary")]
        Base64Binary,

        [EnumMember(Value = "xs:boolean")]
        Boolean,

        [EnumMember(Value = "xs:date")]
        Date,

        [EnumMember(Value = "xs:dateTime")]
        DateTime,

        [EnumMember(Value = "xs:dateTimeStamp")]
        DateTimeStamp,

        [EnumMember(Value = "xs:decimal")]
        Decimal,

        [EnumMember(Value = "xs:double")]
        Double,

        [EnumMember(Value = "xs:duration")]
        Duration,

        [EnumMember(Value = "xs:float")]
        Float,

        [EnumMember(Value = "xs:gDay")]
        GDay,

        [EnumMember(Value = "xs:gMonth")]
        GMonth,

        [EnumMember(Value = "xs:gMonthDay")]
        GMonthDay,

        [EnumMember(Value = "xs:gYear")]
        GYear,

        [EnumMember(Value = "xs:gYearMonth")]
        GYearMonth,

        [EnumMember(Value = "xs:hexBinary")]
        HexBinary,

        [EnumMember(Value = "xs:string")]
        String,

        [EnumMember(Value = "xs:time")]
        Time,

        [EnumMember(Value = "xs:dayTimeDuration")]
        DayTimeDuration,

        [EnumMember(Value = "xs:yearMonthDuration")]
        YearMonthDuration,

        [EnumMember(Value = "xs:integer")]
        Integer,

        [EnumMember(Value = "xs:long")]
        Long,

        [EnumMember(Value = "xs:int")]
        Int,

        [EnumMember(Value = "xs:short")]
        Short,

        [EnumMember(Value = "xs:byte")]
        Byte,

        [EnumMember(Value = "xs:nonNegativeInteger")]
        NonNegativeInteger,

        [EnumMember(Value = "xs:positiveInteger")]
        PositiveInteger,

        [EnumMember(Value = "xs:unsignedLong")]
        UnsignedLong,

        [EnumMember(Value = "xs:unsignedInt")]
        UnsignedInt,

        [EnumMember(Value = "xs:unsignedShort")]
        UnsignedShort,

        [EnumMember(Value = "xs:unsignedByte")]
        UnsignedByte,

        [EnumMember(Value = "xs:nonPositiveInteger")]
        NonPositiveInteger,

        [EnumMember(Value = "xs:negativeInteger")]
        NegativeInteger
    }

    /// <summary>
    /// Strings with language tags
    /// </summary>
    public class LangString : IClass
    {
        /// <summary>
        /// Language tag conforming to BCP 47
        /// </summary>
        public string Language { get; set; }

        /// <summary>
        /// Text in the <see cref="Aas.LangString.Language" />
        /// </summary>
        public string Text { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            // No descendable properties
            yield break;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            // No descendable properties
            yield break;
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public LangString(
            string language,
            string text)
        {
            Language = language;
            Text = text;
        }
    }

    /// <summary>
    /// Container for the sets of different identifiables.
    /// </summary>
    /// <remarks>
    /// w.r.t. file exchange: There is exactly one environment independent on how many
    /// files the contained elements are split. If the file is split then there
    /// shall be no element with the same identifier in two different files.
    /// </remarks>
    public class Environment : IClass, IDiaryData
    {
        /// <summary>
        /// Asset administration shell
        /// </summary>
        public List<AssetAdministrationShell>? AssetAdministrationShells { get; set; }

        /// <summary>
        /// Submodel
        /// </summary>
        public List<Submodel>? Submodels { get; set; }

        /// <summary>
        /// Concept description
        /// </summary>
        public List<ConceptDescription>? ConceptDescriptions { get; set; }

        #region Parent and Timestamp
        [JsonIgnore]
        public IClass Parent { get; set; }
        [JsonIgnore]
        public DateTime TimeStampCreate { get; set; }
        [JsonIgnore]
        public DateTime TimeStamp { get; set; }

        public DiaryDataDef DiaryData { get; set; }

        #endregion

        /// <summary>
        /// Iterate over AssetAdministrationShells, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<AssetAdministrationShell> OverAssetAdministrationShellsOrEmpty()
        {
            return AssetAdministrationShells
                ?? System.Linq.Enumerable.Empty<AssetAdministrationShell>();
        }

        /// <summary>
        /// Iterate over Submodels, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<Submodel> OverSubmodelsOrEmpty()
        {
            return Submodels
                ?? System.Linq.Enumerable.Empty<Submodel>();
        }

        /// <summary>
        /// Iterate over ConceptDescriptions, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<ConceptDescription> OverConceptDescriptionsOrEmpty()
        {
            return ConceptDescriptions
                ?? System.Linq.Enumerable.Empty<ConceptDescription>();
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            if (AssetAdministrationShells != null)
            {
                foreach (var anItem in AssetAdministrationShells)
                {
                    yield return anItem;
                }
            }

            if (Submodels != null)
            {
                foreach (var anItem in Submodels)
                {
                    yield return anItem;
                }
            }

            if (ConceptDescriptions != null)
            {
                foreach (var anItem in ConceptDescriptions)
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            if (AssetAdministrationShells != null)
            {
                foreach (var anItem in AssetAdministrationShells)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (Submodels != null)
            {
                foreach (var anItem in Submodels)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (ConceptDescriptions != null)
            {
                foreach (var anItem in ConceptDescriptions)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public Environment(
            List<AssetAdministrationShell>? assetAdministrationShells = null,
            List<Submodel>? submodels = null,
            List<ConceptDescription>? conceptDescriptions = null)
        {
            AssetAdministrationShells = assetAdministrationShells;
            Submodels = submodels;
            ConceptDescriptions = conceptDescriptions;
        }
    }

    /// <summary>
    /// Data specification content is part of a data specification template and defines
    /// which additional attributes shall be added to the element instance that references
    /// the data specification template and meta information about the template itself.
    /// </summary>
    public interface IDataSpecificationContent : IClass
    {
        // Intentionally empty.
    }

    /// <summary>
    /// Embed the content of a data specification.
    /// </summary>
    public class EmbeddedDataSpecification : IClass
    {
        /// <summary>
        /// Reference to the data specification
        /// </summary>
        public Reference DataSpecification { get; set; }

        /// <summary>
        /// Actual content of the data specification
        /// </summary>
        public IDataSpecificationContent DataSpecificationContent { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            yield return DataSpecification;

            yield return DataSpecificationContent;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            yield return DataSpecification;

            // Recurse
            foreach (var anItem in DataSpecification.Descend())
            {
                yield return anItem;
            }

            yield return DataSpecificationContent;

            // Recurse
            foreach (var anItem in DataSpecificationContent.Descend())
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public EmbeddedDataSpecification(
            Reference dataSpecification,
            IDataSpecificationContent dataSpecificationContent)
        {
            DataSpecification = dataSpecification;
            DataSpecificationContent = dataSpecificationContent;
        }
    }

    public enum DataTypeIec61360
    {
        /// <summary>
        /// values containing a calendar date, conformant to ISO 8601:2004 Format yyyy-mm-dd
        /// Example from IEC 61360-1:2017: "1999-05-31" is the [DATE] representation of:
        /// "31 May 1999".
        /// </summary>
        [EnumMember(Value = "DATE")]
        Date,

        /// <summary>
        /// values consisting of sequence of characters but cannot be translated into other
        /// languages
        /// </summary>
        [EnumMember(Value = "STRING")]
        String,

        /// <summary>
        /// values containing string but shall be represented as different string in different
        /// languages
        /// </summary>
        [EnumMember(Value = "STRING_TRANSLATABLE")]
        StringTranslatable,

        /// <summary>
        /// values containing values that are measure of type INTEGER. In addition such a value
        /// comes with a physical unit.
        /// </summary>
        [EnumMember(Value = "INTEGER_MEASURE")]
        IntegerMeasure,

        /// <summary>
        /// values containing values of type INTEGER but are no currencies or measures
        /// </summary>
        [EnumMember(Value = "INTEGER_COUNT")]
        IntegerCount,

        /// <summary>
        /// values containing values of type INTEGER that are currencies
        /// </summary>
        [EnumMember(Value = "INTEGER_CURRENCY")]
        IntegerCurrency,

        /// <summary>
        /// values containing values that are measures of type REAL. In addition such a value
        /// comes with a physical unit.
        /// </summary>
        [EnumMember(Value = "REAL_MEASURE")]
        RealMeasure,

        /// <summary>
        /// values containing numbers that can be written as a terminating or non-terminating
        /// decimal; a rational or irrational number but are no currencies or measures
        /// </summary>
        [EnumMember(Value = "REAL_COUNT")]
        RealCount,

        /// <summary>
        /// values containing values of type REAL that are currencies
        /// </summary>
        [EnumMember(Value = "REAL_CURRENCY")]
        RealCurrency,

        /// <summary>
        /// values representing truth of logic or Boolean algebra (TRUE, FALSE)
        /// </summary>
        [EnumMember(Value = "BOOLEAN")]
        Boolean,

        /// <summary>
        /// values containing values of type STRING conformant to Rfc 3987
        /// </summary>
        /// <remarks>
        /// In IEC61360-1 (2017) only URI is supported.
        /// An IRI type allows in particular to express an URL or an URI.
        /// </remarks>
        [EnumMember(Value = "IRI")]
        Iri,

        /// <summary>
        /// values conforming to ISO/IEC 11179 series global identifier sequences
        /// </summary>
        /// <remarks>
        /// <para>
        /// IRDI can be used instead of the more specific data types ICID or ISO29002_IRDI.
        /// </para>
        /// <para>
        /// ICID values are value conformant to an IRDI, where the delimiter between RAI and ID
        /// is “#” while the delimiter between DI and VI is confined to “##”
        /// </para>
        /// <para>
        /// ISO29002_IRDI values are values containing a global identifier that identifies an
        /// administrated item in a registry. The structure of this identifier complies with
        /// identifier syntax defined in ISO/TS 29002-5. The identifier shall fulfil the
        /// requirements specified in ISO/TS 29002-5 for an "international registration data
        /// identifier" (IRDI).
        /// </para>
        /// </remarks>
        [EnumMember(Value = "IRDI")]
        Irdi,

        /// <summary>
        /// values containing values of type rational
        /// </summary>
        [EnumMember(Value = "RATIONAL")]
        Rational,

        /// <summary>
        /// values containing values of type rational. In addition such a value comes with a
        /// physical unit.
        /// </summary>
        [EnumMember(Value = "RATIONAL_MEASURE")]
        RationalMeasure,

        /// <summary>
        /// values containing a time, conformant to ISO 8601:2004 but restricted to what is
        /// allowed in the corresponding type in xml.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Format hh:mm (ECLASS)
        /// </para>
        /// <para>
        /// Example from IEC 61360-1:2017: "13:20:00-05:00" is the [TIME] representation of:
        /// 1.20 p.m. for Eastern Standard Time, which is 5 hours behind Coordinated
        /// Universal Time (UTC).
        /// </para>
        /// </remarks>
        [EnumMember(Value = "TIME")]
        Time,

        /// <summary>
        /// values containing a time, conformant to ISO 8601:2004 but restricted to what is
        /// allowed in the corresponding type in xml.
        /// </summary>
        /// <remarks>
        /// Format yyyy-mm-dd hh:mm (ECLASS)
        /// </remarks>
        [EnumMember(Value = "TIMESTAMP")]
        Timestamp,

        /// <summary>
        /// values containing an address to a file. The values are of type URI and can represent
        /// an absolute or relative path.
        /// </summary>
        /// <remarks>
        /// IEC61360 does not support the file type.
        /// </remarks>
        [EnumMember(Value = "FILE")]
        File,

        /// <summary>
        /// Values containing string with any sequence of characters, using the syntax of HTML5
        /// (see W3C Recommendation 28:2014)
        /// </summary>
        [EnumMember(Value = "HTML")]
        Html,

        /// <summary>
        /// values containing the content of a file. Values may be binaries.
        /// </summary>
        /// <remarks>
        /// <para>
        /// HTML conformant to HTML5 is a special blob.
        /// </para>
        /// <para>
        /// In IEC61360 binary is for a sequence of bits, each bit being represented by “0” and
        /// “1” only. A binary is a blob but a blob may also contain other source code.
        /// </para>
        /// </remarks>
        [EnumMember(Value = "BLOB")]
        Blob
    }

    public enum LevelType
    {
        [EnumMember(Value = "Min")]
        Min,

        [EnumMember(Value = "Max")]
        Max,

        [EnumMember(Value = "Nom")]
        Nom,

        [EnumMember(Value = "Typ")]
        Typ
    }

    /// <summary>
    /// A value reference pair within a value list. Each value has a global unique id
    /// defining its semantic.
    /// </summary>
    public class ValueReferencePair : IClass
    {
        /// <summary>
        /// The value of the referenced concept definition of the value in valueId.
        /// </summary>
        public string Value { get; set; }

        /// <summary>
        /// Global unique id of the value.
        /// </summary>
        /// <remarks>
        /// It is recommended to use a global reference.
        /// </remarks>
        public Reference ValueId { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            yield return ValueId;
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            yield return ValueId;

            // Recurse
            foreach (var anItem in ValueId.Descend())
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public ValueReferencePair(
            string value,
            Reference valueId)
        {
            Value = value;
            ValueId = valueId;
        }
    }

    /// <summary>
    /// A set of value reference pairs.
    /// </summary>
    public class ValueList : IClass
    {
        /// <summary>
        /// A pair of a value together with its global unique id.
        /// </summary>
        public List<ValueReferencePair> ValueReferencePairs { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            foreach (var anItem in ValueReferencePairs)
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            foreach (var anItem in ValueReferencePairs)
            {
                yield return anItem;

                // Recurse
                foreach (var anotherItem in anItem.Descend())
                {
                    yield return anotherItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public ValueList(List<ValueReferencePair> valueReferencePairs)
        {
            ValueReferencePairs = valueReferencePairs;
        }
    }

    /// <summary>
    /// Content of data specification template for concept descriptions for properties,
    /// values and value lists conformant to IEC 61360.
    /// </summary>
    /// <remarks>
    /// <para>
    /// IEC61360 requires also a globally unique identifier for a concept
    /// description. This ID is not part of the data specification template.
    /// Instead the <see cref="Aas.ConceptDescription.Id" /> as inherited via
    /// <see cref="Aas.IIdentifiable" /> is used. Same holds for administrative
    /// information like the version and revision.
    /// </para>
    /// <para>
    /// <see cref="Aas.ConceptDescription.IdShort" /> and <see cref="Aas.DataSpecificationIec61360.ShortName" /> are very
    /// similar. However, in this case the decision was to add
    /// <see cref="Aas.DataSpecificationIec61360.ShortName" /> explicitly to the data specification. Same holds for
    /// <see cref="Aas.ConceptDescription.DisplayName" /> and
    /// <see cref="Aas.DataSpecificationIec61360.PreferredName" />. Same holds for
    /// <see cref="Aas.ConceptDescription.Description" /> and <see cref="Aas.DataSpecificationIec61360.Definition" />.
    /// </para>
    /// <para>
    /// Constraints:
    /// </para>
    /// <ul>
    ///   <li>
    ///     Constraint AASc-010:
    ///     If <see cref="Aas.DataSpecificationIec61360.Value" /> is not empty then <see cref="Aas.DataSpecificationIec61360.ValueList" /> shall be empty
    ///     and vice versa.
    ///   </li>
    ///   <li>
    ///     Constraint AASc-009:
    ///     If <see cref="Aas.DataSpecificationIec61360.DataType" /> one of:
    ///     <see cref="Aas.DataTypeIec61360.IntegerMeasure" />,
    ///     <see cref="Aas.DataTypeIec61360.RealMeasure" />,
    ///     <see cref="Aas.DataTypeIec61360.RationalMeasure" />,
    ///     <see cref="Aas.DataTypeIec61360.IntegerCurrency" />,
    ///     <see cref="Aas.DataTypeIec61360.RealCurrency" />, then <see cref="Aas.DataSpecificationIec61360.Unit" /> or
    ///     <see cref="Aas.DataSpecificationIec61360.UnitId" /> shall be defined.
    ///   </li>
    /// </ul>
    /// </remarks>
    public class DataSpecificationIec61360 : IDataSpecificationContent
    {
        /// <summary>
        /// Preferred name
        /// </summary>
        /// <remarks>
        /// <para>
        /// Constraints:
        /// </para>
        /// <ul>
        ///   <li>
        ///     Constraint AASc-002:
        ///     <see cref="Aas.DataSpecificationIec61360.PreferredName" /> shall be provided at least in English.
        ///   </li>
        /// </ul>
        /// </remarks>
        public List<LangString> PreferredName { get; set; }

        /// <summary>
        /// Short name
        /// </summary>
        public List<LangString>? ShortName { get; set; }

        /// <summary>
        /// Unit
        /// </summary>
        public string? Unit { get; set; }

        /// <summary>
        /// Unique unit id
        /// </summary>
        /// <remarks>
        /// <para>
        /// <see cref="Aas.DataSpecificationIec61360.Unit" /> and <see cref="Aas.DataSpecificationIec61360.UnitId" /> need to be consistent if both attributes
        /// are set
        /// </para>
        /// <para>
        /// It is recommended to use a global reference.
        /// </para>
        /// <para>
        /// Although the <see cref="Aas.DataSpecificationIec61360.UnitId" /> is a global reference there might exist a
        /// <see cref="Aas.ConceptDescription" />
        /// with data specification <see cref="Aas.DataSpecificationPhysicalUnit" /> with
        /// the same ID.
        /// </para>
        /// </remarks>
        public Reference? UnitId { get; set; }

        /// <summary>
        /// Source of definition
        /// </summary>
        public string? SourceOfDefinition { get; set; }

        /// <summary>
        /// Symbol
        /// </summary>
        public string? Symbol { get; set; }

        /// <summary>
        /// Data Type
        /// </summary>
        public DataTypeIec61360? DataType { get; set; }

        /// <summary>
        /// Definition in different languages
        /// </summary>
        public List<LangString>? Definition { get; set; }

        /// <summary>
        /// Value Format
        /// </summary>
        public string? ValueFormat { get; set; }

        /// <summary>
        /// List of allowed values
        /// </summary>
        public ValueList? ValueList { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        public string? Value { get; set; }

        /// <summary>
        /// Set of levels.
        /// </summary>
        public LevelType? LevelType { get; set; }

        /// <summary>
        /// Iterate over ShortName, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverShortNameOrEmpty()
        {
            return ShortName
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over Definition, if set, and otherwise return an empty enumerable.
        /// </summary>
        public IEnumerable<LangString> OverDefinitionOrEmpty()
        {
            return Definition
                ?? System.Linq.Enumerable.Empty<LangString>();
        }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            foreach (var anItem in PreferredName)
            {
                yield return anItem;
            }

            if (ShortName != null)
            {
                foreach (var anItem in ShortName)
                {
                    yield return anItem;
                }
            }

            if (UnitId != null)
            {
                yield return UnitId;
            }

            if (Definition != null)
            {
                foreach (var anItem in Definition)
                {
                    yield return anItem;
                }
            }

            if (ValueList != null)
            {
                yield return ValueList;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            foreach (var anItem in PreferredName)
            {
                yield return anItem;

                // Recurse
                foreach (var anotherItem in anItem.Descend())
                {
                    yield return anotherItem;
                }
            }

            if (ShortName != null)
            {
                foreach (var anItem in ShortName)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (UnitId != null)
            {
                yield return UnitId;

                // Recurse
                foreach (var anItem in UnitId.Descend())
                {
                    yield return anItem;
                }
            }

            if (Definition != null)
            {
                foreach (var anItem in Definition)
                {
                    yield return anItem;

                    // Recurse
                    foreach (var anotherItem in anItem.Descend())
                    {
                        yield return anotherItem;
                    }
                }
            }

            if (ValueList != null)
            {
                yield return ValueList;

                // Recurse
                foreach (var anItem in ValueList.Descend())
                {
                    yield return anItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public DataSpecificationIec61360(
            List<LangString> preferredName,
            List<LangString>? shortName = null,
            string? unit = null,
            Reference? unitId = null,
            string? sourceOfDefinition = null,
            string? symbol = null,
            DataTypeIec61360? dataType = null,
            List<LangString>? definition = null,
            string? valueFormat = null,
            ValueList? valueList = null,
            string? value = null,
            LevelType? levelType = null)
        {
            PreferredName = preferredName;
            ShortName = shortName;
            Unit = unit;
            UnitId = unitId;
            SourceOfDefinition = sourceOfDefinition;
            Symbol = symbol;
            DataType = dataType;
            Definition = definition;
            ValueFormat = valueFormat;
            ValueList = valueList;
            Value = value;
            LevelType = levelType;
        }
    }

    public class DataSpecificationPhysicalUnit : IDataSpecificationContent
    {
        /// <summary>   
        /// Name of the physical unit
        /// </summary>
        public string UnitName { get; set; }

        /// <summary>
        /// Symbol for the physical unit
        /// </summary>
        public string UnitSymbol { get; set; }

        /// <summary>
        /// Definition in different languages
        /// </summary>
        public List<LangString> Definition { get; set; }

        /// <summary>
        /// Notation of SI physical unit
        /// </summary>
        public string? SiNotation { get; set; }

        /// <summary>
        /// Name of SI physical unit
        /// </summary>
        public string? SiName { get; set; }

        /// <summary>
        /// Notation of physical unit conformant to DIN
        /// </summary>
        public string? DinNotation { get; set; }

        /// <summary>
        /// Name of physical unit conformant to ECE
        /// </summary>
        public string? EceName { get; set; }

        /// <summary>
        /// Code of physical unit conformant to ECE
        /// </summary>
        public string? EceCode { get; set; }

        /// <summary>
        /// Name of NIST physical unit
        /// </summary>
        public string? NistName { get; set; }

        /// <summary>
        /// Source of definition
        /// </summary>
        public string? SourceOfDefinition { get; set; }

        /// <summary>
        /// Conversion factor
        /// </summary>
        public string? ConversionFactor { get; set; }

        /// <summary>
        /// Registration authority ID
        /// </summary>
        public string? RegistrationAuthorityId { get; set; }

        /// <summary>
        /// Supplier
        /// </summary>
        public string? Supplier { get; set; }

        /// <summary>
        /// Iterate over all the class instances referenced from this instance
        /// without further recursion.
        /// </summary>
        public IEnumerable<IClass> DescendOnce()
        {
            foreach (var anItem in Definition)
            {
                yield return anItem;
            }
        }

        /// <summary>
        /// Iterate recursively over all the class instances referenced from this instance.
        /// </summary>
        public IEnumerable<IClass> Descend()
        {
            foreach (var anItem in Definition)
            {
                yield return anItem;

                // Recurse
                foreach (var anotherItem in anItem.Descend())
                {
                    yield return anotherItem;
                }
            }
        }

        /// <summary>
        /// Accept the <paramref name="visitor" /> to visit this instance
        /// for double dispatch.
        /// </summary>
        public void Accept(Visitation.IVisitor visitor)
        {
            visitor.Visit(this);
        }

        /// <summary>
        /// Accept the visitor to visit this instance for double dispatch
        /// with the <paramref name="context" />.
        /// </summary>
        public void Accept<TContext>(
            Visitation.IVisitorWithContext<TContext> visitor,
            TContext context)
        {
            visitor.Visit(this, context);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to transform this instance
        /// for double dispatch.
        /// </summary>
        public T Transform<T>(Visitation.ITransformer<T> transformer)
        {
            return transformer.Transform(this);
        }

        /// <summary>
        /// Accept the <paramref name="transformer" /> to visit this instance
        /// for double dispatch with the <paramref name="context" />.
        /// </summary>
        public T Transform<TContext, T>(
            Visitation.ITransformerWithContext<TContext, T> transformer,
            TContext context)
        {
            return transformer.Transform(this, context);
        }

        public DataSpecificationPhysicalUnit(
            string unitName,
            string unitSymbol,
            List<LangString> definition,
            string? siNotation = null,
            string? siName = null,
            string? dinNotation = null,
            string? eceName = null,
            string? eceCode = null,
            string? nistName = null,
            string? sourceOfDefinition = null,
            string? conversionFactor = null,
            string? registrationAuthorityId = null,
            string? supplier = null)
        {
            UnitName = unitName;
            UnitSymbol = unitSymbol;
            Definition = definition;
            SiNotation = siNotation;
            SiName = siName;
            DinNotation = dinNotation;
            EceName = eceName;
            EceCode = eceCode;
            NistName = nistName;
            SourceOfDefinition = sourceOfDefinition;
            ConversionFactor = conversionFactor;
            RegistrationAuthorityId = registrationAuthorityId;
            Supplier = supplier;
        }
    }

}  // namespace AasCore.Aas3_0_RC02

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
