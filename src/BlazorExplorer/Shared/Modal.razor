@inject IJSRuntime JSRuntime

@{ 
// resharper disable all

// see: https://www.meziantou.net/modal-component-in-blazor.htm
// https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal

}

@* see also: https://www.lambdatest.com/blog/html-dialog-element/ *@

@* Refactoring discussion: 
   We could also completely switch to Bootstrap's modal system
   see: https://getbootstrap.com/docs/5.0/components/modal/
   however, rest of the automation works quite fine. Less risk to leave it as it is. *@

<dialog id="dialog" @ref="_element">
    
    @ChildContent
    @*
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                onclick="dialog.close()">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        Content <br />
           Content <br />
           Content <br />
           Content <br />
           Content <br />
           Content <br />
           Content <br />
        Content <br />
    </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
      *@

</dialog>

@code {
    private DotNetObjectReference<Modal> _this;
    private ElementReference _element;

    // Content of the dialog
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Open { get; set; }

    // This parameter allows to use @bind-Open=... as explained in the previous post
    // https://www.meziantou.net/two-way-binding-in-blazor.htm
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public EventCallback<string> Close { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the dialog events the first time th ecomponent is rendered
        if (firstRender)
        {
            _this = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInitializeModal", _element, _this);
        }

        if (Open)
        {
            await JSRuntime.InvokeVoidAsync("blazorOpenModal", _element);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("blazorCloseModal", _element);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task OnClose(string returnValue)
    {
        if (Open == true)
        {
            Open = false;
            await OpenChanged.InvokeAsync(Open);
        }

        await Close.InvokeAsync(returnValue);
    }
}
